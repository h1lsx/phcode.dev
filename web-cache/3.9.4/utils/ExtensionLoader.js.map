{"version":3,"sources":["utils/ExtensionLoader.js"],"names":["define","require","exports","module","_","EventDispatcher","FileSystem","FileUtils","Async","ExtensionUtils","ThemeManager","UrlParams","NodeUtils","PathUtils","DefaultExtensionsList","JSON","parse","defaultExtensionsList","customExtensionLoadPaths","_DELETED_EXTENSION_FILE_MARKER","EXTENSION_LOAD_TIMOUT_SECONDS","INIT_EXTENSION_TIMEOUT","EVENT_EXTENSION_LOADED","EVENT_EXTENSION_DISABLED","EVENT_EXTENSION_LOAD_FAILED","_init","_extensions","_initExtensionTimeout","srcPath","getNativeBracketsDirectoryPath","contexts","pathLib","Phoenix","VFS","path","replace","globalPaths","brackets","_getGlobalRequireJSConfig","paths","Object","keys","forEach","key","makePathAbsolute","DEFAULT_EXTENSIONS_PATH_BASE","getDefaultExtensionPath","window","PhoenixBaseURL","_getExtensionPath","normalize","getExtensionDir","getDevExtensionPath","getDevExtensionDir","getUserExtensionPath","getUserExtensionDir","getRequireContextForExtension","name","_getInitExtensionTimeout","_setInitExtensionTimeout","value","_mergeConfigFromURL","baseConfig","deferred","$","Deferred","extensionConfigFile","baseUrl","getJSON","done","extensionConfig","length","extend","omit","resolve","err","reject","fail","status","console","error","promise","_mergeConfig","startsWith","Error","savedFSlib","fs","_loadNodeExtension","extensionMainPath","nodeConfig","mainPlatformPath","getTauriPlatformPath","log","_loadNodeExtensionModule","loadExtensionModule","config","entryPoint","metadata","context","locale","getLocale","waitSeconds","text","useXhr","_url","_protocol","_hostname","_port","isDefaultExtensionModule","then","mergedConfig","extensionRequire","libRequire","extensionRequireDeferred","nativeDir","isNativeApp","nodeIsRequired","main","join","initPromise","initExtension","withTimeout","logger","reportError","errorMessage","ERROR_TIMEOUT","errback","additionalInfo","String","requireType","originalError","target","src","stack","loadExtension","loadMetadata","always","theme","disabled","trigger","_testExtensionByURL","result","e","testExtension","extensionPath","entry","isFile","async","_removeExtensionsMarkedForDelete","directory","contents","extensions","promises","extensionEntry","isDirectory","extensionName","markedRemove","getFileForPath","push","existsAsync","deleteMarkerExists","Promise","unlink","fullPath","all","_loadAll","processExtension","getDirectoryForPath","getContents","doInParallel","item","extConfig","getVirtualServingURLForPath","loadAllDefaultExtensions","leaveTrail","loadAllExtensionsInNativeDirectory","loadExtensionFromNativeDirectory","testAllExtensionsInNativeDirectory","extensionsDir","perf","spec","i","loadResult","basePath","testAllDefaultExtensions","bracketsPath","srcBaseUrl","URL","href","endsWith","getSourcePathForExtension","devTempExtDir","getDevTempExtensionDir","customExtensionLoadPath","srcBasePath","ensureTrailingSlash","relativePath","_attachThemeLoadListeners","off","EVENT_THEME_LOADED","on","refresh","_getRandomPrefix","uuid","crypto","randomUUID","split","_loadCustomExtensionPath","extPath","assetsServeDir","getTauriAssetServeDir","getTauriDir","newExtVersionStr","extParentPath","basename","extDestPath","ensureExistsDirAsync","copy","_copiedPath","catch","init","params","get","customLoadPaths","customPath","create","disabledExtensionPath","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/**\n * ExtensionLoader searches the filesystem for extensions, then creates a new context for each one and loads it.\n * This module dispatches the following events:\n *      \"load\" - when an extension is successfully loaded. The second argument is the file path to the\n *          extension root.\n *      \"loadFailed\" - when an extension load is unsuccessful. The second argument is the file path to the\n *          extension root.\n */\n// jshint ignore: start\n/*global logger, path*/\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    const _              = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        FileSystem     = require(\"filesystem/FileSystem\"),\n        FileUtils      = require(\"file/FileUtils\"),\n        Async          = require(\"utils/Async\"),\n        ExtensionUtils = require(\"utils/ExtensionUtils\"),\n        ThemeManager   = require(\"view/ThemeManager\"),\n        UrlParams      = require(\"utils/UrlParams\").UrlParams,\n        NodeUtils = require(\"utils/NodeUtils\"),\n        PathUtils      = require(\"thirdparty/path-utils/path-utils\"),\n        DefaultExtensionsList = JSON.parse(require(\"text!extensions/default/DefaultExtensions.json\"))\n            .defaultExtensionsList;\n\n    const customExtensionLoadPaths = {};\n\n    const _DELETED_EXTENSION_FILE_MARKER = \"_phcode_extension_marked_for_delete\";\n\n    // default async initExtension timeout\n    var EXTENSION_LOAD_TIMOUT_SECONDS = 60,\n        INIT_EXTENSION_TIMEOUT = EXTENSION_LOAD_TIMOUT_SECONDS * 1000,\n        EVENT_EXTENSION_LOADED = \"load\",\n        EVENT_EXTENSION_DISABLED = \"disabled\",\n        EVENT_EXTENSION_LOAD_FAILED = \"loadFailed\";\n\n    var _init       = false,\n        _extensions = {},\n        _initExtensionTimeout = INIT_EXTENSION_TIMEOUT,\n        srcPath     = FileUtils.getNativeBracketsDirectoryPath();\n\n    /**\n     * Stores require.js contexts of extensions\n     * @type {Object.<string, Object>}\n     */\n    var contexts    = {};\n\n    var pathLib =  Phoenix.VFS.path;\n\n    // The native directory path ends with either \"test\" or \"src\". We need \"src\" to\n    // load the text and i18n modules.\n    srcPath = srcPath.replace(/\\/test$/, \"/src\"); // convert from \"test\" to \"src\"\n\n\n    // Retrieve the global paths\n    var globalPaths = brackets._getGlobalRequireJSConfig().paths;\n\n    // Convert the relative paths to absolute\n    Object.keys(globalPaths).forEach(function (key) {\n        globalPaths[key] = PathUtils.makePathAbsolute(srcPath + \"/\" + globalPaths[key]);\n    });\n\n    /**\n     * Returns the path to the default extensions directory relative to Phoenix base URL\n     */\n    const DEFAULT_EXTENSIONS_PATH_BASE = \"extensions/default\";\n    function getDefaultExtensionPath() {\n        return window.PhoenixBaseURL + DEFAULT_EXTENSIONS_PATH_BASE;\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function _getExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getExtensionDir());\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function getDevExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getDevExtensionDir());\n    }\n\n    /**\n     * Returns the full path of the default user extensions directory. This is in the users\n     * application support directory, which is typically\n     * /Users/<user>/Application Support/Brackets/extensions/user on the mac, and\n     * C:\\Users\\<user>\\AppData\\Roaming\\Brackets\\extensions\\user on windows.\n     */\n    function getUserExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getUserExtensionDir());\n    }\n\n    /**\n     * Returns the require.js require context used to load an extension\n     *\n     * @param {!string} name, used to identify the extension\n     * @return {!Object} A require.js require object used to load the extension, or undefined if\n     * there is no require object with that name\n     */\n    function getRequireContextForExtension(name) {\n        return contexts[name];\n    }\n\n    /**\n     * @private\n     * Get timeout value for rejecting an extension's async initExtension promise.\n     * @return {number} Timeout in milliseconds\n     */\n    function _getInitExtensionTimeout() {\n        return _initExtensionTimeout;\n    }\n\n    /**\n     * @private\n     * Set timeout for rejecting an extension's async initExtension promise.\n     * @param {number} value Timeout in milliseconds\n     */\n    function _setInitExtensionTimeout(value) {\n        _initExtensionTimeout = value;\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfigFromURL(baseConfig) {\n        var deferred = new $.Deferred(),\n            extensionConfigFile = baseConfig.baseUrl + \"/requirejs-config.json\";\n\n        // Optional JSON config for require.js\n        $.getJSON(extensionConfigFile).done(function (extensionConfig) {\n            if(Object.keys(extensionConfig || {}).length === 0){\n                deferred.resolve(baseConfig);\n                return;\n            }\n            try {\n                if(!extensionConfig.paths){\n                    extensionConfig.paths = {};\n                }\n                // baseConfig.paths properties will override any extension config paths\n                _.extend(extensionConfig.paths, baseConfig.paths);\n\n                // Overwrite baseUrl, context, locale (paths is already merged above)\n                _.extend(extensionConfig, _.omit(baseConfig, \"paths\"));\n\n                deferred.resolve(extensionConfig);\n            } catch (err) {\n                // Failed to parse requirejs-config.json\n                deferred.reject(\"failed to parse requirejs-config.json\");\n            }\n        }).fail(function (err) {\n            // If requirejs-config.json isn't specified or if there is a bad config, resolve with the baseConfig\n            // to try loading the extension\n            if(err.status === 200) {\n                // we received the file, but its invalid json\n                console.error(\"[Extension] The require config file provided is invalid\", extensionConfigFile);\n            }\n            deferred.resolve(baseConfig);\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfig(baseConfig) {\n        if(baseConfig.baseUrl.startsWith(\"http://\") || baseConfig.baseUrl.startsWith(\"https://\")\n            || baseConfig.baseUrl.startsWith(\"phtauri://\") || baseConfig.baseUrl.startsWith(\"asset://\")) {\n            return _mergeConfigFromURL(baseConfig);\n        }\n        throw new Error(\"Config can only be loaded from an http url, but got\" + baseConfig.baseUrl);\n    }\n    const savedFSlib = window.fs;\n\n    function _loadNodeExtension(name, extensionMainPath, nodeConfig) {\n        const mainPlatformPath = Phoenix.fs.getTauriPlatformPath(extensionMainPath);\n        console.log(\"Loading node extension for \" + name, extensionMainPath, \":\", mainPlatformPath, nodeConfig);\n        NodeUtils._loadNodeExtensionModule(mainPlatformPath); // let load errors get reported to bugsnag\n    }\n\n    /**\n     * Loads the extension module that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {string} entryPoint name of the main js file to load\n     * @param {Object} metadata\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtensionModule(name, config, entryPoint, metadata) {\n        let extensionConfig = {\n            context: name,\n            baseUrl: config.baseUrl,\n            paths: globalPaths,\n            locale: brackets.getLocale(),\n            waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS,\n            config: {\n                text: {\n                    useXhr: function(_url, _protocol, _hostname, _port) {\n                        // as we load extensions in cross domain fashion, we have to use xhr\n                        // https://github.com/requirejs/text#xhr-restrictions\n                        // else user installed extension require will fail in tauri\n                        return true;\n                    }\n                }\n            }\n        };\n        const isDefaultExtensionModule =( extensionConfig.baseUrl\n            && extensionConfig.baseUrl.startsWith(`${window.PhoenixBaseURL}extensions/default/`));\n        // Read optional requirejs-config.json\n        return _mergeConfig(extensionConfig).then(function (mergedConfig) {\n            // Create new RequireJS context and load extension entry point\n            var extensionRequire = brackets.libRequire.config(mergedConfig),\n                extensionRequireDeferred = new $.Deferred();\n            if(!isDefaultExtensionModule && config.nativeDir && metadata.nodeConfig){\n                if(!Phoenix.isNativeApp && metadata.nodeConfig.nodeIsRequired) {\n                    extensionRequireDeferred.reject(\n                        new Error(`Extension ${name} cannot be loaded in browser as it needs node(nodeConfig.nodeIsRequired:true)`));\n                    return extensionRequireDeferred.promise();\n                }\n                if(Phoenix.isNativeApp) {\n                    if(!metadata.nodeConfig.main){\n                        extensionRequireDeferred.reject(\n                            new Error(`Extension ${name} doesnt specify a main file(nodeConfig.main) in package.json!`));\n                        return extensionRequireDeferred.promise();\n                    }\n                    _loadNodeExtension(name, path.join(config.nativeDir, metadata.nodeConfig.main),\n                        metadata.nodeConfig);\n                } else {\n                    console.log(`Extension ${name} optionally needs node. Node not loaded in browser.`);\n                }\n            }\n            contexts[name] = extensionRequire;\n            extensionRequire([entryPoint], extensionRequireDeferred.resolve, extensionRequireDeferred.reject);\n\n            return extensionRequireDeferred.promise();\n        }).then(function (module) {\n            // Extension loaded normally\n            if(savedFSlib !== window.fs) {\n                console.error(\"fslib overwrite detected while loading extension. This means that\" +\n                    \" some extension tried to modify a core library. reverting to original lib..\");\n                // note that the extension name here may not be that actual extension that did the\n                // overwrite. So we dont log the extension name here.\n                window.fs = savedFSlib;\n            }\n            var initPromise;\n\n            _extensions[name] = module;\n\n            // Optional sync/async initExtension\n            if (module && module.initExtension && (typeof module.initExtension === \"function\")) {\n                // optional async extension init\n                try {\n                    initPromise = Async.withTimeout(module.initExtension(), _getInitExtensionTimeout());\n                } catch (err) {\n                    // Synchronous error while initializing extension\n                    console.error(\"[Extension] Error -- error thrown during initExtension for \" + name + \": \" + err);\n                    logger.reportError(err);\n                    return new $.Deferred().reject(err).promise();\n                }\n\n                // initExtension may be synchronous and may not return a promise\n                if (initPromise) {\n                    // WARNING: These calls to initPromise.fail() and initPromise.then(),\n                    // could also result in a runtime error if initPromise is not a valid\n                    // promise. Currently, the promise is wrapped via Async.withTimeout(),\n                    // so the call is safe as-is.\n                    initPromise.fail(function (err) {\n                        let errorMessage = \"[Extension] Error -- timeout during initExtension for \" + name;\n                        if (err === Async.ERROR_TIMEOUT) {\n                            console.error(errorMessage);\n                        } else {\n                            errorMessage = \"[Extension] Error -- failed initExtension for \" + name;\n                            console.error(errorMessage + (err ? \": \" + err : \"\"));\n                        }\n                        if(isDefaultExtensionModule){\n                            logger.reportError(err, errorMessage);\n                        }\n                    });\n\n                    return initPromise;\n                }\n            }\n        }, function errback(err) {\n            // Extension failed to load during the initial require() call\n            var additionalInfo = String(err);\n            if (err.requireType === \"scripterror\" && err.originalError) {\n                // This type has a misleading error message - replace it with something clearer (URL of require() call that got a 404 result)\n                additionalInfo = \"Module does not exist: \" + err.originalError.target.src;\n            }\n            console.error(\"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            if(isDefaultExtensionModule){\n                logger.reportError(err, \"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            }\n\n            if (err.requireType === \"define\") {\n                // This type has a useful stack (exception thrown by ext code or info on bad getModule() call)\n                console.log(err.stack);\n            }\n        });\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtension(name, config, entryPoint) {\n        var promise = new $.Deferred();\n\n        // Try to load the package.json to figure out if we are loading a theme.\n        ExtensionUtils.loadMetadata(config.baseUrl, name).always(promise.resolve);\n\n        return promise\n            .then(function (metadata) {\n                // No special handling for themes... Let the promise propagate into the ExtensionManager\n                if (metadata && metadata.theme) {\n                    return;\n                }\n\n                if (!metadata.disabled) {\n                    return loadExtensionModule(name, config, entryPoint, metadata);\n                }\n                return new $.Deferred().reject(\"disabled\").promise();\n\n            })\n            .then(function () {\n                exports.trigger(EVENT_EXTENSION_LOADED, config.baseUrl);\n            }, function (err) {\n                if (err === \"disabled\") {\n                    exports.trigger(EVENT_EXTENSION_DISABLED, config.baseUrl);\n                } else {\n                    exports.trigger(EVENT_EXTENSION_LOAD_FAILED, config.baseUrl);\n                }\n            });\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _testExtensionByURL(name, config, entryPoint) {\n        var result = new $.Deferred();\n\n        try{\n            var extensionRequire = brackets.libRequire.config({\n                context: name,\n                baseUrl: config.baseUrl,\n                paths: $.extend({}, config.paths, globalPaths),\n                waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n            });\n\n            extensionRequire([entryPoint], function () {\n                console.log(\"Test extension loaded: \", name);\n                result.resolve();\n            }, function (err) {\n                // Something went wrong while loading extension\n                console.log(\"Unit tests not found for:\", name, err);\n                result.reject();\n            });\n        } catch (e) {\n            console.error(\"Test extension load failed: \", name, e);\n            result.resolve();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testExtension(name, config, entryPoint) {\n        var result = new $.Deferred(),\n            extensionPath = config.baseUrl + \"/\" + entryPoint + \".js\";\n        if(extensionPath.startsWith(\"http://\") || extensionPath.startsWith(\"https://\")\n            || extensionPath.startsWith(\"phtauri://\") || extensionPath.startsWith(\"asset://\")) {\n            return _testExtensionByURL(name, config, entryPoint);\n        }\n\n        FileSystem.resolve(extensionPath, function (err, entry) {\n            if (!err && entry.isFile) {\n                // unit test file exists\n                var extensionRequire = brackets.libRequire.config({\n                    context: name,\n                    baseUrl: config.baseUrl,\n                    paths: $.extend({}, config.paths, globalPaths)\n                });\n\n                extensionRequire([entryPoint], function () {\n                    result.resolve();\n                });\n            } else {\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    async function _removeExtensionsMarkedForDelete(directory, contents) {\n        let extensions = [];\n        let promises = [];\n\n        for (let extensionEntry of contents) {\n            try {\n                if (extensionEntry.isDirectory) {\n                    const extensionName = extensionEntry.name;\n                    let markedRemove = FileSystem.getFileForPath(\n                        path.join(directory, extensionName, _DELETED_EXTENSION_FILE_MARKER));\n\n                    // Push the promise to the array without awaiting it\n                    promises.push(markedRemove.existsAsync().then(deleteMarkerExists => {\n                        if (!deleteMarkerExists) {\n                            extensions.push(extensionName);\n                        } else {\n                            return new Promise((resolve) => {\n                                // this never rejects. if we cant process, we continue with other extensions.\n                                extensionEntry.unlink(err => {\n                                    if (err) {\n                                        console.error(\"Error removing extension marked for removal:\",\n                                            extensionName, extensionEntry.fullPath, err);\n                                        resolve(err);\n                                    } else {\n                                        console.log(\"Removed extension marked for delete:\",\n                                            extensionName, extensionEntry.fullPath);\n                                        resolve();\n                                    }\n                                });\n                            });\n                        }\n                    }));\n                }\n            } catch (e) {\n                console.error(\"Error processing extension path:\", extensionEntry);\n            }\n        }\n\n        // Await all promises concurrently\n        await Promise.all(promises);\n\n        return extensions;\n    }\n\n\n    /**\n     * @private\n     * Loads a file entryPoint from each extension folder within the baseUrl into its own Require.js context\n     *\n     * @param {!string} directory an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @param {!string} entryPoint Module name to load (without .js suffix)\n     * @param {function} processExtension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _loadAll(directory, entryPoint, processExtension) {\n        var result = new $.Deferred();\n\n        FileSystem.getDirectoryForPath(directory).getContents( async function (err, contents) {\n            if (err) {\n                console.error(\"[Extension] Error -- could not read native directory: \" + directory);\n                result.reject();\n                return;\n            }\n\n            const extensions = await _removeExtensionsMarkedForDelete(directory, contents);\n\n            if (extensions.length === 0) {\n                result.resolve();\n                return;\n            }\n\n            Async.doInParallel(extensions, function (item) {\n                const extConfig = {\n                    // we load user installed extensions in file system from our virtual/asset server URL\n                    baseUrl: Phoenix.VFS.getVirtualServingURLForPath(directory + \"/\" + item),\n                    nativeDir: directory + \"/\" + item,\n                    paths: {}\n                };\n                console.log(\"Loading Extension from virtual fs: \", extConfig);\n                return processExtension(item, extConfig, entryPoint);\n            }).always(function () {\n                // Always resolve the promise even if some extensions had errors\n                result.resolve();\n            });\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Loads All brackets default extensions from brackets base https URL.\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllDefaultExtensions() {\n        const extensionPath = getDefaultExtensionPath();\n        const result = new $.Deferred();\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            logger.leaveTrail(\"loading default extension: \" + extensionEntry);\n            var extConfig = {\n                baseUrl: extensionPath + \"/\" + extensionEntry\n            };\n            return loadExtension(extensionEntry, extConfig, 'main');\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllExtensionsInNativeDirectory(directory) {\n        return _loadAll(directory,  \"main\", loadExtension);\n    }\n\n    /**\n     * Loads a given extension at the path from virtual fs. Used by `debug menu> load project as extension`\n     * @param directory\n     * @return {!Promise}\n     */\n    function loadExtensionFromNativeDirectory(directory) {\n        logger.leaveTrail(\"loading custom extension from path: \" + directory);\n        const extConfig = {\n            baseUrl: Phoenix.VFS.getVirtualServingURLForPath(directory.replace(/\\/$/, \"\")),\n            nativeDir: directory\n        };\n        return loadExtension(\"ext\" + directory.replace(\"/\", \"-\"), // /fs/user/extpath to ext-fs-user-extpath\n            extConfig, 'main');\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllExtensionsInNativeDirectory(directory) {\n        const result = new $.Deferred();\n        const extensionsDir = _getExtensionPath() + \"/\" + directory,\n            config = {\n                baseUrl: Phoenix.VFS.getVirtualServingURLForPath(extensionsDir)\n            };\n\n        config.paths = {\n            \"perf\": Phoenix.VFS.getVirtualServingURLForPath( \"/test/perf\"),\n            \"spec\": Phoenix.VFS.getVirtualServingURLForPath(\"/test/spec\")\n        };\n\n        FileSystem.getDirectoryForPath(extensionsDir).getContents(function (err, contents) {\n            if (!err) {\n                let i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (extensionName) {\n                    let loadResult = new $.Deferred();\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        basePath: 'extensions/default',\n                        baseUrl: config.baseUrl + \"/\" + extensionName,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension Test from virtual fs: \", extConfig);\n                    _testExtensionByURL(extensionName, extConfig, 'unittests').always(function () {\n                        // Always resolve the promise even if some extensions had errors\n                        console.log(\"tested\", extensionName);\n                        loadResult.resolve();\n                    });\n                    return loadResult.promise();\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension Load Test] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllDefaultExtensions() {\n        const bracketsPath = FileUtils.getNativeBracketsDirectoryPath();\n        const baseUrl = window.PhoenixBaseURL;\n        let srcBaseUrl = new URL(baseUrl + '../src').href;\n        let result = new $.Deferred();\n        if(!srcBaseUrl.endsWith(\"/\")) {\n            srcBaseUrl = srcBaseUrl + \"/\";\n        }\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            const loadResult = new $.Deferred();\n            const extConfig = {\n                basePath: 'extensions/default',\n                baseUrl: new URL(srcBaseUrl + DEFAULT_EXTENSIONS_PATH_BASE + \"/\" + extensionEntry).href,\n                paths: {\n                    \"perf\": bracketsPath + \"/perf\",\n                    \"spec\": bracketsPath + \"/spec\"\n                }\n            };\n            console.log(\"Testing default extension: \", extensionEntry);\n            _testExtensionByURL(extensionEntry, extConfig, 'unittests').always(function () {\n                // Always resolve the promise even if some extensions had errors\n                console.log(\"load complete\", extensionEntry);\n                loadResult.resolve();\n            });\n            return loadResult.promise();\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n    }\n\n    // eg: extensionPath = /tauri/home/home/.local/share/io.phcode.dev/assets/extensions/devTemp/theme/14/theme.css\n    // eg: customExtensionLoadPath = /tauri/home/home/.local/share/io.phcode.dev/assets/extensions/devTemp/theme/14\n    // eg: srcBasePath = /tauri/home/home/myExtension\n    function getSourcePathForExtension(extensionPath) {\n        const devTempExtDir = `${Phoenix.VFS.getDevTempExtensionDir()}/`;\n        if(extensionPath.startsWith(devTempExtDir)) {\n            for(let customExtensionLoadPath of Object.keys(customExtensionLoadPaths)){\n                let srcBasePath = customExtensionLoadPaths[customExtensionLoadPath];\n                if(extensionPath.startsWith(Phoenix.VFS.ensureTrailingSlash(customExtensionLoadPath))) {\n                    const relativePath = extensionPath.replace(Phoenix.VFS.ensureTrailingSlash(customExtensionLoadPath), \"\");\n                    if(!srcBasePath.endsWith(\"/\")){\n                        srcBasePath = srcBasePath + \"/\";\n                    }\n                    return `${srcBasePath}${relativePath}`;\n                }\n            }\n        }\n        return extensionPath;\n    }\n\n    function _attachThemeLoadListeners() {\n        ThemeManager.off(`${ThemeManager.EVENT_THEME_LOADED}.extensionLoader`);\n        ThemeManager.on(`${ThemeManager.EVENT_THEME_LOADED}.extensionLoader`, ()=>{\n            ThemeManager.refresh(true);\n        });\n    }\n\n    function _getRandomPrefix() {\n        let uuid = crypto.randomUUID();\n        // for example \"36b8f84d-df4e-4d49-b662-bcde71a8764f\"\n        return uuid.split(\"-\")[0]; // Eg. return 36b8f84d\n    }\n    function _loadCustomExtensionPath(extPath) {\n        const assetsServeDir = Phoenix.VFS.getTauriAssetServeDir();\n        if(assetsServeDir && extPath.startsWith(Phoenix.VFS.getTauriDir()) &&\n            !extPath.startsWith(assetsServeDir)) {\n            // we have to do this random number thingy as tauri caches assets and will serve stale assets.\n            // this is problematic when the user is editing extension code and he cant see the updates on reload.\n            const newExtVersionStr = _getRandomPrefix();\n            const extParentPath = `${Phoenix.VFS.getDevTempExtensionDir()}/${Phoenix.path.basename(extPath)}`;\n            const extDestPath = `${extParentPath}/${newExtVersionStr}`;\n            customExtensionLoadPaths[extDestPath] = extPath;\n            Phoenix.fs.unlink(extParentPath, ()=>{\n                // ignore any errors in delete\n                Phoenix.VFS.ensureExistsDirAsync(extParentPath)\n                    .then(()=>{\n                        Phoenix.fs.copy(extPath, extDestPath, function (err, _copiedPath) {\n                            if (err) {\n                                console.error(`Error copying extension from ${extPath} to ${extDestPath}`, err);\n                                result.reject(err);\n                            } else {\n                                _attachThemeLoadListeners();\n                                loadExtensionFromNativeDirectory(extDestPath)\n                                    .fail(console.error);\n                            }\n                        });\n                    }).catch((err)=>{\n                        console.error(`Error creating dir ${extDestPath}`, err);\n                        result.reject(err);\n                    });\n            });\n            // custom extensions are always loaded marked as resolved to prevent the main event loop from taking\n            // too long to load\n            let result = new $.Deferred();\n            result.resolve();\n            return result.promise();\n        }\n        return loadExtensionFromNativeDirectory(extPath);\n    }\n\n    /**\n     * Load extensions.\n     *\n     * @param {?Array.<string>} A list containing references to extension source\n     *      location. A source location may be either (a) a folder name inside\n     *      src/extensions or (b) an absolute path.\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function init(paths) {\n        require(\"extensionsIntegrated/loader\");\n        var params = new UrlParams();\n\n        if (_init) {\n            // Only init once. Return a resolved promise.\n            return new $.Deferred().resolve().promise();\n        }\n\n        if (!paths) {\n            params.parse();\n\n            if (params.get(\"reloadWithoutUserExts\") !== \"true\") {\n                paths = [\n                    \"default\",\n                    getUserExtensionPath(),\n                    getDevExtensionPath()\n                ];\n            } else {\n                paths = [];\n            }\n            if(params.get(\"loadDevExtensionPath\")){\n                let customLoadPaths = params.get(\"loadDevExtensionPath\").split(\",\");\n                for(let customPath of customLoadPaths){\n                    paths.push(\"custom:\" + customPath);\n                }\n            }\n        }\n\n        // Load extensions before restoring the project\n\n        // Get a Directory for the user extension directory and create it if it doesn't exist.\n        // Note that this is an async call and there are no success or failure functions passed\n        // in. If the directory *doesn't* exist, it will be created. Extension loading may happen\n        // before the directory is finished being created, but that is okay, since the extension\n        // loading will work correctly without this directory.\n        // If the directory *does* exist, nothing else needs to be done. It will be scanned normally\n        // during extension loading.\n        var extensionPath = getUserExtensionPath();\n        FileSystem.getDirectoryForPath(extensionPath).create();\n        FileSystem.getDirectoryForPath(getDevExtensionPath()).create();\n\n        // Create the extensions/disabled directory, too.\n        var disabledExtensionPath = extensionPath.replace(/\\/user$/, \"/disabled\");\n        FileSystem.getDirectoryForPath(disabledExtensionPath).create();\n\n        var promise = Async.doInParallel(paths, function (extPath) {\n            if(extPath === \"default\"){\n                return loadAllDefaultExtensions();\n            } else if(extPath.startsWith(\"custom:\")){\n                return _loadCustomExtensionPath(extPath.replace(\"custom:\", \"\"));\n            } else {\n                return loadAllExtensionsInNativeDirectory(extPath);\n            }\n        }, false);\n\n        promise.always(function () {\n            _init = true;\n        });\n\n        return promise;\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // unit tests\n    exports._setInitExtensionTimeout = _setInitExtensionTimeout;\n    exports._getInitExtensionTimeout = _getInitExtensionTimeout;\n\n    // private internal usage\n    exports._DELETED_EXTENSION_FILE_MARKER = _DELETED_EXTENSION_FILE_MARKER;\n\n    // public API\n    exports.init = init;\n    exports.getDefaultExtensionPath = getDefaultExtensionPath;\n    exports.getUserExtensionPath = getUserExtensionPath;\n    exports.getRequireContextForExtension = getRequireContextForExtension;\n    exports.getSourcePathForExtension = getSourcePathForExtension;\n    exports.loadExtension = loadExtension;\n    exports.testExtension = testExtension;\n    exports.loadAllExtensionsInNativeDirectory = loadAllExtensionsInNativeDirectory;\n    exports.loadExtensionFromNativeDirectory = loadExtensionFromNativeDirectory;\n    exports.testAllExtensionsInNativeDirectory = testAllExtensionsInNativeDirectory;\n    exports.testAllDefaultExtensions = testAllDefaultExtensions;\n    exports.EVENT_EXTENSION_LOADED = EVENT_EXTENSION_LOADED;\n    exports.EVENT_EXTENSION_DISABLED = EVENT_EXTENSION_DISABLED;\n    exports.EVENT_EXTENSION_LOAD_FAILED = EVENT_EXTENSION_LOAD_FAILED;\n});\n"],"file":"ExtensionLoader.js"}