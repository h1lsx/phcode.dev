define(function(require,exports,module){const Strings=require("strings"),NodeConnector=require("NodeConnector"),UTILS_NODE_CONNECTOR="ph_utils";let utilsConnector;async function fetchURLText(url,encoding){if(!Phoenix.isNativeApp)throw new Error("node not available in browser");const{buffer:buffer}=await utilsConnector.execPeer("getURLContent",{url:url});return iconv.decode(Buffer.from(buffer),encoding)}async function _updateNodeLocaleStrings(){return!!Phoenix.isNativeApp&&(await utilsConnector.execPeer("setLocaleStrings",Strings),!0)}async function getPhoenixBinaryVersion(){if(!Phoenix.isNativeApp)throw new Error("getPhoenixBinaryVersion not available in browser");const cliArgs=await window.__TAURI__.invoke("_get_commandline_args"),phoenixBinPath=cliArgs[0];return utilsConnector.execPeer("getPhoenixBinaryVersion",phoenixBinPath)}async function getLinuxOSFlavorName(){return"linux"===Phoenix.platform&&Phoenix.isNativeApp?utilsConnector.execPeer("getLinuxOSFlavorName"):null}async function openUrlInBrowser(url,browserName){if(!Phoenix.isNativeApp)throw new Error("openUrlInBrowser not available in browser");return"win"===Phoenix.platform?Phoenix.app._openUrlInBrowserWin(url,browserName):utilsConnector.execPeer("openUrlInBrowser",{url:url,browserName:browserName})}async function _loadNodeExtensionModule(moduleNativeDir){if(!Phoenix.isNativeApp)throw new Error("_loadNodeExtensionModule not available in browser");return utilsConnector.execPeer("_loadNodeExtensionModule",{moduleNativeDir:moduleNativeDir})}async function _npmInstallInFolder(moduleNativeDir){if(!Phoenix.isNativeApp)throw new Error("_npmInstallInFolder not available in browser");return utilsConnector.execPeer("_npmInstallInFolder",{moduleNativeDir:moduleNativeDir})}async function getEnvironmentVariable(varName){if(!Phoenix.isNativeApp)throw new Error("getEnvironmentVariable not available in browser");return utilsConnector.execPeer("getEnvironmentVariable",varName)}async function ESLintFile(text,fullFilePath,projectFullPath){if(!Phoenix.isNativeApp)throw new Error("ESLintFile not available in browser");return utilsConnector.execPeer("ESLintFile",{text:text,fullFilePath:window.fs.getTauriPlatformPath(fullFilePath),projectFullPath:window.fs.getTauriPlatformPath(projectFullPath)})}Phoenix.isNativeApp&&(utilsConnector=NodeConnector.createNodeConnector("ph_utils",exports)),NodeConnector.isNodeAvailable()&&_updateNodeLocaleStrings();try{if(Phoenix.isTestWindow)if(Phoenix.isNativeApp){async function _setIsTestWindowGitHubActions(){const actionsEnv=await utilsConnector.execPeer("getEnvironmentVariable","GITHUB_ACTIONS");Phoenix.isTestWindowGitHubActions=!!actionsEnv}_setIsTestWindowGitHubActions().catch(e=>{console.error("Error setting Phoenix.isTestWindowGitHubActions",e)})}else{const urlSearchParams=new window.URLSearchParams(window.location.search||"");Phoenix.isTestWindowGitHubActions="yes"===urlSearchParams.get("isTestWindowGitHubActions")}}catch(e){console.error("Error setting Phoenix.isTestWindowGitHubActions",e)}exports._loadNodeExtensionModule=_loadNodeExtensionModule,exports._npmInstallInFolder=_npmInstallInFolder,exports.fetchURLText=fetchURLText,exports.getPhoenixBinaryVersion=getPhoenixBinaryVersion,exports.getLinuxOSFlavorName=getLinuxOSFlavorName,exports.openUrlInBrowser=openUrlInBrowser,exports.ESLintFile=ESLintFile,exports.getEnvironmentVariable=getEnvironmentVariable,exports.isNodeReady=NodeConnector.isNodeReady,window.NodeUtils=exports});
//# sourceMappingURL=NodeUtils.js.map
