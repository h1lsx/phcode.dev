{"version":3,"sources":["utils/Metrics.js"],"names":["define","require","exports","module","MAX_AUDIT_ENTRIES","ONE_DAY","initDone","disabled","loggedDataForAudit","Map","isFirstUseDay","userID","_setUserID","userIDKey","window","PhStore","getItem","crypto","randomUUID","setItem","_setFirstDayFlag","firstUseDayKey","firstBootTime","Date","now","firstUseDay","dayAfterFirstUse","setUTCDate","getUTCDate","today","setInterval","EVENT_TYPE","PLATFORM","PROJECT","THEMES","EXTENSIONS","NOTIFICATIONS","UI","UI_MENU","UI_DIALOG","UI_BOTTOM_PANEL","UI_SIDE_PANEL","UPDATES","LIVE_PREVIEW","KEYBOARD","CODE_HINTS","EDITOR","QUICK_VIEW","SEARCH","SHARING","PERFORMANCE","STORAGE","NEW_PROJECT","ERROR","USER","NODEJS","LINT","_createAnalyticsShims","analytics","_initData","loadStartTime","getTime","event","push","arguments","Phoenix","isNativeApp","dataLayer","gtag","length","splice","MINUTES_10","tauriGaErrorCountSent","sendOnceMore","noFurtherReporting","_sendTauriGAEvent","analyticsID","customUserID","events","__TAURI__","emit","catch","err","debugMode","console","error","logger","reportError","setTimeout","tauriGAEvents","_sendGaEvent","eventAct","category","label","count","key","existingEvent","get","set","event_category","event_label","value","TAURI_GA_EVENT_QUEUE_INTERVAL","_sendQueuedTauriGAEvents","brackets","config","googleAnalyticsIDDesktop","Array","from","values","clear","_initGoogleAnalytics","script","document","createElement","type","async","onload","googleAnalyticsID","page_title","page_path","page_location","location","origin","src","getElementsByTagName","appendChild","_initCoreAnalytics","appName","coreAnalyticsAppNameDesktop","coreAnalyticsAppName","initAnalyticsSession","coreAnalyticsID","init","testEnvironment","ignoredGAEvents","_sendToGoogleAnalytics","action","includes","_sendToCoreAnalytics","AUDIT_TYPE_COUNT","AUDIT_TYPE_VALUE","_logEventForAudit","eventType","eventCategory","eventSubCategory","val","defaultVal","sum","newVal","size","NUM_ENTRIES_TO_DELETE","keys","slice","forEach","k","delete","_countEvent","countEvent","_valueEvent","valueEvent","setDisabled","shouldDisable","isDisabled","getLoggedDataForAudit","clearAuditData","flushMetrics","e","logPerformanceTime","durationMs","Number"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global gtag, analytics, logger*/\n\n// @INCLUDE_IN_API_DOCS\n/**\n * The Metrics API can be used to send analytics data to track feature usage in accordance with users privacy settings.\n *\n *`Status: Internal - Not to be used by third party extensions.`\n *\n * ### Import\n * ```js\n * // usage within core:\n * const Metrics = require(\"utils/Metrics\");\n *\n * // usage within default extensions:\n * const Metrics = brackets.getModule(\"utils/Metrics\");\n * ```\n *\n * @module utils/Metrics\n */\ndefine(function (require, exports, module) {\n    const MAX_AUDIT_ENTRIES = 3000,\n        ONE_DAY = 24 * 60* 60 * 1000;\n    let initDone = false,\n        disabled = false,\n        loggedDataForAudit = new Map();\n\n    let isFirstUseDay;\n    let userID;\n\n    function _setUserID() {\n        const userIDKey = \"phoenixUserPseudoID\";\n        userID = window.PhStore.getItem(userIDKey);\n        if(!userID){\n            userID = crypto.randomUUID();\n            window.PhStore.setItem(userIDKey, userID);\n        }\n    }\n    _setUserID();\n\n    function _setFirstDayFlag() {\n        const firstUseDayKey = \"healthData.firstUseDay\";\n        let firstBootTime = window.PhStore.getItem(firstUseDayKey);\n        if(!firstBootTime){\n            firstBootTime = Date.now();\n            window.PhStore.setItem(firstUseDayKey, firstBootTime);\n        }\n        let firstUseDay= new Date(firstBootTime);\n        let dayAfterFirstUse = new Date(firstUseDay);\n        dayAfterFirstUse.setUTCDate(firstUseDay.getUTCDate() + 1);\n        let today = new Date();\n        isFirstUseDay = today < dayAfterFirstUse;\n    }\n    _setFirstDayFlag();\n    setInterval(_setFirstDayFlag, ONE_DAY);\n\n    /**\n     * This section outlines the properties and methods available in this module\n     * @name API\n     */\n\n    /**\n     * The Type of events that can be specified as an `eventType` in the API calls.\n     *\n     * ### Properties\n     * `PLATFORM`, `PROJECT`, `THEMES`, `EXTENSIONS`, `EXTENSIONS`, `UI`, `UI_DIALOG`, `UI_BOTTOM_PANEL`,\n     * `UI_SIDE_PANEL`, `LIVE_PREVIEW`, `CODE_HINTS`, `EDITOR`, `SEARCH`, `SHARING`, `PERFORMANCE`, `NEW_PROJECT`\n     *\n     * @typedef EVENT_TYPE\n     * @type {Object}\n     */\n    const EVENT_TYPE = {\n        PLATFORM: \"platform\",\n        PROJECT: \"project\",\n        THEMES: \"themes\",\n        EXTENSIONS: \"extensions\",\n        NOTIFICATIONS: \"notifications\",\n        UI: \"UI\",\n        UI_MENU: \"UIMenu\",\n        UI_DIALOG: \"ui-dialog\",\n        UI_BOTTOM_PANEL: \"ui-bottomPanel\",\n        UI_SIDE_PANEL: \"ui-sidePanel\",\n        UPDATES: \"update\",\n        LIVE_PREVIEW: \"live-preview\",\n        KEYBOARD: \"keyboard\",\n        CODE_HINTS: \"code-hints\",\n        EDITOR: \"editor\",\n        QUICK_VIEW: \"quickView\",\n        SEARCH: \"search\",\n        SHARING: \"sharing\",\n        PERFORMANCE: \"performance\",\n        STORAGE: \"storage\",\n        NEW_PROJECT: \"new-project\",\n        ERROR: \"error\",\n        USER: \"user\",\n        NODEJS: \"node\",\n        LINT: \"lint\"\n    };\n\n    /**\n     * This is so that phoenix can starting as soon as the shims are inited. The events logged before init() will be\n     * placed into a holding queue by ga and core analytics. When the lib is loaded and inited,\n     * the events will be processed without any loss.\n     * @private\n     */\n    function _createAnalyticsShims() {\n        // for core analytics\n        if(!window.analytics){ window.analytics = {\n            _initData: [], loadStartTime: new Date().getTime(),\n            event: function (){window.analytics._initData.push(arguments);}\n        };}\n        // for google analytics\n        if(!Phoenix.isNativeApp) {\n            // ga is not inpage in tauri builds. see below explanation in _initGoogleAnalytics\n            window.dataLayer = window.dataLayer || [];\n            window.gtag = function(){\n                window.dataLayer.push(arguments);\n                if(window.dataLayer.length > 500){\n                    window.dataLayer.splice(0, 250); // remove half the elements(offline queue guard)\n                }\n            };\n        }\n    }\n\n    _createAnalyticsShims();\n\n    const MINUTES_10 = 10*1000;\n    let tauriGaErrorCountSent = 0, sendOnceMore = false, noFurtherReporting = false;\n    function _sendTauriGAEvent(analyticsID, customUserID, events=[]) {\n        window.__TAURI__.event.emit(\"health\", {\n            analyticsID: analyticsID,\n            customUserID: customUserID,\n            events\n        }).catch(err=>{\n            if(window.debugMode){\n                console.error(err);\n            }\n            if(noFurtherReporting){\n                return;\n            }\n            // we only report 1 error once to prevent too many Bugsnag reports. We seen in bugsnag that like 2-3\n            // users triggers thousands of this error in bugsnag report per day as they send continuous error reports\n            // every minute due to this error. We throttle to send only 2 errors to bugsnag any minute at app level,\n            // so this will starve other genuine errors as well if not captured here.\n            tauriGaErrorCountSent ++;\n            if(sendOnceMore){\n                // we send the crash stack once and then another report 10 minutes later. After that, this is likeley\n                // to fail always.\n                noFurtherReporting = true;\n                logger.reportError(err,\n                    `${tauriGaErrorCountSent} _sendTauriGAEvent failures in ${MINUTES_10/1000} minutes`);\n            }\n            if(tauriGaErrorCountSent !== 1){\n                return;\n            }\n            logger.reportError(err);\n            setTimeout(()=>{\n                sendOnceMore = true;\n            }, MINUTES_10);\n        });\n    }\n\n    let tauriGAEvents = new Map();\n\n    function _sendGaEvent(eventAct, category, label, count) {\n        if(Phoenix.isNativeApp) {\n            const key = `${eventAct}:${category}:${label}}`;\n            const existingEvent = tauriGAEvents.get(key);\n            if(existingEvent) {\n                existingEvent.count = (existingEvent.count||0) + count;\n                return;\n            }\n            tauriGAEvents.set(key, {eventAct, category, label, count});\n            return;\n        }\n        gtag('event', eventAct, {\n            'event_category': category,\n            'event_label': label,\n            'value': count\n        });\n    }\n\n    const TAURI_GA_EVENT_QUEUE_INTERVAL = 3000;\n    function _sendQueuedTauriGAEvents() {\n        _sendTauriGAEvent(brackets.config.googleAnalyticsIDDesktop, userID, Array.from(tauriGAEvents.values()));\n        tauriGAEvents.clear();\n    }\n\n    function _initGoogleAnalytics() {\n        // Load google analytics scripts\n        if(Phoenix.isNativeApp) {\n            // in tauri google analytics is in a hidden window instead of current page as ga only supports http and\n            // https urls and not the tauri custom protocol urls. So we have a hidden window that loads ga from a\n            // http(s) page which is usually `https://phcode.dev/desktop-metrics.html` or\n            // \"http://localhost:8000/src/metrics.html\" for live dev builds in tauri.\n            _sendTauriGAEvent(brackets.config.googleAnalyticsIDDesktop, userID);\n            setInterval(_sendQueuedTauriGAEvents, TAURI_GA_EVENT_QUEUE_INTERVAL);\n            return;\n        }\n        let script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.onload = function(){\n            gtag('js', new Date());\n\n            // TODO use googleAnalyticsIDDesktop for desktop analytics\n            gtag('config', brackets.config.googleAnalyticsID, {\n                'page_title': 'Phoenix editor',\n                'page_path': '/index.html',\n                'page_location': window.location.origin\n            });\n        };\n        script.src = 'https://www.googletagmanager.com/gtag/js?' + brackets.config.googleAnalyticsID;\n        document.getElementsByTagName('head')[0].appendChild(script);\n    }\n\n    function _initCoreAnalytics() {\n        // Load core analytics scripts\n        let script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        window.analytics.debugMode = window.debugMode;\n        script.onload = function(){\n            // replace `your_analytics_account_ID` and `appName` below with your values\n            const appName = Phoenix.isNativeApp ?\n                brackets.config.coreAnalyticsAppNameDesktop:\n                brackets.config.coreAnalyticsAppName;\n            window.initAnalyticsSession( brackets.config.coreAnalyticsID, appName);\n            window.analytics.event(\"core-analytics\", \"client-lib\", \"loadTime\", 1,\n                (new Date().getTime())- window.analytics.loadStartTime);\n        };\n        script.src = 'https://unpkg.com/@aicore/core-analytics-client-lib/dist/analytics.min.js';\n        document.getElementsByTagName('head')[0].appendChild(script);\n    }\n\n    /**\n     * We are transitioning to our own analytics instead of google as we breached the free user threshold of google\n     * and paid plans for GA starts at 100,000 USD.\n     * @private\n     */\n    function init(){\n        if(initDone || window.testEnvironment){\n            return;\n        }\n        _initGoogleAnalytics();\n        _initCoreAnalytics();\n        initDone = true;\n    }\n\n    // some events generate too many ga events that ga can't handle. ignore them.\n    const ignoredGAEvents = ['instantSearch'];\n    function _sendToGoogleAnalytics(category, action, label, count) {\n        // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n        // TODO, see if we are sending too many events to ga, unlike core analytics, GA has a limit of\n        //  1 Million events per month for free plan.\n        if(disabled || window.testEnvironment){\n            return;\n        }\n        category = category || \"category\";\n        action = action || \"action\";\n        if(!label){\n            label = action;\n        }\n        if(!count){\n            count = 1;\n        }\n        let eventAct = `${category}.${action}.${label}`;\n        if(ignoredGAEvents.includes(action)){\n            return;\n        }\n        _sendGaEvent(eventAct, category, label, count);\n    }\n\n    function _sendToCoreAnalytics(category, action, label, count, value) {\n        // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n        if(disabled || window.testEnvironment){\n            return;\n        }\n        category = category || \"category\";\n        action = action || \"action\";\n        if(!label){\n            label = action;\n        }\n        if(!value){\n            value = 1;\n        }\n        analytics.event(category, action, label, count, value);\n    }\n\n    const AUDIT_TYPE_COUNT = \"count\",\n        AUDIT_TYPE_VALUE = \"val\";\n    function _logEventForAudit(eventType, eventCategory, eventSubCategory, val, type) {\n        let defaultVal = {\n            eventType: type,\n            sum: 0,\n            count: 0\n        };\n        let key = `${eventType}.${eventCategory}.${eventSubCategory}`;\n        let newVal = loggedDataForAudit.get(key) || defaultVal;\n        newVal.count = newVal.count + 1;\n        newVal.sum = newVal.sum + val;\n        loggedDataForAudit.set(key, newVal);\n        if(loggedDataForAudit.size >= MAX_AUDIT_ENTRIES){\n            const NUM_ENTRIES_TO_DELETE = 1000;\n            let keys = Array.from(loggedDataForAudit.keys()).slice(0, NUM_ENTRIES_TO_DELETE);\n            keys.forEach(k => loggedDataForAudit.delete(k));\n        }\n    }\n\n    function _countEvent(eventType, eventCategory, eventSubCategory, count= 1) {\n        _logEventForAudit(eventType, eventCategory, eventSubCategory, count, AUDIT_TYPE_COUNT);\n        _sendToGoogleAnalytics(eventType, eventCategory, eventSubCategory, count);\n        _sendToCoreAnalytics(eventType, eventCategory, eventSubCategory, count);\n    }\n\n    /**\n     * log a numeric count >=0\n     * @example <caption>To log that user clicked searchButton 5 times:</caption>\n     * Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"searchButton\", \"click\");\n     * Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"searchButton\", \"click\", 5);\n     *\n     * @param {EVENT_TYPE|string} eventType The kind of Event Type that needs to be logged- should be a js var compatible string.\n     * Some standard event types are available as `EVENT_TYPE`.\n     * @param {string} eventCategory The kind of Event Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {string} eventSubCategory The kind of Event Sub Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {number} [count=1] >=0 , optional, if not set defaults to 1\n     * @type {function}\n     */\n    function countEvent(eventType, eventCategory, eventSubCategory, count= 1) {\n        if(!isFirstUseDay){\n            // emit repeat user metrics too\n            _countEvent(`R-${eventType}`, eventCategory, eventSubCategory, count);\n        }\n        _countEvent(eventType, eventCategory, eventSubCategory, count);\n    }\n\n    function _valueEvent(eventType, eventCategory, eventSubCategory, value) {\n        _logEventForAudit(eventType, eventCategory, eventSubCategory, value, AUDIT_TYPE_VALUE);\n        _sendToGoogleAnalytics(eventType, eventCategory, eventSubCategory, value);\n        _sendToCoreAnalytics(eventType, eventCategory, eventSubCategory, 1, value);\n    }\n\n    /**\n     * log a numeric value (number).\n     * @example <caption>To log that startup time is 200ms:</caption>\n     * Metrics.valueEvent(Metrics.EVENT_TYPE.PERFORMANCE, \"startupTime\", \"ms\", 200);\n     *\n     * @param {EVENT_TYPE|string} eventType The kind of Event Type that needs to be logged- should be a js var compatible string.\n     * some standard event types are available as `EVENT_TYPE`.\n     * @param {string} eventCategory The kind of Event Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {string} eventSubCategory The kind of Event Sub Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {number} value\n     * @type {function}\n     */\n    function valueEvent(eventType, eventCategory, eventSubCategory, value) {\n        if(!isFirstUseDay){\n            // emit repeat user metrics too\n            _valueEvent(`R-${eventType}`, eventCategory, eventSubCategory, value);\n        }\n        _valueEvent(eventType, eventCategory, eventSubCategory, value);\n    }\n\n    function setDisabled(shouldDisable) {\n        disabled = shouldDisable;\n    }\n\n    function isDisabled() {\n        return disabled;\n    }\n\n    function getLoggedDataForAudit() {\n        return loggedDataForAudit;\n    }\n\n    function clearAuditData() {\n        loggedDataForAudit.clear();\n    }\n\n    /**\n     * Send all pending metrics, useful before app quit.\n     * Will never throw Error.\n     */\n    async function flushMetrics() {\n        try{\n            if(Phoenix.isNativeApp) {\n                _sendQueuedTauriGAEvents();\n            }\n        } catch (e) {\n            console.error(\"Error while flushMetrics: \", e);\n        }\n    }\n\n    /**\n     * Logs the performance time taken for a specific action.\n     *\n     * @param {string} action - The key representing the action being measured (e.g., 'startupTime').\n     * @param {number} durationMs - The duration of the action in milliseconds.\n     */\n    function logPerformanceTime(action, durationMs) {\n        valueEvent(EVENT_TYPE.PERFORMANCE, \"ms\", action, Number(durationMs));\n    }\n\n    // Define public API\n    exports.init               = init;\n    exports.setDisabled        = setDisabled;\n    exports.isDisabled         = isDisabled;\n    exports.getLoggedDataForAudit      = getLoggedDataForAudit;\n    exports.clearAuditData     = clearAuditData;\n    exports.countEvent         = countEvent;\n    exports.valueEvent         = valueEvent;\n    exports.logPerformanceTime = logPerformanceTime;\n    exports.flushMetrics       = flushMetrics;\n    exports.EVENT_TYPE = EVENT_TYPE;\n    exports.AUDIT_TYPE_COUNT = AUDIT_TYPE_COUNT;\n    exports.AUDIT_TYPE_VALUE = AUDIT_TYPE_VALUE;\n});\n"],"file":"Metrics.js"}