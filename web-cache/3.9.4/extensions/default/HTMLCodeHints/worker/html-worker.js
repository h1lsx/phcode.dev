!function(){let htmlValidator=HTMLLanguageService.createHTMLValidator({extends:["html-validate:standard"]});WorkerComm.triggerPeer("html_lint_extension_Loaded",{});let isUsingCustomConfig=!1,currentConfigID;function setupValidator(config,configID){try{return!config&&isUsingCustomConfig?(htmlValidator=HTMLLanguageService.createHTMLValidator({extends:["html-validate:standard"]}),isUsingCustomConfig=!1,currentConfigID=null):config&&currentConfigID!==configID&&(htmlValidator=HTMLLanguageService.createHTMLValidator(config),isUsingCustomConfig=!0,currentConfigID=configID),null}catch(e){return e.message}}async function htmlLint(params){let errorMessage=setupValidator(params.config,params.configID);if(errorMessage)return[{start:0,end:0,severity:2,message:"Invalid config file `.htmlvalidate.json`"+errorMessage,ruleId:"INVALID_CONFIG"}];const validatorResult=await htmlValidator.validateString(params.text,params.filePath);if(!validatorResult||!validatorResult.results||!validatorResult.results.length)return[];const errors=[];for(let result of validatorResult.results)if(result.messages&&result.messages.length)for(let message of result.messages)errors.push({start:message.offset,end:message.offset+(message.size||1)-1,severity:message.severity,message:message.message,ruleId:message.ruleId,ruleUrl:message.ruleUrl});return errors}async function updateHTMLLintConfig(params){params.config?console.error("HTML Lint worker updateHTMLLintConfig received null config",params):htmlValidator=HTMLLanguageService.createHTMLValidator(params.config)}WorkerComm.setExecHandler("htmlLint",htmlLint),WorkerComm.setExecHandler("updateHTMLLintConfig",updateHTMLLintConfig)}();
//# sourceMappingURL=html-worker.js.map
