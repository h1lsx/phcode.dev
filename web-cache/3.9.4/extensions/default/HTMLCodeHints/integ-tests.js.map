{"version":3,"sources":["extensions/default/HTMLCodeHints/integ-tests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","StringUtils","KeyEvent","describe","testPath","getTestPath","FileViewController","ProjectManager","CommandManager","Commands","testWindow","EditorManager","MainViewManager","FileSystem","CSSUtils","$","async","closeSession","awaitsForDone","execute","FILE_CLOSE_ALL","_forceClose","openFile","fileNameInProject","workingSet","openAndSelectDocument","WORKING_SET_VIEW","PROJECT_MANAGER","verifySrcJumpToDef","location","targetFileName","jumpShouldFail","selected","getSelectedItem","editor","expect","fullPath","toBe","getActiveEditor","setCursorPos","awaitsForFail","NAVIGATE_JUMPTO_DEFINITION","currentFile","getCurrentlyViewedFile","endsWith","toBeTrue","_deleteFile","relativeFileName","deleted","getFileForPath","unlink","awaitsFor","createAndVerifyFileContents","fileName","firstLineOfContent","FILE_NEW","fileNameInput","toBeDefined","val","simulateKeyEvent","DOM_VK_RETURN","document","getText","split","_validateCodeHints","cursor","expectedSomeHintsArray","selectItemNumber","SHOW_CODE_HINTS","hint","allSelectors","getAllCssSelectorsInProject","includes","is","text","click","DOM_VK_ESCAPE","body","setText","replaceRange","_validateCssEdit","cssFileName","cssClassName","randomString","line","ch","_testCssClassHintInFile","htmlLikeFile","getToken","string","beforeAll","createTestWindowAndRun","test","loadProjectInTestWindow","afterAll","closeTestWindow","it","getFocusedInlineEditor","file","extensions","extn"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeAll, afterAll, awaitsForDone, awaitsForFail, awaits, awaitsFor */\n\ndefine(function (require, exports, module) {\n    // Recommended to avoid reloading the integration test window Phoenix instance for each test.\n\n    const SpecRunnerUtils     = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        StringUtils        = brackets.getModule(\"utils/StringUtils\"),\n        KeyEvent         = brackets.getModule(\"utils/KeyEvent\");\n\n    describe(\"integration:HTML Code Hints integration tests\", function () {\n\n        const testPath = SpecRunnerUtils.getTestPath(\"/spec/LiveDevelopment-MultiBrowser-test-files\");\n\n        let FileViewController,     // loaded from brackets.test\n            ProjectManager,         // loaded from brackets.test;\n            CommandManager,\n            Commands,\n            testWindow,\n            EditorManager,\n            MainViewManager,\n            brackets,\n            FileSystem,\n            CSSUtils,\n            $;\n\n\n        beforeAll(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n            brackets            = testWindow.brackets;\n            $                   = testWindow.$;\n            FileViewController  = brackets.test.FileViewController;\n            ProjectManager      = brackets.test.ProjectManager;\n            CommandManager      = brackets.test.CommandManager;\n            Commands            = brackets.test.Commands;\n            EditorManager       = brackets.test.EditorManager;\n            MainViewManager     = brackets.test.MainViewManager;\n            FileSystem          = brackets.test.FileSystem;\n            CSSUtils          = brackets.test.CSSUtils;\n\n            await SpecRunnerUtils.loadProjectInTestWindow(testPath);\n        }, 30000);\n\n        afterAll(async function () {\n            FileViewController  = null;\n            ProjectManager      = null;\n            testWindow = null;\n            CSSUtils = null;\n            brackets = null;\n            await SpecRunnerUtils.closeTestWindow();\n        }, 30000);\n\n        async function closeSession() {\n            await awaitsForDone(CommandManager.execute(Commands.FILE_CLOSE_ALL, { _forceClose: true }),\n                \"closing all file\");\n        }\n\n        async function openFile(fileNameInProject, workingSet) {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/\" + fileNameInProject,\n                    workingSet ? FileViewController.WORKING_SET_VIEW:FileViewController.PROJECT_MANAGER\n                ));\n        }\n\n        it(\"Should jump to definition on div tag\", async function () {\n            await openFile(\"jumpToDef.html\");\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 5, ch: 6 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/simpleShared.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        it(\"Should jump to definition on css class\", async function () {\n            await openFile(\"jumpToDef.html\");\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 6, ch: 23 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/sub/test.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        async function verifySrcJumpToDef(location, targetFileName, jumpShouldFail) {\n            await openFile(\"jumpToDef.html\");\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos(location);\n\n            if(jumpShouldFail){\n                await awaitsForFail(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            } else {\n                await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            }\n\n            let currentFile = MainViewManager.getCurrentlyViewedFile();\n            expect(currentFile.fullPath.endsWith(targetFileName))\n                .toBeTrue();\n            await closeSession();\n        }\n\n        it(\"Should jump to files on href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 3, ch: 44 }, \"sub/test.css\");\n            await verifySrcJumpToDef({ line: 13, ch: 29 }, \"blank.css\");\n            await verifySrcJumpToDef({ line: 11, ch: 32 }, \"sub/icon_chevron.png\");\n            await closeSession();\n        });\n\n        it(\"Should not jump to files on non href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 14, ch: 47 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 7, ch: 20 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 3, ch: 22 }, \"jumpToDef.html\", true);\n            await closeSession();\n        });\n\n        async function _deleteFile(relativeFileName) {\n            let deleted = false;\n            FileSystem.getFileForPath(`${testPath}/${relativeFileName}`).unlink(()=>{\n                deleted = true;\n            });\n            await awaitsFor(function () {\n                return deleted;\n            }, \"extension interface registration notification\");\n        }\n\n        async function createAndVerifyFileContents(fileName, firstLineOfContent) {\n            await awaitsForDone(CommandManager.execute(Commands.FILE_NEW),\n                \"new file\");\n            await awaitsFor(function () {\n                return !!$(\".jstree-rename-input\")[0];\n            }, \"input to come\");\n            let fileNameInput = $(\".jstree-rename-input\");\n            expect(fileNameInput[0]).toBeDefined();\n            await _deleteFile(fileName);\n            fileNameInput.val(fileName);\n            SpecRunnerUtils.simulateKeyEvent(KeyEvent.DOM_VK_RETURN, \"keydown\", fileNameInput[0]);\n\n            await awaitsFor(function () {\n                return !$(\".jstree-rename-input\")[0];\n            }, \"input to go away\");\n            await awaitsFor(function () {\n                return !!EditorManager.getActiveEditor();\n            }, \"wait for editor to be active\");\n            expect(EditorManager.getActiveEditor().document.getText().split(\"\\n\")[0])\n                .toBe(firstLineOfContent);\n            await closeSession();\n            await _deleteFile(fileName);\n        }\n\n        it(\"Should creating new html and xhtml file with template contents\", async function () {\n            await createAndVerifyFileContents(\"test1.html\", \"<!DOCTYPE html>\");\n            await createAndVerifyFileContents(\"test1.xhtml\",\n                \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtm\" +\n                \"l1/DTD/xhtml1-strict.dtd\\\">\");\n        });\n\n        it(\"Should not put template contents for non html files creation\", async function () {\n            await createAndVerifyFileContents(\"test1.txt\", \"\");\n        });\n\n        async function _validateCodeHints(cursor, expectedSomeHintsArray, selectItemNumber) {\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos(cursor);\n\n            await awaitsForDone(CommandManager.execute(Commands.SHOW_CODE_HINTS),\n                \"show code hints\");\n\n            await awaitsFor(async function () {\n                for(let hint of expectedSomeHintsArray){\n                    const allSelectors = await CSSUtils.getAllCssSelectorsInProject();\n                    if(!allSelectors.includes(\".\"+hint)){\n                        return false;\n                    }\n                }\n                return true;\n            }, \"CSSUtils project selectors to be updated\");\n\n            await awaitsFor(function () {\n                return $(\".codehint-menu\").is(\":visible\");\n            }, \"codehints to be shown\");\n\n            await awaitsFor(function () {\n                for(let hint of expectedSomeHintsArray){\n                    if(!$(\".codehint-menu\").text().includes(hint)){\n                        return false;\n                    }\n                }\n                return true;\n            }, \"expected hints to be there\");\n\n            if(selectItemNumber >= 0) {\n                $(\".code-hints-list-item\")[selectItemNumber].click();\n                return;\n            }\n\n            SpecRunnerUtils.simulateKeyEvent(KeyEvent.DOM_VK_ESCAPE, \"keydown\", testWindow.document.body);\n            await awaitsFor(function () {\n                return !$(\".codehint-menu\").is(\":visible\");\n            }, \"codehints to be hidden\");\n        }\n\n        it(\"Should show css class hints in html file\", async function () {\n            await openFile(\"jumpToDef.html\", true);\n            await _validateCodeHints({ line: 9, ch: 21 }, [\"testClass\"]);\n            await closeSession();\n        });\n\n        it(\"should show inline styles in html document\", async function () {\n            await openFile(\"htmlOther/inlineStyle.html\", true);\n            await _validateCodeHints({ line: 12, ch: 19 }, [\"integratedStyle\"]);\n            await closeSession();\n        });\n\n        function setText(cursor, text) {\n            let editor = EditorManager.getActiveEditor();\n            editor.replaceRange(text, cursor);\n        }\n\n        it(\"should inline css class hint in unsaved html inline styles\", async function () {\n            await openFile(\"htmlOther/inlineStyle.html\", true);\n            setText({ line: 8, ch: 11 }, \".newInlineStyleYo{}\");\n            await _validateCodeHints({ line: 12, ch: 19 }, [\"newInlineStyleYo\"]);\n            await closeSession();\n        });\n\n        async function _validateCssEdit(cssFileName) {\n            await openFile(\"htmlOther/inlineStyle.html\", true);\n            await openFile(cssFileName, true);\n            const cssClassName = StringUtils.randomString(5, \"cls\");\n            setText({ line: 0, ch: 0 }, `.${cssClassName}{}\\n`);\n\n            await openFile(\"htmlOther/inlineStyle.html\", true);\n            await _validateCodeHints({ line: 12, ch: 16 }, [cssClassName]);\n            await closeSession();\n        }\n\n        it(\"should CSS file edits show up in class list without saving\", async function () {\n            await _validateCssEdit(\"cssLive.css\");\n        });\n\n        it(\"should LESS file edits show up in class list without saving\", async function () {\n            await _validateCssEdit(\"cssLive1.less\");\n        });\n\n        it(\"should SCSS file edits show up in class list without saving\", async function () {\n            await _validateCssEdit(\"cssLive1.scss\");\n        });\n\n        it(\"should get external https css style sheet\", async function () {\n            await openFile(\"htmlOther/externalStyle.html\", true);\n            await awaitsFor(async function () {\n                const allSelectors = await CSSUtils.getAllCssSelectorsInProject();\n                // the devicon.min.css fails to load sometimes in github actions and may fail erratically. so\n                // added one more css link and only one needs to pass for this test.\n                return allSelectors.includes(\".devicon-aarch64-original-wordmark\") ||\n                    allSelectors.includes(\".night\");\n            }, \"external style sheet hints to be loaded\");\n        });\n\n        async function _testCssClassHintInFile(htmlLikeFile) {\n            await openFile(htmlLikeFile, true);\n            await openFile(\"cssLive.css\", true);\n            // this prefix is aaa as we need it as the top code hint\n            const cssClassName = StringUtils.randomString(5, \"aaaaaaaaaaa\");\n            setText({ line: 0, ch: 0 }, `.${cssClassName}{}\\n`);\n\n            await openFile(htmlLikeFile, true);\n            setText({ line: 12, ch: 31 }, ` `);\n            await _validateCodeHints({ line: 12, ch: 32 }, [cssClassName], 0);\n            expect(EditorManager.getActiveEditor().getToken().string).toBe(`\"integratedStyle ${cssClassName}\"`);\n            await closeSession();\n        }\n\n        const extensions = [\"html\", \"htm\", \"xhtml\", \"php\", \"asp\", \"aspx\", \"jsp\", \"shtml\"];\n\n        for(let extn of extensions){\n            it(`should be able to add the class name by selecting the code hint in ${extn} file`, async function () {\n                await _testCssClassHintInFile(`htmlOther/inlineStyle.${extn}`);\n            });\n        }\n    });\n});\n"],"file":"integ-tests.js"}