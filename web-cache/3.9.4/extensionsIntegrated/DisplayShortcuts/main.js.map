{"version":3,"sources":["extensionsIntegrated/DisplayShortcuts/main.js"],"names":["define","require","exports","module","_","CodeMirror","CommandManager","Commands","KeyBindingManager","MainViewManager","Menus","Mustache","EditorManager","Dialogs","Metrics","WorkspaceManager","StringUtils","AppInit","DropdownButton","Strings","panelHtml","shortcutsHtml","TOGGLE_SHORTCUTS_ID","HELP_TOGGLE_SHORTCUTS_PANEL","DEFAULT_PACK_PLACEHOLDER","keyList","panel","$shortcutsPanel","$filterField","currentFilter","presetPicker","_updateKeyBindings","sortByBase","sortByBinding","sortByCmdId","sortByCmdName","sortByOrig","sortColumn","sortAscending","origBrackets","APP_NAME","origCodeMirror","window","debugMode","origExtension","KEYBOARD_SHORTCUT_ORIG_EXTENSION","_getBaseKey","keyBinding","keyBase","replace","brackets","platform","_findKeyBinding","kl","j","length","_ucFirst","string","charAt","toUpperCase","slice","_humanizeString","split","map","join","_getOriginFromCommandId","cmdID","customOrigin","_getCustomShortcutOrigin","idArray","defaultCommands","Object","values","q1","toLowerCase","includes","startsWith","_filterFromKeyBinding","text","_getkeyList","base","command","key","allCommandsWithShortcuts","Set","menuCommands","getAllMenuItemCommands","knownBindableCommands","_getKnownBindableCommands","allCommandsToList","bracketsKeymap","getKeymap","hasOwnProperty","get","commandID","add","push","formatKeyDescriptor","keyBindingDisplay","commandName","getName","origin","filter","keyMap","cmKeymap","macDefault","pcDefault","has","_strcmp","a","b","_stricmp","_keyBaseSort","a2","b2","c","_keyBindingSort","_keyCmdIdSort","_keyCmdNameSort","_keyOrigSort","_getSortFunc","_getShortcutsHtml","msData","sort","render","_changeSorting","newSortColumn","_showShortcuts","_filterShortcuts","forceFiltering","terms","val","trim","toLocaleLowerCase","$","each","i","match","term","indexOf","filterMatch","_clearSortingEventHandlers","$shortcuts","off","_updatePresets","find","html","eq","addClass","on","_showCommandIdsInPanelIfNeeded","click","event","commandId","target","getAttribute","Phoenix","app","copyToClipboard","initKeyList","destroyKeyList","isVisible","allPacks","getAllCustomKeymapPacks","currentKeymapPack","getCurrentCustomKeymapPack","$button","format","KEYBOARD_SHORTCUT_PRESET_USING","packageName","KEYBOARD_SHORTCUT_PRESET_SELECT","items","pack","packID","_handleShowHideShortcuts","hide","setChecked","focusActivePane","countEvent","EVENT_TYPE","KEYBOARD","show","focus","recomputeLayout","editor","getActiveEditor","document","file","fullPath","_getUserKeyMapFilePath","removeClass","_presetRenderer","DEFAULT","debounce","appReady","s","file_menu","register","KEYBOARD_SHORTCUT_MENU_SHOW_SHORTCUTS","getMenu","AppMenuBar","FILE_MENU","addMenuItem","BEFORE","FILE_EXTENSION_MANAGER","createBottomPanel","cssClasses","append","e","selectedPackID","_setCurrentCustomKeymapPack","$rowEl","closest","showShortcutSelectionDialog","dataset","commandid","execute","showConfirmDialog","KEYBOARD_SHORTCUT_RESET_DIALOG_TITLE","KEYBOARD_SHORTCUT_RESET_DIALOG_MESSAGE","done","selection","DIALOG_BTN_OK","resetUserShortcutsAsync","_event","newEditor","getChecked","EVENT_KEY_BINDING_ADDED","EVENT_KEY_BINDING_REMOVED","EVENT_NEW_PRESET","EVENT_PRESET_CHANGED"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2018 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets, $, CodeMirror, _showShortcuts, window */\n\ndefine(function (require, exports, module) {\n    \n    // Brackets modules\n    const _                   = require(\"thirdparty/lodash\"),\n        CodeMirror          = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        KeyBindingManager   = require(\"command/KeyBindingManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        Menus               = require(\"command/Menus\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        Metrics       = require(\"utils/Metrics\"),\n        WorkspaceManager    = require(\"view/WorkspaceManager\"),\n        StringUtils   = require(\"utils/StringUtils\"),\n        AppInit             = require(\"utils/AppInit\"),\n        DropdownButton      = require(\"widgets/DropdownButton\").DropdownButton,\n        Strings             = require(\"strings\");\n\n    require(\"./vscode\");\n\n    const panelHtml           = require(\"text!./templates/bottom-panel.html\"),\n        shortcutsHtml       = require(\"text!./templates/shortcut-table.html\"),\n        TOGGLE_SHORTCUTS_ID = Commands.HELP_TOGGLE_SHORTCUTS_PANEL;\n    const DEFAULT_PACK_PLACEHOLDER = \"default\";\n    let keyList = [],\n        panel,\n        $shortcutsPanel,\n        $filterField,\n        currentFilter,\n        presetPicker,\n        _updateKeyBindings;\n\n    let sortByBase = 1,\n        sortByBinding = 2,\n        sortByCmdId = 3,\n        sortByCmdName = 4,\n        sortByOrig = 5,\n        sortColumn = sortByBase,\n        sortAscending = true;\n\n    let origBrackets = Strings.APP_NAME,\n        origCodeMirror = window.debugMode? \"CodeMirror\" :Strings.APP_NAME,\n        origExtension = Strings.KEYBOARD_SHORTCUT_ORIG_EXTENSION;\n\n    // Determine base key by stripping modifier keys\n    function _getBaseKey(keyBinding) {\n        let keyBase = keyBinding\n            .replace(/Ctrl-/, \"\")\n            .replace(/Shift-/, \"\")\n            .replace(/Alt-/, \"\");\n        if (brackets.platform === \"mac\") {\n            keyBase = keyBase.replace(/Cmd-/, \"\");\n        }\n        return keyBase;\n    }\n\n    function _findKeyBinding(kl, keyBinding) {\n        let j;\n        for (j = 0; j < kl.length; j++) {\n            if (keyBinding === kl[j].keyBinding) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    function _ucFirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    // \"ReloadInBrowser\" => \"Reload In Browser\"\n    // \"extension_manager\" => \"Extension Manager\"\n    function _humanizeString(string) {\n        // Replace \"foo_bar\" with \"foo bar\" and \"FooBar\" with \" Foo Bar\"\n        string = string.replace(/_/g, \" \").replace(/([A-Z])/g, \" $1\");\n        // Trim whitespace\n        string = string.replace(/(^\\s+)/, \"\").replace(/(\\s+$)/, \"\");\n        // Split words by whitespace, uppercase the first letter, join with a space\n        string = string.split(/\\s+/).map(_ucFirst).join(\" \");\n\n        return string;\n    }\n\n    function _getOriginFromCommandId(cmdID, keyBinding) {\n        // According to CommandManager.register() documentation:\n        //  Core commands in Brackets use a simple command title as an id, for example \"open.file\".\n        //  Extensions should use the following format: \"author.myextension.mycommandname\". \n        //  For example, \"lschmitt.csswizard.format.css\".\n        const customOrigin = KeyBindingManager._getCustomShortcutOrigin(keyBinding);\n        if(customOrigin){\n            return customOrigin;\n        }\n        let idArray = cmdID.split(\".\");\n        const defaultCommands = Object.values(Commands);\n\n        // check for a brackets menu\n        let q1 = idArray[0].toLowerCase();\n        if (defaultCommands.includes(cmdID) || q1 === \"file\" || q1 === \"edit\" || q1 === \"view\" || q1 === \"navigate\" || q1 === \"debug\" || q1 === \"help\" ||\n            cmdID.startsWith(\"AltMenu-\") || cmdID.startsWith(\"codefolding.\") || cmdID.startsWith(\"navigation.\") || cmdID.startsWith(\"recent-files\") ||\n            cmdID.startsWith(\"refactoring.\") || cmdID.startsWith(\"recentProjects\") || cmdID ===\"showParameterHint\") {\n            return origBrackets;\n        }\n        if (idArray.length > 2) {\n            // more than two qualifiers\n            return origExtension + \" (\" + _humanizeString(idArray[1]) + \")\";\n        } else if (idArray.length < 2) {\n            // less than two qualifiers\n            return origExtension;\n        }\n\n        // must be an extension\n        return origExtension;\n    }\n\n    function _filterFromKeyBinding(text) {\n        // text if of form Shift-F1\n        text = text || '';\n        return `${text.toLowerCase()} ${text.replace(\"-\", \"+\").toLowerCase()}`;\n    }\n\n    // CodeMirror and Brackets key maps have different formats, so collect\n    // keys into a normalized array\n    function _getkeyList() {\n        let keyBinding,\n            base,\n            command,\n            key;\n        const allCommandsWithShortcuts = new Set();\n        const menuCommands = Menus.getAllMenuItemCommands();\n        const knownBindableCommands = KeyBindingManager._getKnownBindableCommands();\n        const allCommandsToList = new Set([...menuCommands, ...knownBindableCommands]);\n\n        // Brackets keymap\n        let bracketsKeymap = KeyBindingManager.getKeymap();\n        if (bracketsKeymap) {\n            for (keyBinding in bracketsKeymap) {\n                if (bracketsKeymap.hasOwnProperty(keyBinding)) {\n                    key = bracketsKeymap[keyBinding];\n                    if (key) {\n                        base = _getBaseKey(keyBinding);\n                        command = CommandManager.get(key.commandID);\n                        if (!command) {\n                            continue;\n                        }\n\n                        allCommandsWithShortcuts.add(key.commandID);\n                        keyList.push({\n                            keyBase: KeyBindingManager.formatKeyDescriptor(base),\n                            keyBinding: keyBinding,\n                            keyBindingDisplay: KeyBindingManager.formatKeyDescriptor(keyBinding),\n                            command: command,\n                            commandID: key.commandID,\n                            commandName: command.getName(),\n                            origin: _getOriginFromCommandId(key.commandID, keyBinding),\n                            filter: command.getName().toLowerCase() +  _filterFromKeyBinding(keyBinding)\n                                + _getOriginFromCommandId(key.commandID, keyBinding).toLowerCase()\n                        });\n                    }\n                }\n            }\n        }\n\n        // CodeMirror keymap\n        if (CodeMirror.keyMap) {\n            let cmKeymap = (brackets.platform === \"mac\") ? CodeMirror.keyMap.macDefault : CodeMirror.keyMap.pcDefault;\n            if (cmKeymap) {\n                for (keyBinding in cmKeymap) {\n                    // Note that we only ignore CodeMirror duplicates, but\n                    // we want to see Brackets & Extensions duplicates\n                    if (cmKeymap.hasOwnProperty(keyBinding) &&\n                            (keyBinding !== \"fallthrough\") &&\n                            (_findKeyBinding(keyList, keyBinding) === -1)) {\n                        base = _getBaseKey(keyBinding);\n                        allCommandsWithShortcuts.add(cmKeymap[keyBinding]);\n                        keyList.push({\n                            keyBase: KeyBindingManager.formatKeyDescriptor(base),\n                            keyBinding: keyBinding,\n                            keyBindingDisplay: KeyBindingManager.formatKeyDescriptor(keyBinding),\n                            commandID: cmKeymap[keyBinding],\n                            commandName: cmKeymap[keyBinding],\n                            origin: window.debugMode ? origCodeMirror : origBrackets,\n                            filter: cmKeymap[keyBinding].toLowerCase() +  _filterFromKeyBinding(keyBinding) +\n                                origCodeMirror.toLowerCase()\n                        });\n                    }\n                }\n            }\n        }\n\n        for(let commandID of allCommandsToList){\n            if(allCommandsWithShortcuts.has(commandID)){\n                continue;\n            }\n            keyList.push({\n                keyBase: \"\",\n                keyBinding: \"\",\n                keyBindingDisplay: \"\",\n                commandID: commandID,\n                commandName: commandID,\n                origin: _getOriginFromCommandId(commandID, keyBinding),\n                filter: commandID.toLowerCase() + _getOriginFromCommandId(commandID, keyBinding).toLowerCase()\n            });\n        }\n\n        return keyList;\n    }\n\n    function _strcmp(a, b) {\n        if (a < b) {\n            return (sortAscending ? -1 : 1);\n        } else if (a > b) {\n            return (sortAscending ? 1 : -1);\n        }\n        return 0;\n    }\n\n    function _stricmp(a, b) {\n        return _strcmp(a.toLowerCase(), b.toLowerCase());\n    }\n\n    function _keyBaseSort(a, b) {\n        // First sort by whether it's a single char or not, so letters are separated from key\n        // names (e.g. Backspace). Then sort by base key, finally key binding string\n        let a2 = ((a.keyBase.length === 1) ? \"0\" : \"1\") + a.keyBase,\n            b2 = ((b.keyBase.length === 1) ? \"0\" : \"1\") + b.keyBase,\n            c = _strcmp(a2, b2);\n\n        if (c !== 0) {\n            return c;\n        } else {\n            return _strcmp(a.keyBinding, b.keyBinding);\n        }\n    }\n\n    function _keyBindingSort(a, b) {\n        return _strcmp(a.keyBinding, b.keyBinding);\n    }\n\n    function _keyCmdIdSort(a, b) {\n        return _stricmp(a.commandID, b.commandID);\n    }\n\n    function _keyCmdNameSort(a, b) {\n        return _strcmp(a.commandName, b.commandName);\n    }\n\n    function _keyOrigSort(a, b) {\n        return _strcmp(a.origin, b.origin);\n    }\n\n    function _getSortFunc() {\n        if (sortColumn === sortByBinding) {\n            return _keyBindingSort;\n        } else if (sortColumn === sortByCmdId) {\n            return _keyCmdIdSort;\n        } else if (sortColumn === sortByCmdName) {\n            return _keyCmdNameSort;\n        } else if (sortColumn === sortByOrig) {\n            return _keyOrigSort;\n        }\n        return _keyBaseSort;\n    }\n\n    function _getShortcutsHtml() {\n        var msData = {};\n        msData.keyList = keyList.sort(_getSortFunc());\n        msData.Strings = Strings;\n        return Mustache.render(shortcutsHtml, msData);\n    }\n\n    function _changeSorting(newSortColumn) {\n        if (newSortColumn === sortColumn) {\n            // Same column, so change sort direction\n            sortAscending = !sortAscending;\n        } else {\n            // New sort column\n            sortColumn = newSortColumn;\n        }\n        \n        // Update page\n        _showShortcuts();\n    }\n\n    function _filterShortcuts(forceFiltering) {\n        var terms = $filterField.val().trim().toLocaleLowerCase();\n        if (forceFiltering || terms !== currentFilter) {\n            currentFilter = terms;\n            terms = terms.split(/\\s+?/);\n            $.each(keyList, function (i, key) {\n                let match;\n                if (terms === \"\") {\n                    match = true;\n                } else {\n                    $.each(terms, function (i, term) {\n                        if (match !== false) {\n                            match = key.filter.indexOf(term) > -1;\n                        }\n                    });\n                }\n                key.filterMatch = match;\n            });\n        }\n    }\n\n    function _clearSortingEventHandlers() {\n        var $shortcuts = $(\"#shortcuts-panel\");\n        $(\"thead .shortcut-base a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-binding a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-cmd-id a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-cmd-name a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-orig a\", $shortcuts).off(\"click\");\n    }\n\n    function _showShortcuts() {\n        _updatePresets();\n        let $shortcuts = $(\"#shortcuts-panel\");\n        \n        // Apply any active filter\n        _filterShortcuts(true);\n\n        // Clear old header sort button events\n        _clearSortingEventHandlers();\n\n        // Add new markup\n        $shortcuts.find(\".resizable-content\").html(_getShortcutsHtml());\n        $shortcuts.find(\"thead th\").eq(sortColumn - 1).addClass('sort-' + (sortAscending ? 'ascending' : 'descending'));\n\n        // Setup header sort button events\n        $(\"thead .shortcut-base a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByBase);\n        });\n        $(\"thead .shortcut-binding a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByBinding);\n        });\n        $(\"thead .shortcut-cmd-id a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByCmdId);\n        });\n        $(\"thead .shortcut-cmd-name a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByCmdName);\n        });\n        $(\"thead .shortcut-orig a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByOrig);\n        });\n        _showCommandIdsInPanelIfNeeded();\n        $shortcutsPanel.find(\".copy-command\").click((event)=>{\n            const commandId = event.target.getAttribute(\"data-commandID\");\n            Phoenix.app.copyToClipboard(commandId);\n        });\n    }\n\n    function initKeyList() {\n        // Only get data once while panel is open\n        if (keyList.length === 0) {\n            keyList = _getkeyList();\n        }\n    }\n\n    function destroyKeyList() {\n        // cleanup listeners\n        $.each(keyList, function (i, key) {\n            // Only Brackets commands have listeners\n            if (key.command) {\n                key.command.off(\".bds\");\n            }\n        });\n\n        keyList = [];\n    }\n\n    function _updatePresets() {\n        if (!panel || !panel.isVisible()) {\n            return;\n        }\n        const allPacks = KeyBindingManager.getAllCustomKeymapPacks();\n        const currentKeymapPack = KeyBindingManager.getCurrentCustomKeymapPack();\n        if(currentKeymapPack){\n            presetPicker.$button.text(StringUtils.format(\n                Strings.KEYBOARD_SHORTCUT_PRESET_USING, currentKeymapPack.packageName));\n        } else {\n            presetPicker.$button.text(Strings.KEYBOARD_SHORTCUT_PRESET_SELECT);\n        }\n        presetPicker.items = [DEFAULT_PACK_PLACEHOLDER, ...allPacks.map(pack=>pack.packID)];\n    }\n\n    _updateKeyBindings = _.debounce(function () {\n        // Update keylist\n        destroyKeyList();\n        initKeyList();\n\n        // Refresh panel\n        _showShortcuts();\n    }, 300);\n\n    function _handleShowHideShortcuts() {\n        if (panel.isVisible()) {\n            // This panel probably won't get opened very often, so only maintain data\n            // while panel is open (for faster sorting) and discard when closed.\n            destroyKeyList();\n            _clearSortingEventHandlers();\n            panel.hide();\n            CommandManager.get(TOGGLE_SHORTCUTS_ID).setChecked(false);\n            MainViewManager.focusActivePane();\n        } else {\n            Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcutPanel', \"shown\");\n            panel.show();\n            CommandManager.get(TOGGLE_SHORTCUTS_ID).setChecked(true);\n            $filterField.val(\"\").focus();\n            initKeyList();\n            _showShortcuts();\n        }\n        WorkspaceManager.recomputeLayout();\n    }\n\n\n    function _showCommandIdsInPanelIfNeeded() {\n        const editor = EditorManager.getActiveEditor();\n        if(editor && editor.document && editor.document.file.fullPath === KeyBindingManager._getUserKeyMapFilePath()){\n            $shortcutsPanel.find(\"#phoenix-keyboard-shortcuts-table\").removeClass(\"hide-third-column\");\n        } else {\n            $shortcutsPanel.find(\"#phoenix-keyboard-shortcuts-table\").addClass(\"hide-third-column\");\n        }\n    }\n\n    function _presetRenderer(packID) {\n        if(packID === DEFAULT_PACK_PLACEHOLDER) {\n            return Strings.DEFAULT;\n        }\n        const allPacks = KeyBindingManager.getAllCustomKeymapPacks();\n        for(let pack of allPacks) {\n            if(pack.packID === packID) {\n                return pack.packageName;\n            }\n        }\n        return packID;\n    }\n\n    AppInit.appReady(function() {\n        let s, file_menu;\n\n        // Register commands\n        CommandManager.register(Strings.KEYBOARD_SHORTCUT_MENU_SHOW_SHORTCUTS, TOGGLE_SHORTCUTS_ID, _handleShowHideShortcuts);\n\n        // Add command to Help menu, if it exists\n        file_menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        if (file_menu) {\n            file_menu.addMenuItem(TOGGLE_SHORTCUTS_ID, \"\", Menus.BEFORE, Commands.FILE_EXTENSION_MANAGER);\n        }\n\n        // Add the HTML UI\n        s = Mustache.render(panelHtml, Strings);\n\n        // AppInit.htmlReady() has already executed before extensions are loaded\n        // so, for now, we need to call this ourself\n        panel = WorkspaceManager.createBottomPanel(TOGGLE_SHORTCUTS_ID, $(s), 300);\n        panel.hide();\n\n        $shortcutsPanel = $(\"#shortcuts-panel\");\n\n        presetPicker = new DropdownButton(Strings.KEYBOARD_SHORTCUT_PRESET_SELECT, [], _presetRenderer, {\n            cssClasses: \"presetPicker no-focus\"\n        });\n        $shortcutsPanel.find(\".presetPickerContainer\").append(presetPicker.$button);\n        presetPicker.on(\"select\", function (e, selectedPackID) {\n            if(selectedPackID === DEFAULT_PACK_PLACEHOLDER) {\n                KeyBindingManager._setCurrentCustomKeymapPack(null);\n            }\n            KeyBindingManager._setCurrentCustomKeymapPack(selectedPackID);\n            _updatePresets();\n        });\n\n        // Events\n        $shortcutsPanel.on(\"dblclick\", function (e) {\n            var $rowEl = $(e.target).closest(\"tr\");\n            if ($rowEl.length > 0) {\n                KeyBindingManager.showShortcutSelectionDialog(\n                    CommandManager.get($rowEl[0].dataset.commandid)\n                );\n            }\n        });\n\n        $shortcutsPanel.find(\".close\").click(function () {\n            CommandManager.execute(TOGGLE_SHORTCUTS_ID);\n        });\n\n        $shortcutsPanel.find(\".reset-to-default\").click(function () {\n            Dialogs.showConfirmDialog(\n                Strings.KEYBOARD_SHORTCUT_RESET_DIALOG_TITLE,\n                Strings.KEYBOARD_SHORTCUT_RESET_DIALOG_MESSAGE\n            ).done(function (selection) {\n                if(selection === Dialogs.DIALOG_BTN_OK){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcut', \"reset\");\n                    KeyBindingManager.resetUserShortcutsAsync();\n                }\n            });\n        });\n\n        $filterField = $shortcutsPanel.find(\".toolbar .filter\");\n        $filterField.on(\"keyup\", (event)=>{\n            if(event && event.key === 'Escape') {\n                MainViewManager.focusActivePane();\n                return;\n            }\n            _showShortcuts();\n        });\n        EditorManager.on(\"activeEditorChange\", (_event, newEditor)=>{\n            if(newEditor && newEditor.document && newEditor.document.file.fullPath === KeyBindingManager._getUserKeyMapFilePath()){\n                if(!CommandManager.get(TOGGLE_SHORTCUTS_ID).getChecked()){\n                    CommandManager.get(TOGGLE_SHORTCUTS_ID).execute();\n                }\n            }\n            _showCommandIdsInPanelIfNeeded();\n        });\n        KeyBindingManager.on(KeyBindingManager.EVENT_KEY_BINDING_ADDED, _updateKeyBindings);\n        KeyBindingManager.on(KeyBindingManager.EVENT_KEY_BINDING_REMOVED, _updateKeyBindings);\n        KeyBindingManager.on(KeyBindingManager.EVENT_NEW_PRESET, _updatePresets);\n        KeyBindingManager.on(KeyBindingManager.EVENT_PRESET_CHANGED, _updatePresets);\n    });\n});\n"],"file":"main.js"}