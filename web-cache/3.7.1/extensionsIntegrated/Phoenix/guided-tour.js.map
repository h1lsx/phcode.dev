{"version":3,"sources":["extensionsIntegrated/Phoenix/guided-tour.js"],"names":["define","require","exports","module","NotificationUI","Commands","Strings","Menus","StringUtils","KeyBindingManager","Metrics","Dialogs","Mustache","PreferencesManager","SurveyTemplate","NOTIFICATION_BACKOFF","GUIDED_TOUR_LOCAL_STORAGE_KEY","surveyLinksURL","BOOT_DIALOG_DELAY","GENERAL_SURVEY_TIME","ONE_MONTH_IN_DAYS","POWER_USER_SURVEY_INTERVAL_DAYS","USAGE_COUNTS_KEY","userAlreadyDidAction","PhStore","getItem","JSON","parse","version","newProjectShown","beautifyCodeShown","generalSurveyShownVersion","currentlyShowingNotification","_showBeautifyNotification","editorContextMenu","getContextMenu","ContextMenuIds","EDITOR_MENU","_showNotification","setTimeout","keyboardShortcut","getKeyBindingsDisplay","EDIT_BEAUTIFY_CODE","setItem","stringify","countEvent","EVENT_TYPE","UI","createFromTemplate","format","BEAUTIFY_CODE_NOTIFICATION","allowedPlacements","autoCloseTimeS","dismissOnClick","done","off","EVENT_BEFORE_CONTEXT_MENU_OPEN","on","_showNewProjectNotification","NEW_PROJECT_NOTIFICATION","_loadTwitterScripts","window","twttr","twitterScript","document","createElement","setAttribute","body","appendChild","addEventListener","events","bind","ev","USER","Phoenix","isNativeApp","app","openURLInDefaultBrowser","console","error","_openStarsPopup","notification","$","GITHUB_STARS_POPUP","GITHUB_STARS_POPUP_TWITTER","find","click","createToastFromTemplate","ENJOYING_APP","_showRequestStarsPopup","firstBoot","lastShownDate","lastShownGithubStarsDate","nextShowDate","Date","setUTCDate","getUTCDate","currentDate","now","_showGeneralSurvey","surveyURL","surveyVersion","templateVars","showModalDialogUsingTemplate","render","_isPowerUser","usageData","getViewState","dateKeys","Object","keys","dateBefore14Days","totalUsageMinutes","totalUsageDays","dateKey","date","_showPowerUserSurvey","lastShownPowerSurveyDate","async","_showSurveys","navigator","onLine","surveyJSON","fetch","json","newUser","powerUser","e","tourStarted","startTourIfNeeded"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n    const NotificationUI = require(\"widgets/NotificationUI\"),\n        Commands = require(\"command/Commands\"),\n        Strings = require(\"strings\"),\n        Menus = require(\"command/Menus\"),\n        StringUtils = require(\"utils/StringUtils\"),\n        KeyBindingManager = require(\"command/KeyBindingManager\"),\n        Metrics = require(\"utils/Metrics\"),\n        Dialogs = require(\"widgets/Dialogs\"),\n        Mustache = require(\"thirdparty/mustache/mustache\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        SurveyTemplate = require(\"text!./html/survey-template.html\"),\n        NOTIFICATION_BACKOFF = 10000,\n        GUIDED_TOUR_LOCAL_STORAGE_KEY = \"guidedTourActions\";\n\n    const surveyLinksURL = \"https://updates.phcode.io/surveys.json\";\n\n    // All popup notifications will show immediately on boot, we don't want to interrupt user amidst his work\n    // by showing it at a later point in time.\n    const BOOT_DIALOG_DELAY = 2000,\n        GENERAL_SURVEY_TIME = 600000, // 10 min\n        ONE_MONTH_IN_DAYS = 30,\n        POWER_USER_SURVEY_INTERVAL_DAYS = 35,\n        USAGE_COUNTS_KEY    = \"healthDataUsage\"; // private to phoenix, set from health data extension\n\n    const userAlreadyDidAction = PhStore.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)\n        ? JSON.parse(PhStore.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)) : {\n            version: 1,\n            newProjectShown: false,\n            beautifyCodeShown: false,\n            generalSurveyShownVersion: 0\n        };\n\n    // we should only show one notification at a time\n    let currentlyShowingNotification;\n\n    /* Order of things in first boot now:\n    *  1. First we show the popup in new project window to select default project - see the html in assets folder\n    *  2. Then after user opens default project, we show \"edit code for live preview popup\"\n    *  3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    *     this will continue showing every session until user clicks on the new project icon\n    *  4. After about 2 minutes, the GitHub stars popup will show, if not shown in the past two weeks. Repeats 2 weeks.\n    *  5. After about 3 minutes, the health popup will show up.\n    *  6. power user survey shows up if the user has used brackets for 3 days or 8 hours in the last two weeks after 3\n    *     minutes. This will not coincide with health popup due to the power user check.\n    *  7. After about 10 minutes, survey shows up.\n    *  // the rest are by user actions\n    *  a. When user clicks on live preview, we show \"click here to popout live preview\"\n    *  b. Beautification notification when user opened the editor context menu and have not done any beautification yet.\n    * */\n\n    // 3. Beautification notification when user opened the editor context menu for the first time\n    function _showBeautifyNotification() {\n        if(userAlreadyDidAction.beautifyCodeShown){\n            return;\n        }\n        let editorContextMenu = Menus.getContextMenu(Menus.ContextMenuIds.EDITOR_MENU);\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            setTimeout(()=>{\n                let keyboardShortcut = KeyBindingManager.getKeyBindingsDisplay(Commands.EDIT_BEAUTIFY_CODE);\n                keyboardShortcut = keyboardShortcut || \"\";\n                userAlreadyDidAction.beautifyCodeShown =  true;\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n                Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"beautify\");\n                currentlyShowingNotification = NotificationUI.createFromTemplate(\n                    StringUtils.format(Strings.BEAUTIFY_CODE_NOTIFICATION, keyboardShortcut),\n                    \"editor-context-menu-edit.beautifyCode\", {\n                        allowedPlacements: ['left', 'right'],\n                        autoCloseTimeS: 15,\n                        dismissOnClick: true}\n                );\n                currentlyShowingNotification.done(()=>{\n                    currentlyShowingNotification = null;\n                });\n                editorContextMenu.off(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n            }, 500);\n        }\n        editorContextMenu.on(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n    }\n\n    // 3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    // Only shown once.\n    function _showNewProjectNotification() {\n        if(userAlreadyDidAction.newProjectShown){\n            return;\n        }\n        if(currentlyShowingNotification){\n            setTimeout(_showNewProjectNotification, NOTIFICATION_BACKOFF);\n            return;\n        }\n        userAlreadyDidAction.newProjectShown =  true;\n        PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"newProj\");\n        currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.NEW_PROJECT_NOTIFICATION,\n            \"newProject\", {\n                allowedPlacements: ['top', 'bottom'],\n                autoCloseTimeS: 15,\n                dismissOnClick: true}\n        );\n        currentlyShowingNotification.done(()=>{\n            currentlyShowingNotification = null;\n        });\n    }\n\n    function _loadTwitterScripts() {\n        // https://developer.twitter.com/en/docs/twitter-for-websites/javascript-api/guides/javascript-api\n        // we maily do this to metric the users who clicked on the tweet button\n        if(window.twttr){\n            return;\n        }\n        const twitterScript = document.createElement( 'script' );\n        twitterScript.setAttribute( 'src', \"https://platform.twitter.com/widgets.js\" );\n        document.body.appendChild( twitterScript );\n        twitterScript.addEventListener(\"load\", ()=>{\n            if(!window.twttr){\n                console.error(\"twitter scripts not loaded\");\n                return;\n            }\n            window.twttr.events.bind('click', function (ev) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"twit.click\", 1);\n                if(Phoenix.isNativeApp) {\n                    // hyperlinks wont work in tauri, so we have to use tauri apis\n                    Phoenix.app.openURLInDefaultBrowser(\n                        'https://twitter.com/intent/tweet?screen_name=phcodedev&ref_src=twsrc%5Etfw');\n                }\n            });\n        });\n    }\n\n    function _openStarsPopup() {\n        _loadTwitterScripts();\n        let notification = $(`${Strings.GITHUB_STARS_POPUP}\n                        <div class=\"gtstarph\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a class=\"github-button\"\n                             href=\"https://github.com/phcode-dev/phoenix\"\n                             data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n                             data-icon=\"octicon-star\"\n                             data-size=\"large\"\n                             data-show-count=\"true\"\n                             title=\"Star phcode.dev on GitHub\"\n                             aria-label=\"Star phcode-dev/phoenix on GitHub\">Star</a>\n                             <a class=\"github-button\"\n                             href=\"https://github.com/sponsors/phcode-dev\"\n                             data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n                             data-icon=\"octicon-heart\"\n                             data-size=\"large\"\n                             data-show-count=\"true\"\n                             title=\"Star phcode.dev on GitHub\"\n                             aria-label=\"Sponsor @phcode-dev on GitHub\">Sponsor</a>\n                           <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n                        </div>\n                       ${Strings.GITHUB_STARS_POPUP_TWITTER}\n                       <div class=\"twbnpop\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a href=\"https://twitter.com/intent/tweet?screen_name=phcodedev&ref_src=twsrc%5Etfw\"\n                             class=\"twitter-mention-button\"\n                             data-size=\"large\"\n                             data-related=\"BracketsCont,brackets\"\n                             data-show-count=\"false\">Tweet to @phcodedev</a>\n                       </div>\n                    </div>`);\n        notification.find(\".gtstarph\").click(()=>{\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star.click\", 1);\n            if(Phoenix.isNativeApp) {\n                // hyperlinks wont work in tauri, so we have to use tauri apis\n                Phoenix.app.openURLInDefaultBrowser(\n                    'https://github.com/phcode-dev/phoenix');\n            }\n        });\n        NotificationUI.createToastFromTemplate(Strings.ENJOYING_APP, notification, {\n            dismissOnClick: false\n        });\n    }\n\n    function _showRequestStarsPopup() {\n        if(Phoenix.firstBoot){\n            // on first boot we don't show the `enjoying phoenix?` popup as user needs more time to evaluate.\n            // GitHub stars/tweet situation isn't improving either. So we show this at the second launch so that we\n            // the users like the product to revisit and then, every 30 days.\n            return;\n        }\n        let lastShownDate = userAlreadyDidAction.lastShownGithubStarsDate;\n        let nextShowDate = new Date(lastShownDate);\n        nextShowDate.setUTCDate(nextShowDate.getUTCDate() + ONE_MONTH_IN_DAYS);\n        let currentDate = new Date();\n        if(!lastShownDate || currentDate >= nextShowDate){\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star\", 1);\n            _openStarsPopup();\n            userAlreadyDidAction.lastShownGithubStarsDate = Date.now();\n            PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n        }\n    }\n\n    function _showGeneralSurvey(surveyURL) {\n        setTimeout(()=>{\n            let surveyVersion = 6; // increment this if you want to show this again\n            var templateVars = {\n                Strings: Strings,\n                surveyURL\n            };\n            if(userAlreadyDidAction.generalSurveyShownVersion !== surveyVersion){\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"generalShown\", 1);\n                Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n                userAlreadyDidAction.generalSurveyShownVersion = surveyVersion;\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }\n        }, GENERAL_SURVEY_TIME);\n    }\n\n    // a power user is someone who has used Phoenix at least 3 days or 8 hours in the last two weeks\n    function _isPowerUser() {\n        let usageData = PreferencesManager.getViewState(USAGE_COUNTS_KEY) || {},\n            dateKeys = Object.keys(usageData),\n            dateBefore14Days = new Date(),\n            totalUsageMinutes = 0,\n            totalUsageDays = 0;\n        dateBefore14Days.setUTCDate(dateBefore14Days.getUTCDate()-14);\n        for(let dateKey of dateKeys){\n            let date = new Date(dateKey);\n            if(date >= dateBefore14Days) {\n                totalUsageDays ++;\n                totalUsageMinutes = totalUsageMinutes + usageData[dateKey];\n            }\n        }\n        return totalUsageDays >= 3 || (totalUsageMinutes/60) >= 8;\n    }\n\n    function _showPowerUserSurvey(surveyURL) {\n        if(_isPowerUser()) {\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"power\", \"user\", 1);\n            let lastShownDate = userAlreadyDidAction.lastShownPowerSurveyDate;\n            let nextShowDate = new Date(lastShownDate);\n            nextShowDate.setUTCDate(nextShowDate.getUTCDate() + POWER_USER_SURVEY_INTERVAL_DAYS);\n            let currentDate = new Date();\n            if(currentDate < nextShowDate){\n                return;\n            }\n            setTimeout(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"powerShown\", 1);\n                const templateVars = {\n                    Strings: Strings,\n                    surveyURL\n                };\n                Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n                userAlreadyDidAction.lastShownPowerSurveyDate = Date.now();\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }, BOOT_DIALOG_DELAY);\n        }\n    }\n\n    async function _showSurveys() {\n        try {\n            if(!navigator.onLine){\n                return;\n            }\n            let surveyJSON = await fetch(surveyLinksURL);\n            surveyJSON = await surveyJSON.json();\n            surveyJSON.newUser && _showGeneralSurvey(surveyJSON.newUser);\n            surveyJSON.powerUser && _showPowerUserSurvey(surveyJSON.powerUser);\n        } catch (e) {\n            console.error(\"Error fetching survey link\", surveyLinksURL);\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"fetchError\", 1);\n        }\n    }\n\n    let tourStarted = false;\n    exports.startTourIfNeeded = function () {\n        if(tourStarted) {\n            return;\n        }\n        tourStarted = true;\n        _showNewProjectNotification();\n        _showBeautifyNotification();\n        _showRequestStarsPopup();\n        _showSurveys();\n    };\n});\n"],"file":"guided-tour.js"}