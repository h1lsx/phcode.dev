{"version":3,"sources":["search/FindInFilesUI.js"],"names":["define","require","exports","module","AppInit","CommandManager","Commands","Dialogs","DefaultDialogs","EditorManager","WorkspaceManager","FileFilters","FileUtils","FindBar","FindInFiles","FindUtils","InMemoryFile","ProjectManager","SearchResultsView","TaskManager","Strings","StringUtils","Metrics","_","searchTask","MAX_IN_MEMORY","_resultsView","_findBar","_finishReplaceBatch","_hideBusyIndicator","close","_showBusyIndicator","scope","scopeName","Phoenix","app","getDisplayPath","fullPath","getProjectRoot","format","FIND_IN_FILES_SEARCHING_IN","addNewTask","FIND_IN_FILES_SEARCHING","searchAndShowResults","queryInfo","filter","replaceText","candidateFilesPromise","doSearchInScope","done","zeroFilesToken","searchModel","hasResults","open","enable","showError","showNoResults","focus","showMessage","ZERO_FILES_TO_SEARCH","FIND_IN_FILES_ZERO_FILES","labelForScope","fail","err","console","log","searchAndReplaceResults","_getScopeLabel","isReplace","scopeStr","FIND_IN_FILES_PROJECT_SCOPE_REPLACE_FILTER","FIND_IN_FILES_PROJECT_SCOPE_FILTER","breakableUrl","makeProjectRelativeIfPossible","FIND_IN_FILES_PROJECT_SCOPE_REPLACE","FIND_IN_FILES_PROJECT_SCOPE","_showFindBar","showReplace","notifySearchScopeChanged","canOpenPath","execute","FILE_OPEN","CMD_FIND","currentEditor","getActiveEditor","focussedEditor","getFocusedEditor","_$previewEditor","editor","hasFocus","initialQuery","getInitialQuery","multifile","replace","query","historyHelp","brackets","platform","FIND_HISTORY_TOOLTIP_MAC","FIND_HISTORY_TOOLTIP","initialReplaceText","queryPlaceholder","FIND_QUERY_PLACEHOLDER","scopeLabel","_modalBar","isLockedOpen","isEnabled","$","length","getCandidateFiles","handleQueryChange","getQueryInfo","queryResult","parseQueryInfo","enableReplace","valid","empty","error","startSearch","disableFindBar","queryType","isRegexp","isCaseSensitive","countEvent","EVENT_TYPE","SEARCH","_options","getActiveFilter","startReplace","getReplaceText","on","e","off","selectNextResult","selectPrevResult","selectNextPage","selectPrevPage","OpenSelectedFile","oldModalBarHeight","height","isDirectory","filterPicker","createFilterPicker","getRoot","find","append","fullEditor","getCurrentFullEditor","scrollPos","getScrollPos","y","recomputeLayout","_codeMirror","scrollTo","x","model","resultsClone","cloneDeep","results","replacedFiles","Object","keys","path","hasCheckedMatches","processReplace","showModalDialog","DIALOG_ID_INFO","REPLACE_WITHOUT_UNDO_WARNING_TITLE","REPLACE_WITHOUT_UNDO_WARNING","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","BUTTON_REPLACE_WITHOUT_UNDO","forceFilesOpen","doReplace","errors","message","REPLACE_IN_FILES_ERRORS","makeDialogFileList","map","errorInfo","item","DIALOG_ID_ERROR","REPLACE_IN_FILES_ERRORS_TITLE","always","_showReplaceBar","_showFindBarForSubtree","selectedEntry","getSelectedItem","_showReplaceBarForSubtree","_closeFindBar","suppressAnimation","_searchIndexingStarted","isIndexingInProgress","showIndexingSpinner","_searchIndexingProgressing","_evt","processed","total","progressMessage","FIND_IN_FILES_INDEXING_PROGRESS","setIndexingMessage","_searchIndexingFinished","hideIndexingSpinner","_defferedSearch","redoInstantSearch","_searchIfRequired","isInstantSearchDisabled","setTimeout","closeResultsPanel","htmlReady","clearSearch","getNextPageofSearchResults","showNextPage","getAllSearchResults","showLastPage","isClosed","register","CMD_FIND_IN_FILES","CMD_FIND_IN_SUBTREE","CMD_REPLACE_IN_FILES","CMD_REPLACE_IN_SUBTREE","SEARCH_INDEXING_STARTED","SEARCH_INDEXING_PROGRESS","SEARCH_INDEXING_FINISHED","SEARCH_FILE_FILTERS_CHANGED","SEARCH_SCOPE_CHANGED"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * UI and controller logic for find/replace across multiple files within the project.\n *\n * FUTURE:\n *  - Handle matches that span multiple lines\n */\ndefine(function (require, exports, module) {\n\n\n    const AppInit           = require(\"utils/AppInit\"),\n        CommandManager    = require(\"command/CommandManager\"),\n        Commands          = require(\"command/Commands\"),\n        Dialogs           = require(\"widgets/Dialogs\"),\n        DefaultDialogs    = require(\"widgets/DefaultDialogs\"),\n        EditorManager     = require(\"editor/EditorManager\"),\n        WorkspaceManager  = require(\"view/WorkspaceManager\"),\n        FileFilters       = require(\"search/FileFilters\"),\n        FileUtils         = require(\"file/FileUtils\"),\n        FindBar           = require(\"search/FindBar\").FindBar,\n        FindInFiles       = require(\"search/FindInFiles\"),\n        FindUtils         = require(\"search/FindUtils\"),\n        InMemoryFile      = require(\"document/InMemoryFile\"),\n        ProjectManager    = require(\"project/ProjectManager\"),\n        SearchResultsView = require(\"search/SearchResultsView\").SearchResultsView,\n        TaskManager  = require(\"features/TaskManager\"),\n        Strings           = require(\"strings\"),\n        StringUtils       = require(\"utils/StringUtils\"),\n        Metrics           = require(\"utils/Metrics\"),\n        _                 = require(\"thirdparty/lodash\");\n\n    let searchTask;\n\n    /** @const Maximum number of files to do replacements in-memory instead of on disk. */\n    var MAX_IN_MEMORY = 20;\n\n    /** @type {SearchResultsView} The results view. Initialized in htmlReady() */\n    var _resultsView = null;\n\n    /** @type {FindBar} Find bar containing the search UI. */\n    var _findBar = null;\n\n    /**\n     * @private\n     * Forward declaration for JSLint.\n     * @type {Function}\n     */\n    var _finishReplaceBatch;\n\n    function _hideBusyIndicator() {\n        if(searchTask){\n            searchTask.close();\n            searchTask=null;\n        }\n    }\n\n    function _showBusyIndicator(scope) {\n        if(searchTask){\n            searchTask.close();\n        }\n        let scopeName = scope ?\n            Phoenix.app.getDisplayPath(scope.fullPath) :\n            Phoenix.app.getDisplayPath(ProjectManager.getProjectRoot().fullPath);\n        scopeName = StringUtils.format(Strings.FIND_IN_FILES_SEARCHING_IN, scopeName);\n        searchTask = TaskManager.addNewTask(Strings.FIND_IN_FILES_SEARCHING, scopeName,\n            `<i class=\"fa-solid fa-magnifying-glass\"></i>`);\n    }\n\n    /**\n     * Does a search in the given scope with the given filter. Shows the result list once the search is complete.\n     * @param {{query: string, caseSensitive: boolean, isRegexp: boolean}} queryInfo Query info object\n     * @param {?Entry} scope Project file/subfolder to search within; else searches whole project.\n     * @param {?string} filter A \"compiled\" filter as returned by FileFilters.compile(), or null for no filter\n     * @param {?string} replaceText If this is a replacement, the text to replace matches with.\n     * @param {?$.Promise} candidateFilesPromise If specified, a promise that should resolve with the same set of files that\n     *      getCandidateFiles(scope) would return.\n     * @return {$.Promise} A promise that's resolved with the search results or rejected when the find competes.\n     */\n    function searchAndShowResults(queryInfo, scope, filter, replaceText, candidateFilesPromise) {\n        return FindInFiles.doSearchInScope(queryInfo, scope, filter, replaceText, candidateFilesPromise)\n            .done(function (zeroFilesToken) {\n                // Done searching all files: show results\n                if (FindInFiles.searchModel.hasResults()) {\n                    _resultsView.open();\n\n                    if (_findBar) {\n                        _findBar.enable(true);\n                        _findBar.showError(null);\n                        _findBar.showNoResults(false);\n                        _findBar.focus();\n                    }\n\n                } else {\n                    _resultsView.close();\n\n                    if (_findBar) {\n                        var showMessage = false;\n                        _findBar.enable(true);\n                        if (zeroFilesToken === FindInFiles.ZERO_FILES_TO_SEARCH) {\n                            _findBar.showError(StringUtils.format(Strings.FIND_IN_FILES_ZERO_FILES,\n                                FindUtils.labelForScope(FindInFiles.searchModel.scope)), true, true);\n                        } else {\n                            showMessage = true;\n                        }\n                        _findBar.showNoResults(true, showMessage);\n                    }\n                }\n\n                _hideBusyIndicator();\n            })\n            .fail(function (err) {\n                console.log(\"find in files failed: \", err);\n                _hideBusyIndicator();\n            });\n    }\n\n    /**\n     * Does a search in the given scope with the given filter. Replace the result list once the search is complete.\n     * @param {{query: string, caseSensitive: boolean, isRegexp: boolean}} queryInfo Query info object\n     * @param {?Entry} scope Project file/subfolder to search within; else searches whole project.\n     * @param {?string} filter A \"compiled\" filter as returned by FileFilters.compile(), or null for no filter\n     * @param {?string} replaceText If this is a replacement, the text to replace matches with.\n     * @param {?$.Promise} candidateFilesPromise If specified, a promise that should resolve with the same set of files that\n     *      getCandidateFiles(scope) would return.\n     * @return {$.Promise} A promise that's resolved with the search results or rejected when the find competes.\n     */\n    function searchAndReplaceResults(queryInfo, scope, filter, replaceText, candidateFilesPromise) {\n        return FindInFiles.doSearchInScope(queryInfo, scope, filter, replaceText, candidateFilesPromise)\n            .done(function (zeroFilesToken) {\n                // Done searching all files: replace all\n                if (FindInFiles.searchModel.hasResults()) {\n                    _finishReplaceBatch(FindInFiles.searchModel);\n\n                    if (_findBar) {\n                        _findBar.enable(true);\n                        _findBar.focus();\n                    }\n\n                }\n                _hideBusyIndicator();\n            })\n            .fail(function (err) {\n                console.log(\"replace all failed: \", err);\n                _hideBusyIndicator();\n            });\n    }\n\n    function _getScopeLabel(scope, isReplace) {\n        if (scope) {\n            const scopeStr = isReplace ?\n                Strings.FIND_IN_FILES_PROJECT_SCOPE_REPLACE_FILTER :\n                Strings.FIND_IN_FILES_PROJECT_SCOPE_FILTER;\n            return StringUtils.format(\n                scopeStr,\n                StringUtils.breakableUrl(\n                    ProjectManager.makeProjectRelativeIfPossible(scope.fullPath)\n                )\n            );\n        }\n        return isReplace ?\n            Strings.FIND_IN_FILES_PROJECT_SCOPE_REPLACE :\n            Strings.FIND_IN_FILES_PROJECT_SCOPE;\n    }\n\n    /**\n     * @private\n     * Displays a non-modal embedded dialog above the code mirror editor that allows the user to do\n     * a find operation across all files in the project.\n     * @param {?Entry} scope  Project file/subfolder to search within; else searches whole project.\n     * @param {boolean=} showReplace If true, show the Replace controls.\n     */\n    function _showFindBar(scope, showReplace) {\n        FindUtils.notifySearchScopeChanged();\n        // If the scope is a file with a custom viewer, then we\n        // don't show find in files dialog.\n        if (scope && !EditorManager.canOpenPath(scope.fullPath)) {\n            return;\n        }\n\n        if (scope instanceof InMemoryFile) {\n            CommandManager.execute(Commands.FILE_OPEN, { fullPath: scope.fullPath }).done(function () {\n                CommandManager.execute(Commands.CMD_FIND);\n            });\n            return;\n        }\n\n        // Get initial query/replace text\n        let currentEditor = EditorManager.getActiveEditor();\n        let focussedEditor = EditorManager.getFocusedEditor();\n        if(!focussedEditor && _resultsView._$previewEditor && _resultsView._$previewEditor.editor\n            && _resultsView._$previewEditor.editor.hasFocus()){\n            currentEditor =  _resultsView._$previewEditor.editor;\n        }\n\n        let initialQuery = FindBar.getInitialQuery(_findBar, currentEditor);\n\n        // Close our previous find bar, if any. (The open() of the new _findBar will\n        // take care of closing any other find bar instances.)\n        if (_findBar) {\n            _findBar.close();\n        }\n\n        _findBar = new FindBar({\n            multifile: true,\n            replace: showReplace,\n            initialQuery: initialQuery.query,\n            historyHelp: brackets.platform === \"mac\" ? Strings.FIND_HISTORY_TOOLTIP_MAC : Strings.FIND_HISTORY_TOOLTIP,\n            initialReplaceText: initialQuery.replaceText,\n            queryPlaceholder: Strings.FIND_QUERY_PLACEHOLDER,\n            scopeLabel: _getScopeLabel(scope, showReplace)\n        });\n        _findBar.open();\n\n        // TODO Should push this state into ModalBar (via a FindBar API) instead of installing a callback like this.\n        // Custom closing behavior: if in the middle of executing search, blur shouldn't close ModalBar yet. And\n        // don't close bar when opening Edit Filter dialog either.\n        _findBar._modalBar.isLockedOpen = function () {\n            // TODO: should have state for whether the search is executing instead of looking at find bar state\n            return !_findBar.isEnabled() || $(\".modal.instance .exclusions-editor\").length > 0;\n        };\n\n        var candidateFilesPromise = FindInFiles.getCandidateFiles(scope);  // used for eventual search, and in exclusions editor UI\n\n        function handleQueryChange() {\n            // Check the query expression on every input event. This way the user is alerted\n            // to any RegEx syntax errors immediately.\n            var queryInfo = _findBar.getQueryInfo(),\n                queryResult = FindUtils.parseQueryInfo(queryInfo);\n\n            // Enable the replace button appropriately.\n            _findBar.enableReplace(queryResult.valid);\n\n            if (queryResult.valid || queryResult.empty) {\n                _findBar.showNoResults(false);\n                _findBar.showError(null);\n            } else {\n                _findBar.showNoResults(true, false);\n                _findBar.showError(queryResult.error);\n            }\n        }\n\n        function startSearch(replaceText) {\n            var queryInfo = _findBar.getQueryInfo(),\n                disableFindBar = (replaceText ? true : false);\n            if (queryInfo && queryInfo.query) {\n                _findBar.enable(!disableFindBar);\n                _showBusyIndicator(scope);\n                let queryType = \"query\";\n                if (queryInfo.isRegexp) {\n                    queryType = queryType + \":regex\";\n                }\n                if (queryInfo.isCaseSensitive) {\n                    queryType = queryType + \":caseSensitive\";\n                }\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"findInFiles\", queryType);\n\n                let filter;\n                if (_findBar && _findBar._options.multifile) {\n                    filter = FileFilters.getActiveFilter();\n                } else {\n                    // Single-file scope: don't use any file filters\n                    filter = null;\n                }\n                searchAndShowResults(queryInfo, scope, filter, replaceText, candidateFilesPromise);\n            }\n            return null;\n        }\n\n        function startReplace() {\n            startSearch(_findBar.getReplaceText());\n        }\n\n        _findBar\n            .on(\"doFind.FindInFiles\", function () {\n                // Subtle issue: we can't just pass startSearch directly as the handler, because\n                // we don't want it to get the event object as an argument.\n                startSearch();\n            })\n            .on(\"queryChange.FindInFiles\", handleQueryChange)\n            .on(\"close.FindInFiles\", function (e) {\n                _findBar.off(\".FindInFiles\");\n                _findBar = null;\n            })\n            .on(\"selectNextResult\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectNextResult();\n                }\n            })\n            .on(\"selectPrevResult\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectPrevResult();\n                }\n            })\n            .on(\"selectNextPage\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectNextPage();\n                }\n            })\n            .on(\"selectPrevPage\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectPrevPage();\n                }\n            })\n            .on(\"openSelectedFile\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.OpenSelectedFile();\n                }\n            });\n\n        if (showReplace) {\n            // We shouldn't get a \"doReplace\" in this case, since the Replace button\n            // is hidden when we set options.multifile.\n            _findBar.on(\"doReplaceBatch.FindInFiles\", startReplace);\n        }\n\n        var oldModalBarHeight = _findBar._modalBar.height();\n\n        // Show file-exclusion UI *unless* search scope is just a single file\n        if (!scope || scope.isDirectory) {\n            const filterPicker = FileFilters.createFilterPicker();\n            _findBar._modalBar.getRoot().find(\".scope-group\").append(...filterPicker);\n        }\n\n        handleQueryChange();\n        startSearch();\n\n        // Appending FilterPicker and query text can change height of modal bar, so resize editor.\n        // Preserve scroll position of the current full editor across the editor refresh, adjusting\n        // for the height of the modal bar so the code doesn't appear to shift if possible.\n        var fullEditor = EditorManager.getCurrentFullEditor(),\n            scrollPos;\n        if (fullEditor) {\n            scrollPos = fullEditor.getScrollPos();\n            scrollPos.y -= oldModalBarHeight;   // modalbar already showing, adjust for old height\n        }\n        WorkspaceManager.recomputeLayout();\n        if (fullEditor) {\n            fullEditor._codeMirror.scrollTo(scrollPos.x, scrollPos.y + _findBar._modalBar.height());\n        }\n    }\n\n    /**\n     * @private\n     * Finish a replace across files operation when the user clicks \"Replace\" on the results panel.\n     * @param {SearchModel} model The model for the search associated with ths replace.\n     */\n    function _finishReplaceBatch(model) {\n        var replaceText = model.replaceText;\n        if (replaceText === null) {\n            return;\n        }\n\n        // Clone the search results so that they don't get updated in the middle of the replacement.\n        var resultsClone = _.cloneDeep(model.results),\n            replacedFiles = Object.keys(resultsClone).filter(function (path) {\n                return FindUtils.hasCheckedMatches(resultsClone[path]);\n            }),\n            isRegexp = model.queryInfo.isRegexp;\n\n        function processReplace(forceFilesOpen) {\n            _showBusyIndicator(model.scope);\n            FindInFiles.doReplace(resultsClone, replaceText, { forceFilesOpen: forceFilesOpen, isRegexp: isRegexp })\n                .fail(function (errors) {\n                    var message = Strings.REPLACE_IN_FILES_ERRORS + FileUtils.makeDialogFileList(\n                            errors.map(function (errorInfo) {\n                                return ProjectManager.makeProjectRelativeIfPossible(errorInfo.item);\n                            })\n                        );\n\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        Strings.REPLACE_IN_FILES_ERRORS_TITLE,\n                        message,\n                        [\n                            {\n                                className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                                id: Dialogs.DIALOG_BTN_OK,\n                                text: Strings.BUTTON_REPLACE_WITHOUT_UNDO\n                            }\n                        ]\n                    );\n                })\n                .always(function () {\n                    _hideBusyIndicator();\n                });\n        }\n\n        if (replacedFiles.length <= MAX_IN_MEMORY) {\n            // Just do the replacements in memory.\n            _resultsView.close();\n            processReplace(true);\n        } else {\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_INFO,\n                Strings.REPLACE_WITHOUT_UNDO_WARNING_TITLE,\n                StringUtils.format(Strings.REPLACE_WITHOUT_UNDO_WARNING, MAX_IN_MEMORY),\n                [\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                        id: Dialogs.DIALOG_BTN_CANCEL,\n                        text: Strings.CANCEL\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.BUTTON_REPLACE_WITHOUT_UNDO\n                    }\n                ]\n            )\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        _resultsView.close();\n                        processReplace(false);\n                    }\n                });\n        }\n    }\n\n    // Command handlers\n\n    /**\n     * @private\n     * Bring up the Find in Files UI with the replace options.\n     */\n    function _showReplaceBar() {\n        FindUtils.notifySearchScopeChanged();\n        _showFindBar(null, true);\n    }\n\n    /**\n     * @private\n     * Search within the file/subtree defined by the sidebar selection\n     */\n    function _showFindBarForSubtree() {\n        FindUtils.notifySearchScopeChanged();\n        var selectedEntry = ProjectManager.getSelectedItem();\n        _showFindBar(selectedEntry);\n    }\n\n    /**\n     * @private\n     * Search within the file/subtree defined by the sidebar selection\n     */\n    function _showReplaceBarForSubtree() {\n        FindUtils.notifySearchScopeChanged();\n        var selectedEntry = ProjectManager.getSelectedItem();\n        _showFindBar(selectedEntry, true);\n    }\n\n    /**\n     * @private\n     * Close the open search bar, if any. For unit tests.\n     */\n    function _closeFindBar(suppressAnimation) {\n        if (_findBar) {\n            _findBar.close(suppressAnimation);\n        }\n    }\n\n    /**\n     * When the search indexing is started, we need to show the indexing status on the find bar if present.\n     */\n    function _searchIndexingStarted() {\n        if (_findBar && _findBar._options.multifile && FindUtils.isIndexingInProgress()) {\n            _findBar.showIndexingSpinner();\n        }\n    }\n\n    /**\n     * When the search indexing is started, we need to show the indexing status on the find bar if present.\n     */\n    function _searchIndexingProgressing(_evt, processed, total) {\n        if (_findBar && _findBar._options.multifile && FindUtils.isIndexingInProgress()) {\n            let progressMessage = StringUtils.format(Strings.FIND_IN_FILES_INDEXING_PROGRESS, processed, total);\n            _findBar.setIndexingMessage(progressMessage);\n        }\n    }\n\n    /**\n     * Once the indexing has finished, clear the indexing spinner\n     */\n    function _searchIndexingFinished() {\n        if (_findBar) {\n            _findBar.hideIndexingSpinner();\n        }\n    }\n\n    /**\n     * Issues a search if find bar is visible and is multi file search and not instant search\n     */\n    function _defferedSearch() {\n        if (_findBar && _findBar._options.multifile && !_findBar._options.replace) {\n            _findBar.redoInstantSearch();\n        }\n    }\n\n    /**\n     * Schedules a search on search scope/filter changes. Have to schedule as when we listen to this event, the file filters\n     * might not have been updated yet.\n     */\n    function _searchIfRequired() {\n        if (!FindUtils.isInstantSearchDisabled() && _findBar && _findBar._options.multifile && !_findBar._options.replace) {\n            setTimeout(_defferedSearch, 100);\n        }\n    }\n\n    /**\n    * @public\n    * Closes the search results panel\n    */\n    function closeResultsPanel() {\n        _resultsView.close();\n        _closeFindBar();\n    }\n\n    // Initialize items dependent on HTML DOM\n    AppInit.htmlReady(function () {\n        var model = FindInFiles.searchModel;\n        _resultsView = new SearchResultsView(model, \"find-in-files-results\", \"find-in-files.results\");\n        _resultsView\n            .on(\"replaceBatch\", function () {\n                _finishReplaceBatch(model);\n            })\n            .on(\"close\", function () {\n                FindInFiles.clearSearch();\n            })\n            .on(\"getNextPage\", function () {\n                FindInFiles.getNextPageofSearchResults().done(function () {\n                    if (FindInFiles.searchModel.hasResults()) {\n                        _resultsView.showNextPage();\n                    }\n                });\n            })\n            .on(\"getLastPage\", function () {\n                FindInFiles.getAllSearchResults().done(function () {\n                    if (FindInFiles.searchModel.hasResults()) {\n                        _resultsView.showLastPage();\n                    }\n                });\n            });\n    });\n\n    // Initialize: register listeners\n    ProjectManager.on(\"beforeProjectClose\", function () {\n        _resultsView.close();\n        if (_findBar && !_findBar.isClosed()) {\n            _closeFindBar(true);\n        }\n    });\n\n    // Initialize: command handlers\n    CommandManager.register(Strings.CMD_FIND_IN_FILES,       Commands.CMD_FIND_IN_FILES,       _showFindBar);\n    CommandManager.register(Strings.CMD_FIND_IN_SUBTREE,     Commands.CMD_FIND_IN_SUBTREE,     _showFindBarForSubtree);\n\n    CommandManager.register(Strings.CMD_REPLACE_IN_FILES,    Commands.CMD_REPLACE_IN_FILES,    _showReplaceBar);\n    CommandManager.register(Strings.CMD_REPLACE_IN_SUBTREE,  Commands.CMD_REPLACE_IN_SUBTREE,  _showReplaceBarForSubtree);\n\n    FindUtils.on(FindUtils.SEARCH_INDEXING_STARTED, _searchIndexingStarted);\n    FindUtils.on(FindUtils.SEARCH_INDEXING_PROGRESS, _searchIndexingProgressing);\n    FindUtils.on(FindUtils.SEARCH_INDEXING_FINISHED, _searchIndexingFinished);\n    FindUtils.on(FindUtils.SEARCH_FILE_FILTERS_CHANGED, _searchIfRequired);\n    FindUtils.on(FindUtils.SEARCH_SCOPE_CHANGED, _searchIfRequired);\n\n    // Public exports\n    exports.searchAndShowResults = searchAndShowResults;\n    exports.searchAndReplaceResults = searchAndReplaceResults;\n    exports.closeResultsPanel = closeResultsPanel;\n\n    // For unit testing\n    exports._showFindBar  = _showFindBar;\n    exports._closeFindBar = _closeFindBar;\n});\n"],"file":"FindInFilesUI.js"}