{"version":3,"sources":["editor/EditorOptionHandlers.js"],"names":["define","require","exports","module","AppInit","Editor","Commands","CommandManager","PreferencesManager","Strings","EditorManager","ThemeManager","_","SHOW_LINE_NUMBERS","STYLE_ACTIVE_LINE","WORD_WRAP","CLOSE_BRACKETS","AUTO_HIDE_SEARCH","PREFERENCES_EDITOR_RULERS","PREFERENCES_EDITOR_RULER_COLORS","PREFERENCES_EDITOR_RULERS_ENABLED","_currentTheme","definePreference","description","DESCRIPTION_RULERS_ENABLED","DESCRIPTION_RULERS_COLUMNS","DESCRIPTION_RULERS_COLORS","_optionMapping","_updateCheckedState","name","mapping","get","setChecked","_getToggler","prefName","set","_createRulers","editor","rulerColumns","rulerColors","rulersEnabled","length","getCurrentTheme","defaultColor","dark","_codeMirror","getOption","rulerOptions","i","push","color","column","lineStyle","setOption","_resetRulers","forEveryEditor","_handleThemeChange","_init","each","commandName","getShowLineNumbers","_toggleLinePadding","on","_event","newActiveEditor","EVENT_THEME_CHANGE","TOGGLE_LINE_NUMBERS","TOGGLE_ACTIVE_LINE","TOGGLE_WORD_WRAP","TOGGLE_CLOSE_BRACKETS","TOGGLE_SEARCH_AUTOHIDE","TOGGLE_RULERS","Object","keys","forEach","preference","register","CMD_TOGGLE_LINE_NUMBERS","CMD_TOGGLE_ACTIVE_LINE","CMD_TOGGLE_WORD_WRAP","CMD_TOGGLE_CLOSE_BRACKETS","CMD_TOGGLE_SEARCH_AUTOHIDE","CMD_TOGGLE_RULERS","htmlReady"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    const AppInit             = require(\"utils/AppInit\"),\n        Editor              = require(\"editor/Editor\").Editor,\n        Commands            = require(\"command/Commands\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        Strings             = require(\"strings\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        ThemeManager        = require(\"view/ThemeManager\"),\n        _                   = require(\"thirdparty/lodash\");\n\n    // Constants for the preferences referred to in this file\n    const SHOW_LINE_NUMBERS = \"showLineNumbers\",\n        STYLE_ACTIVE_LINE = \"styleActiveLine\",\n        WORD_WRAP         = \"wordWrap\",\n        CLOSE_BRACKETS    = \"closeBrackets\",\n        AUTO_HIDE_SEARCH  = \"autoHideSearch\";\n\n    const PREFERENCES_EDITOR_RULERS = \"editor.rulers\",\n        PREFERENCES_EDITOR_RULER_COLORS = \"editor.rulerColors\",\n        PREFERENCES_EDITOR_RULERS_ENABLED = \"editor.rulersEnabled\";\n    PreferencesManager.definePreference(PREFERENCES_EDITOR_RULERS_ENABLED, \"boolean\", true, {\n        description: Strings.DESCRIPTION_RULERS_ENABLED\n    });\n    PreferencesManager.definePreference(PREFERENCES_EDITOR_RULERS, \"array\", [120], {\n        description: Strings.DESCRIPTION_RULERS_COLUMNS\n    });\n    PreferencesManager.definePreference(PREFERENCES_EDITOR_RULER_COLORS, \"array\", [], {\n        description: Strings.DESCRIPTION_RULERS_COLORS\n    });\n\n    let _currentTheme;\n    /**\n     * @private\n     *\n     * Maps from preference names to the command names needed to update the checked status.\n     */\n    let _optionMapping = {};\n    _optionMapping[SHOW_LINE_NUMBERS] = Commands.TOGGLE_LINE_NUMBERS;\n    _optionMapping[STYLE_ACTIVE_LINE] = Commands.TOGGLE_ACTIVE_LINE;\n    _optionMapping[WORD_WRAP] = Commands.TOGGLE_WORD_WRAP;\n    _optionMapping[CLOSE_BRACKETS] = Commands.TOGGLE_CLOSE_BRACKETS;\n    _optionMapping[AUTO_HIDE_SEARCH] = Commands.TOGGLE_SEARCH_AUTOHIDE;\n    _optionMapping[PREFERENCES_EDITOR_RULERS_ENABLED] = Commands.TOGGLE_RULERS;\n\n\n\n    /**\n     * @private\n     *\n     * Updates the command checked status based on the preference name given.\n     *\n     * @param {string} name Name of preference that has changed\n     */\n    function _updateCheckedState(name) {\n        var mapping = _optionMapping[name];\n        if (!mapping) {\n            return;\n        }\n        CommandManager.get(mapping).setChecked(PreferencesManager.get(name));\n    }\n\n    // Listen to preference changes for the preferences we care about\n    Object.keys(_optionMapping).forEach(function (preference) {\n        PreferencesManager.on(\"change\", preference, function () {\n            _updateCheckedState(preference);\n        });\n    });\n\n    /**\n     * @private\n     * Creates a function that will toggle the named preference.\n     *\n     * @param {string} prefName Name of preference that should be toggled by the function\n     */\n    function _getToggler(prefName) {\n        return function () {\n            PreferencesManager.set(prefName, !PreferencesManager.get(prefName));\n        };\n    }\n\n    function _createRulers(editor) {\n        const rulerColumns = PreferencesManager.get(PREFERENCES_EDITOR_RULERS) || [];\n        const rulerColors = PreferencesManager.get(PREFERENCES_EDITOR_RULER_COLORS) || [];\n        const rulersEnabled = PreferencesManager.get(PREFERENCES_EDITOR_RULERS_ENABLED);\n        if( !rulersEnabled || !rulerColumns.length || !editor){\n            return;\n        }\n\n        if(!_currentTheme){\n            _currentTheme = ThemeManager.getCurrentTheme();\n        }\n        const defaultColor = (_currentTheme && _currentTheme.dark) ? \"#4b4b4b\" : \"#d0d0d0\";\n\n        if(!editor._codeMirror.getOption(\"rulers\")){\n            let rulerOptions = [];\n            for(let i=0; i<rulerColumns.length; i++) {\n                rulerOptions.push({\n                    color: rulerColors[i] ? rulerColors[i]: defaultColor,\n                    column: rulerColumns[i],\n                    lineStyle: \"solid !important\"\n                });\n            }\n            editor._codeMirror.setOption(\"rulers\", rulerOptions);\n        }\n    }\n\n    function _resetRulers() {\n        Editor.forEveryEditor(function (editor) {\n            editor._codeMirror.setOption(\"rulers\", null);\n            _createRulers(editor);\n        });\n    }\n\n    function _handleThemeChange() {\n        _currentTheme = ThemeManager.getCurrentTheme();\n        _resetRulers();\n    }\n\n    CommandManager.register(Strings.CMD_TOGGLE_LINE_NUMBERS, Commands.TOGGLE_LINE_NUMBERS, _getToggler(SHOW_LINE_NUMBERS));\n    CommandManager.register(Strings.CMD_TOGGLE_ACTIVE_LINE, Commands.TOGGLE_ACTIVE_LINE, _getToggler(STYLE_ACTIVE_LINE));\n    CommandManager.register(Strings.CMD_TOGGLE_WORD_WRAP, Commands.TOGGLE_WORD_WRAP, _getToggler(WORD_WRAP));\n    CommandManager.register(Strings.CMD_TOGGLE_CLOSE_BRACKETS, Commands.TOGGLE_CLOSE_BRACKETS, _getToggler(CLOSE_BRACKETS));\n    CommandManager.register(Strings.CMD_TOGGLE_SEARCH_AUTOHIDE, Commands.TOGGLE_SEARCH_AUTOHIDE, _getToggler(AUTO_HIDE_SEARCH));\n    CommandManager.register(Strings.CMD_TOGGLE_RULERS, Commands.TOGGLE_RULERS, _getToggler(PREFERENCES_EDITOR_RULERS_ENABLED));\n\n    function _init() {\n        _.each(_optionMapping, function (commandName, prefName) {\n            CommandManager.get(commandName).setChecked(PreferencesManager.get(prefName));\n        });\n\n        if (!Editor.getShowLineNumbers()) {\n            Editor._toggleLinePadding(true);\n        }\n\n        // fires for inline editor creation;\n        EditorManager.on('activeEditorChange', (_event, newActiveEditor)=>{\n            _createRulers(newActiveEditor);\n        });\n        PreferencesManager.on(\"change\", PREFERENCES_EDITOR_RULERS_ENABLED, _resetRulers);\n        PreferencesManager.on(\"change\", PREFERENCES_EDITOR_RULERS, _resetRulers);\n        PreferencesManager.on(\"change\", PREFERENCES_EDITOR_RULER_COLORS, _resetRulers);\n        ThemeManager.on(ThemeManager.EVENT_THEME_CHANGE, _handleThemeChange);\n        _resetRulers();\n    }\n\n    AppInit.htmlReady(_init);\n});\n"],"file":"EditorOptionHandlers.js"}