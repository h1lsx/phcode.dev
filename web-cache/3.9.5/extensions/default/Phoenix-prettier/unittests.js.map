{"version":3,"sources":["extensions/default/Phoenix-prettier/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","Editor","FileUtils","PreferencesManager","BeautificationManager","PLATFORM_LINE_ENDINGS","getPlatformLineEndings","jsFile","jsPrettyFile","jsPrettyFile8Indent","jsPrettyRulerFile","jsPrettySelection","jsPrettySelectionOffset","jsPrettySingleSpace","jsPrettyTabs","htmlFile","htmlPrettyFile","htmlPrettySelection","htmlPrettySelectionOffset","htmlPrettySingleSpace","htmlPrettyTabs","cssFile","cssPrettyFile","cssPrettySelection","mdFile","mdPrettyFile","lessFile","lessPrettyFile","jsonFile","jsonPrettyFile","describe","testEditor","testDocument","createMockEditor","text","language","filename","mock","undefined","editor","doc","beforeAll","async","setAutoTabSpaces","afterAll","afterEach","destroyMockEditor","setUseTabChar","setSpaceUnits","it","beautifyEditor","expect","document","getText","toBe","PREFERENCES_EDITOR_RULERS","set","extPrefs","getExtensionPrefs","originalPrefs","structuredClone","get","newPrefs","printWidth","setTabSize","setSelection","line","ch","toBeFalsy","e","setCursorPos","cursor","getCursorPos"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, afterAll, afterEach, beforeAll*/\n\ndefine(function (require, exports, module) {\n\n\n    let SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        Editor = brackets.getModule(\"editor/Editor\").Editor,\n        FileUtils = brackets.getModule('file/FileUtils'),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        BeautificationManager = brackets.getModule(\"features/BeautificationManager\");\n\n    const PLATFORM_LINE_ENDINGS = (FileUtils.getPlatformLineEndings() === 'CRLF' ? \"\\r\\n\" : \"\\n\");\n\n    require(\"./main\");\n\n    const jsFile = require(\"text!../../../../test/spec/prettier-test-files/js/test.js\"),\n        jsPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty.js\"),\n        jsPrettyFile8Indent = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-8-indent.js\"),\n        jsPrettyRulerFile = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-ruler.js\"),\n        jsPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-selection.js\"),\n        jsPrettySelectionOffset = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-selection-offset.js\"),\n        jsPrettySingleSpace = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-single-space.js\"),\n        jsPrettyTabs = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-tabs.txt\");\n\n    const htmlFile = require(\"text!../../../../test/spec/prettier-test-files/html/test.html\"),\n        htmlPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty.html\"),\n        htmlPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-selection.html\"),\n        htmlPrettySelectionOffset = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-selection-offset.html\"),\n        htmlPrettySingleSpace = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-single-space.html\"),\n        htmlPrettyTabs = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-tabs.txt\");\n\n    const cssFile = require(\"text!../../../../test/spec/prettier-test-files/css/test.css\"),\n        cssPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/css/test-pretty.css\"),\n        cssPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/css/test-pretty-selection.css\");\n\n    const mdFile = require(\"text!../../../../test/spec/prettier-test-files/test.md\"),\n        mdPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.md\"),\n        lessFile = require(\"text!../../../../test/spec/prettier-test-files/test.less\"),\n        lessPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.less\"),\n        jsonFile = require(\"text!../../../../test/spec/prettier-test-files/test.json\"),\n        jsonPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.json\");\n\n    describe(\"integration: Phoenix Prettier\", function () {\n        let testEditor, testDocument;\n\n        beforeAll(async ()=>{\n            Editor.setAutoTabSpaces(false);\n        });\n        afterAll(()=>{\n            Editor.setAutoTabSpaces(true);\n        });\n\n        function createMockEditor(text, language, filename) {\n            let mock = SpecRunnerUtils.createMockEditor(text, language, undefined,\n                {filename: filename});\n            testEditor = mock.editor;\n            testDocument = mock.doc;\n        }\n\n        describe(\"JS Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setAutoTabSpaces(false);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyFile);\n            });\n\n            it(\"should beautify editor for js with auto detected spacing\", async function () {\n                Editor.setAutoTabSpaces(true);\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyFile8Indent);\n            });\n\n            it(\"should use line max length from editor rulers by default\", async function () {\n                const PREFERENCES_EDITOR_RULERS = \"editor.rulers\";\n                PreferencesManager.set(PREFERENCES_EDITOR_RULERS, [10, 20]);\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyRulerFile);\n                PreferencesManager.set(PREFERENCES_EDITOR_RULERS, [120]); // restore default\n            });\n\n            it(\"should prioritise line max length from prettier options above editor rulers\", async function () {\n                // here we set prettier options to 20 line width and ruler options to 120 chars. the prettier override\n                // should take preference above ruler config\n                const PREFERENCES_EDITOR_RULERS = \"editor.rulers\";\n                PreferencesManager.set(PREFERENCES_EDITOR_RULERS, [120]);\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyFile);\n                // now override the prettier prefs\n                const extPrefs = PreferencesManager.getExtensionPrefs(\"beautify\");\n                const originalPrefs = structuredClone(extPrefs.get(\"options\"));\n                const newPrefs = structuredClone(originalPrefs);\n                newPrefs.printWidth = 20;\n                extPrefs.set(\"options\", newPrefs);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyRulerFile);\n                extPrefs.set(\"options\", originalPrefs);\n            });\n\n            it(\"should beautify editor respect space options for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(1);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettySingleSpace);\n            });\n\n            it(\"should beautify editor respect tab options for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                Editor.setUseTabChar(true);\n                Editor.setTabSize(4);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyTabs);\n            });\n\n            it(\"should beautify editor selection for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettySelection);\n            });\n\n            it(\"should beautify editor selection with offset for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 4, ch: 0}, {line: 6, ch: 0});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)+ PLATFORM_LINE_ENDINGS).toBe(jsPrettySelectionOffset);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 35});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(jsFile);\n                }\n            });\n        });\n\n        describe(\"HTML Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettyFile);\n            });\n\n            it(\"should beautify editor respect space options for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(1);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettySingleSpace);\n            });\n\n            it(\"should beautify editor respect tab options for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                Editor.setUseTabChar(true);\n                Editor.setTabSize(4);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettyTabs);\n            });\n\n            it(\"should beautify editor selection for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettySelection);\n            });\n\n            it(\"should beautify editor selection with offset for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 4, ch: 0}, {line: 6, ch: 0});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)+ PLATFORM_LINE_ENDINGS).toBe(htmlPrettySelectionOffset);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 10});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(htmlFile);\n                }\n            });\n        });\n\n        describe(\"CSS Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(cssPrettyFile);\n            });\n\n            it(\"should beautify editor selection for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(cssPrettySelection);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 10});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(cssFile);\n                }\n            });\n        });\n\n        describe(\"MD, less, json Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for markdown\", async function () {\n                createMockEditor(mdFile, \"css\", \"/test.md\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(mdPrettyFile);\n            });\n\n            it(\"should beautify editor for less\", async function () {\n                createMockEditor(lessFile, \"less\", \"/test.less\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(lessPrettyFile);\n            });\n\n            it(\"should beautify editor for scss\", async function () {\n                createMockEditor(\"body{$font-stack: Helvetica, sans-serif;}\", \"scss\", \"/test.scss\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe(\"body {\\n\" +\n                    \"    $font-stack: Helvetica, sans-serif;\\n\" +\n                    \"}\\n\");\n            });\n\n            it(\"should beautify editor for json\", async function () {\n                createMockEditor(jsonFile, \"json\", \"/test.json\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsonPrettyFile);\n            });\n\n            it(\"should beautify editor for xml\", async function () {\n                createMockEditor(\"<a id='1'></a>\", \"xml\", \"/test.xml\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('<a id=\"1\"></a>\\n');\n            });\n\n            it(\"should beautify editor for svg\", async function () {\n                createMockEditor(\"<svg id='1'></svg>\", \"svg\", \"/test.svg\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('<svg id=\"1\"></svg>\\n');\n            });\n\n            it(\"should beautify editor for yaml\", async function () {\n                createMockEditor(\"x:\\n y\", \"typescript\", \"/test.yaml\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('x: y\\n');\n            });\n\n            it(\"should beautify editor for jsx\", async function () {\n                createMockEditor(\"const element = <h1>\\nHello, {name}</h1>;\", \"jsx\", \"/test.jsx\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('const element = <h1>Hello, {name}</h1>;\\n');\n            });\n\n            it(\"should beautify editor for tsx\", async function () {\n                createMockEditor(\"const element = <h1>\\nHello, {name}</h1>;\", \"tsx\", \"/test.tsx\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('const element = <h1>Hello, {name}</h1>;\\n');\n            });\n\n            it(\"should beautify editor for typescript\", async function () {\n                createMockEditor(\"function x(){x;}\", \"typescript\", \"/test.ts\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('function x() {\\n' +\n                    '    x;\\n' +\n                    '}\\n');\n            });\n\n            it(\"should beautify editor for php\", async function () {\n                createMockEditor(\"<?php\\n\" +\n                    \"echo \\\"Hello World!\\\";\\n\" +\n                    \"?> \", \"php\", \"/test.php\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe(\"<?php\\n\" +\n                    \"echo \\\"Hello World!\\\"; ?> \");\n            });\n\n            it(\"should beautify editor restore cursor position\", async function () {\n                createMockEditor(\"function x(){x;}\", \"typescript\", \"/test.ts\");\n                testEditor.setCursorPos(0, 13);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('function x() {\\n' +\n                    '    x;\\n' +\n                    '}\\n');\n                const cursor = testEditor.getCursorPos();\n                expect(cursor.line).toBe(1);\n                expect(cursor.ch).toBe(4);\n            });\n        });\n    });\n});\n"],"file":"unittests.js"}