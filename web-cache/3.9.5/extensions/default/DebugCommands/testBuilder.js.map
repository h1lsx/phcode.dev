{"version":3,"sources":["extensions/default/DebugCommands/testBuilder.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","DocumentManager","EditorManager","FileSystem","Editor","Dialogs","CommandManager","Commands","WorkspaceManager","MacroRunner","BUILD_SCRATCH_FILE","path","join","app","getApplicationSupportDirectory","builderPanel","$panel","builderEditor","toggleTestBuilder","$","panelHTML","createBottomPanel","hide","_setupPanel","then","setVisible","isVisible","saveFile","Promise","resolve","reject","execute","FILE_SAVE","doc","document","done","fail","openErr","console","error","async","runTests","macroText","errors","runMacro","getText","length","errorHTML","errorText","showErrorDialog","runSelection","getSelectedText","_locateCursor","editor","getActiveEditor","formattedSelections","computeCursors","replaceRange","getCursorPos","focus","_validateText","selection","getSelection","start","end","selectionText","line","ch","quotedString","replaceAll","_validateMarks","marks","findMarksAt","filter","mark","markType","markTypeMap","loc","find","push","from","to","Object","keys","selections","file","getFileForPath","isExists","existsAsync","write","blind","getDocumentForPath","_$editor","updateLayout","ResizeObserver","observe","click","appReady","Phoenix","isTestWindow"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path*/\n\ndefine(function (require, exports, module) {\n    const AppInit = brackets.getModule(\"utils/AppInit\"),\n        DocumentManager = brackets.getModule(\"document/DocumentManager\"),\n        EditorManager = brackets.getModule(\"editor/EditorManager\"),\n        FileSystem = brackets.getModule(\"filesystem/FileSystem\"),\n        Editor = brackets.getModule(\"editor/Editor\"),\n        Dialogs = brackets.getModule(\"widgets/Dialogs\"),\n        CommandManager = brackets.getModule(\"command/CommandManager\"),\n        Commands = brackets.getModule(\"command/Commands\"),\n        WorkspaceManager = brackets.getModule(\"view/WorkspaceManager\"),\n        MacroRunner = require(\"./MacroRunner\");\n\n    const BUILD_SCRATCH_FILE = path.join(brackets.app.getApplicationSupportDirectory(), \"testBuilder.js\");\n    let builderPanel, $panel, builderEditor;\n\n    function toggleTestBuilder() {\n        if(!$panel){\n            $panel = $(panelHTML);\n            builderPanel = WorkspaceManager.createBottomPanel(\"phcode-test-builder-panel\", $panel, 100);\n            builderPanel.hide();\n            _setupPanel().then(()=>{\n                builderPanel.setVisible(!builderPanel.isVisible());\n            });\n            return;\n        }\n        builderPanel.setVisible(!builderPanel.isVisible());\n    }\n    const panelHTML = `\n<div id=\"test-builder-panel-phcode\" class=\"bottom-panel vert-resizable top-resizer\">\n    <div class=\"toolbar\" style=\"display: flex; justify-content: space-between;\">\n      <div style=\"display: flex\">\n         <div class=\"title\">Test Builder</div>\n         <button class=\"btn btn-mini no-focus save-test-builder\">Save</button>\n         <button class=\"btn btn-mini primary no-focus run-test-builder\">Run</button>\n         <button class=\"btn btn-mini no-focus run-selected\">Run Selected</button>\n      </div>\n      <div>\n         <button class=\"btn btn-mini no-focus mark-validate\" title=\"Validate marks at cursor\">Marks</button>\n         <button class=\"btn btn-mini no-focus cursor-locate\">cursor</button>\n         <button class=\"btn btn-mini no-focus text-validate\" title=\"validate text\" style=\"margin-right: 20px;\">\n            Text</button>\n         <a href=\"#\" class=\"close\" style=\"right: 0;margin-right: 10px;\">&times;</a>\n      </div>  \n    </div>\n    <div style=\"display: flex; height: 100%; overflow: scroll;\">\n<!--27 px is status bar height. If this is not set, the preview code mirror editor gives weird layout issues at times-->\n        <div class=\"test_builder-editor\" style=\"width: 100%; height: 100%;\"></div>\n    </div>\n</div>`;\n\n    function saveFile() {\n        return new Promise((resolve, reject) => {\n            CommandManager.execute(Commands.FILE_SAVE,\n                {doc: builderEditor.document})\n                .done(resolve)\n                .fail(function (openErr) {\n                    console.error(\"error saving test builder file: \", BUILD_SCRATCH_FILE, openErr);\n                    reject();\n                });\n        });\n    }\n\n    async function runTests(macroText) {\n        saveFile();\n        const errors = await MacroRunner.runMacro(macroText || builderEditor.document.getText());\n        if(errors.length) {\n            let errorHTML = \"\";\n            for (let error of errors) {\n                errorHTML += `${error.errorText}<br>`;\n            }\n            Dialogs.showErrorDialog(\"Error running macro: \", errorHTML);\n        }\n    }\n\n    function runSelection() {\n        return runTests(builderEditor.getSelectedText());\n    }\n\n    function _locateCursor() {\n        const editor = EditorManager.getActiveEditor();\n        if(!editor) {\n            return;\n        }\n        const formattedSelections = MacroRunner.computeCursors(editor, true);\n        builderEditor.replaceRange(`\\n__PR.setCursors([${formattedSelections.join(\", \")}]);`,\n            builderEditor.getCursorPos());\n        editor.focus();\n    }\n\n    function _validateText() {\n        const editor = EditorManager.getActiveEditor();\n        if(!editor) {\n            return;\n        }\n        const selection = editor.getSelection();\n        const start = selection.start, end = selection.end;\n        const selectionText = `${start.line+1}:${start.ch+1}-${end.line+1}:${end.ch+1}`;\n        let quotedString = editor.getSelectedText().replaceAll(\"\\n\", \"\\\\n\");\n        builderEditor.replaceRange(`\\n__PR.validateText(\\`${quotedString}\\`, \"${selectionText}\");`,\n            builderEditor.getCursorPos());\n        editor.focus();\n    }\n\n    function _validateMarks(){\n        const editor = EditorManager.getActiveEditor();\n        if(!editor) {\n            return;\n        }\n        const marks = editor.findMarksAt(editor.getCursorPos()).filter(mark => mark.markType);\n        const markTypeMap = {};\n        for(let mark of marks){\n            if(!markTypeMap[mark.markType]){\n                markTypeMap[mark.markType] = [];\n            }\n            const loc = mark.find();\n            markTypeMap[mark.markType].push(`\"${loc.from.line+1}:${loc.from.ch+1}-${loc.to.line+1}:${loc.to.ch+1}\"`);\n        }\n        for(let markType of Object.keys(markTypeMap)) {\n            const selections = markTypeMap[markType];\n            builderEditor.replaceRange(`\\n__PR.validateMarks(\"${markType}\", [${selections.join(\", \")}]);`,\n                builderEditor.getCursorPos());\n        }\n    }\n\n    async function _setupPanel() {\n        let file = FileSystem.getFileForPath(BUILD_SCRATCH_FILE);\n        let isExists = await file.existsAsync();\n        if(!isExists) {\n            await new Promise(resolve => {\n                file.write(\"\", {blind: true}, resolve);\n            });\n        }\n        DocumentManager.getDocumentForPath(BUILD_SCRATCH_FILE).done(function (doc) {\n            const _$editor   = $panel.find(\".test_builder-editor\");\n            builderEditor = new Editor.Editor(doc, false, _$editor, null, {});\n            builderEditor.updateLayout();\n        });\n        new ResizeObserver(()=>{\n            builderEditor && builderEditor.updateLayout();\n        }).observe($panel[0]);\n\n        $panel.find(\".close\").click(toggleTestBuilder);\n        $panel.find(\".save-test-builder\").click(saveFile);\n        $panel.find(\".run-test-builder\").click(()=>{\n            runTests();\n        });\n        $panel.find(\".run-selected\").click(runSelection);\n        $panel.find(\".cursor-locate\").click(_locateCursor);\n        $panel.find(\".text-validate\").click(_validateText);\n        $panel.find(\".mark-validate\").click(_validateMarks);\n    }\n\n    AppInit.appReady(function () {\n        if(Phoenix.isTestWindow) {\n            return;\n        }\n        $panel = $(panelHTML);\n        builderPanel = WorkspaceManager.createBottomPanel(\"phcode-test-builder-panel\", $panel, 100);\n        builderPanel.hide();\n        _setupPanel();\n    });\n\n    exports.toggleTestBuilder = toggleTestBuilder;\n});\n"],"file":"testBuilder.js"}