{"version":3,"sources":["extensions/default/CSSCodeHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","testContentCSS","testContentHTML","CSSCodeHints","describe","defaultContent","defaultHTMLContent","testDocument","testEditor","setupTest","content","languageId","mock","createMockEditor","doc","editor","tearDownTest","destroyMockEditor","extractHintList","hints","$","map","$node","data","expectHints","provider","implicitChar","returnWholeObj","expect","hasHints","toBe","hintsObj","getHints","toBeTruthy","expectNoHints","verifyAttrHints","hintList","expectedFirstHint","indexOf","selectHint","expectedHint","not","insertHint","fixPos","pos","sticky","expectCursorAt","selection","getSelection","start","toEql","end","verifyAllValues","values","length","sort","toString","beforeEach","afterEach","it","setCursorPos","line","ch","cssPropHintProvider","replaceRange","getLine","expectedString","undefined","text","find","css","toMatch","hasClass"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        testContentCSS  = require(\"text!unittest-files/regions.css\"),\n        testContentHTML = require(\"text!unittest-files/region-template.html\"),\n        CSSCodeHints    = require(\"main\");\n\n    describe(\"unit:CSS Code Hinting\", function () {\n\n        var defaultContent = \"@media screen { \\n\" +\n                             \" body { \\n\" +\n                             \" }\\n\" +\n                             \"} \\n\" +\n                             \".selector { \\n\" +\n                             \" \\n\" +\n                             \" b\\n\" +\n                             \" bord\\n\" +\n                             \" border-\\n\" +\n                             \" border-colo\\n\" +\n                             \" border-color: red;\\n\" +      // line: 10\n                             \" d\\n\" +\n                             \" disp\\n\" +\n                             \" display: \\n\" +\n                             \" display: in\\n\" +\n                             \" bordborder: \\n\" +\n                             \" color\\n\" +\n                             \"} \\n\";\n\n        var defaultHTMLContent = \"<html> \\n\" +\n                                 \"<head> \\n\" +\n                                 \"</head> \\n\" +\n                                 \"<body> \\n\" +\n                                 \"<div style=' \\n\" + // line 4\n                                 \" \\n\" +\n                                 \" b\\n\" +\n                                 \" bord\\n\" +\n                                 \" border-\\n\" +\n                                 \" border-colo\\n\" +\n                                 \" border-color: red;'>\\n\" + // line 10\n                                 \"</div> \\n\" +\n                                 \"</body> \\n\" +\n                                 \"</html> \\n\";\n\n        var testDocument, testEditor;\n\n        /*\n         * Create a mockup editor with the given content and language id.\n         *\n         * @param {string} content - content for test window\n         * @param {string} languageId\n         */\n        function setupTest(content, languageId) {\n            var mock = SpecRunnerUtils.createMockEditor(content, languageId);\n            testDocument = mock.doc;\n            testEditor = mock.editor;\n        }\n\n        function tearDownTest() {\n            SpecRunnerUtils.destroyMockEditor(testDocument);\n            testEditor = null;\n            testDocument = null;\n        }\n\n        function extractHintList(hints) {\n            return $.map(hints, function ($node) {\n                return $node.data('val');\n            });\n        }\n\n        // Ask provider for hints at current cursor position; expect it to return some\n        function expectHints(provider, implicitChar, returnWholeObj) {\n            expect(provider.hasHints(testEditor, implicitChar)).toBe(true);\n            var hintsObj = provider.getHints();\n            expect(hintsObj).toBeTruthy();\n            // return just the array of hints if returnWholeObj is falsy\n            return returnWholeObj ? hintsObj : extractHintList(hintsObj.hints);\n        }\n\n        // Ask provider for hints at current cursor position; expect it NOT to return any\n        function expectNoHints(provider, implicitChar) {\n            expect(provider.hasHints(testEditor, implicitChar)).toBe(false);\n        }\n\n        function verifyAttrHints(hintList, expectedFirstHint) {\n            expect(hintList.indexOf(\"div\")).toBe(-1);\n            expect(hintList[0]).toBe(expectedFirstHint);\n        }\n\n\n        function selectHint(provider, expectedHint, implicitChar) {\n            var hintList = expectHints(provider, implicitChar);\n            expect(hintList.indexOf(expectedHint)).not.toBe(-1);\n            return provider.insertHint(expectedHint);\n        }\n\n        // Helper function for testing cursor position\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n        function expectCursorAt(pos) {\n            var selection = testEditor.getSelection();\n            expect(fixPos(selection.start)).toEql(fixPos(selection.end));\n            expect(fixPos(selection.start)).toEql(fixPos(pos));\n        }\n\n        // Helper function to\n        // a) ensure the hintList and the list with the available values have the same size\n        // b) ensure that all possible values are mentioned in the hintList\n        function verifyAllValues(hintList, values) {\n            expect(hintList.length).toBe(values.length);\n            expect(hintList.sort().toString()).toBe(values.sort().toString());\n        }\n\n        describe(\"CSS properties in general (selection of correct property based on input)\", function () {\n\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-name hints right after curly bracket\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 11 });    // after {\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints in new line\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 1 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints starting with 'b' in new line\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 2 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"background-color\");  // filtered on \"b\" ,\n                // background color should come at top as its boosted for UX\n            });\n\n            it(\"should list all prop-name hints starting with 'bord' \", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border\");  // filtered on \"bord\"\n            });\n\n            it(\"should list all prop-name hints starting with 'border-' \", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 7, ch: 5 });\n\n                testEditor.setCursorPos({ line: 8, ch: 8 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-radius\");  // filtered on \"border-\"\n            });\n\n            it(\"should list only prop-name hint border-color\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 8, ch: 8 });\n\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider); // filtered on \"border-colo\"\n                verifyAttrHints(hintList, \"border-color\");  // filtered on \"border-color\"\n                expect(hintList.length).toBe(17);\n                expect(hintList[0]).toBe(\"border-color\");\n                expect(hintList[1]).toBe(\"border-collapse: collapse;\"); // due to \"border-colo\" matches in split segment\n            });\n\n            it(\"should list prop-name hints at end of property-value finished by ;\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });    // after ;\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should NOT list prop-name hints right before curly bracket\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 10 });    // inside .selector, before {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints after declaration of mediatype\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 15 });    // after {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints if previous property is not closed properly\", function () {\n                testEditor.setCursorPos({ line: 16, ch: 6 });   // cursor directly after color\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n            it(\"should NOT list prop-name hints in media type declaration\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 1 });\n                expect(CSSCodeHints.cssPropHintProvider.hasHints(testEditor, 'm')).toBe(false);\n            });\n        });\n\n        describe(\"CSS property hint insertion\", function () {\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should insert colon prop-name selected\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });   // cursor after 'bord'\n                selectHint(CSSCodeHints.cssPropHintProvider, \"border\");\n                expect(testDocument.getLine(7)).toBe(\" border: \");\n                expectCursorAt({ line: 7, ch: 9 });\n            });\n\n            it(\"should not insert semicolon after prop-value selected\", function () {\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n                testEditor.setCursorPos({ line: 13, ch: 10 });   // cursor after 'display: '\n                selectHint(CSSCodeHints.cssPropHintProvider, \"block\");\n                expect(testDocument.getLine(13)).toBe(\" display: block\");\n            });\n\n            it(\"should insert full prop-value hint\", function () {\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n                testEditor.setCursorPos({ line: 13, ch: 5 });   // cursor after 'display: '\n                selectHint(CSSCodeHints.cssPropHintProvider, \"display: block;\");\n                expect(testDocument.getLine(13)).toBe(\" display: block;: \"); // the : comes from existing location\n            });\n\n            it(\"should insert prop-name directly after semicolon\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });   // cursor after red;\n                selectHint(CSSCodeHints.cssPropHintProvider, \"display\");\n                expect(testDocument.getLine(10)).toBe(\" border-color: red;display: \");\n            });\n\n            it(\"should insert nothing but the closure(semicolon) if prop-value is fully written\", function () {\n                testDocument.replaceRange(\";\", { line: 15, ch: 13 }); // insert text ;\n                testEditor.setCursorPos({ line: 16, ch: 6 });   // cursor directly after color\n                selectHint(CSSCodeHints.cssPropHintProvider, \"color\");\n                expect(testDocument.getLine(16)).toBe(\" color: \");\n                expectCursorAt({ line: 16, ch: 8 });\n            });\n\n            it(\"should insert prop-name before an existing one\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 1 });   // cursor before border-color:\n                selectHint(CSSCodeHints.cssPropHintProvider, \"margin\");\n                expect(testDocument.getLine(10)).toBe(\" margin:  border-color: red;\");\n                expectCursorAt({ line: 10, ch: 9 });\n            });\n\n            it(\"should insert prop-name before an existing one when invoked with an implicit character\", function () {\n                testDocument.replaceRange(\"f\", { line: 10, ch: 1 }); // insert \"f\" before border-color:\n                testEditor.setCursorPos({ line: 10, ch: 2 });        // set cursor before border-color:\n                selectHint(CSSCodeHints.cssPropHintProvider, \"float\", \"f\");\n                expect(testDocument.getLine(10)).toBe(\" float:  border-color: red;\");\n                expectCursorAt({ line: 10, ch: 8 });\n            });\n\n            it(\"should replace the existing prop-value with the new selection\", function () {\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n                testDocument.replaceRange(\"block\", { line: 13, ch: 10 });\n                testEditor.setCursorPos({ line: 13, ch: 10 });   // cursor before block\n                selectHint(CSSCodeHints.cssPropHintProvider, \"none\");\n                expect(testDocument.getLine(13)).toBe(\" display: none\");\n                expectCursorAt({ line: 13, ch: 14 });\n            });\n        });\n\n        describe(\"CSS prop-value hints\", function () {\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-values for 'display' after colon\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n\n                testEditor.setCursorPos({ line: 13, ch: 9 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"block\");  // filtered after \"display:\"\n            });\n\n            it(\"should list all prop-values for 'display' after colon and whitespace\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n\n                testEditor.setCursorPos({ line: 13, ch: 10 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"block\");  // filtered after \"display: \"\n            });\n\n            it(\"should list all prop-values starting with 'in' for 'display' after colon and whitespace\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 13, ch: 10 });\n\n                testEditor.setCursorPos({ line: 14, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"inline\");  // filtered after \"display: in\"\n            });\n\n            it(\"should NOT list prop-value hints for unknown prop-name\", function () {\n                testEditor.setCursorPos({ line: 15, ch: 12 });  // at bordborder:\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n        describe(\"CSS hint provider inside mixed htmlfiles\", function () {\n            var defaultContent = \"<html> \\n\" +\n                                 \"<head><style>.selector{display: none;}</style></head> \\n\" +\n                                 \"<body> <style> \\n\" +\n                                 \" body { \\n\" +\n                                 \"    background-color: red; \\n\" +\n                                 \" \\n\" +\n                                 \"} \\n\" +\n                                 \"</style>\\n\" +\n                                 \"<div class='selector'></div>\\n\" +\n                                 \"<style> .foobar { \\n\" +\n                                 \" colo </style>\\n\" +\n                                 \"</body></html>\";\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"html\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list prop-name hints right after curly bracket\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 7 });  // inside body-selector, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside single-line styletags at start\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 23 });  // inside style, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside single-line styletags after semicolon\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 37 });  // inside style, after ;\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside multi-line styletags with cursor in first line\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 18 });   // inside style, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside multi-line styletags with cursor in last line\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 5 });    // inside style, after colo\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                expect(hintList.length).toBe(50);\n                expect(hintList[0]).toBe(\"color\");\n                expect(hintList[1]).toBe(\"color-adjust\");\n            });\n\n            it(\"should NOT list prop-name hints between closed styletag and new opening styletag\", function () {\n                testEditor.setCursorPos({ line: 8, ch: 0 });    // right before <div\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list hints right before curly bracket\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 6 });    // inside body-selector, before {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list hints inside head-tag\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 6 });    // between <head> and </head> {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n        describe(\"CSS Hint provider in style attribute value context for html mode\", function () {\n\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultHTMLContent, \"html\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-name hints right after the open quote for style value context\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 12 });    // after \"='\"\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints in new line for style value context\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 0 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints starting with 'b' in new line for style value context\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 2 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"background-color\");  // filtered on \"b\"\n            });\n\n            it(\"should list all prop-name hints starting with 'bord' for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border\");  // filtered on \"bord\"\n            });\n\n            it(\"should list all prop-name hints starting with 'border-' for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 7, ch: 5 });\n\n                testEditor.setCursorPos({ line: 8, ch: 8 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-radius\");  // filtered on \"border-\"\n            });\n\n            it(\"should list only prop-name hint border-color for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 8, ch: 8 });\n\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                expect(hintList.length).toBe(17);\n                expect(hintList[0]).toBe(\"border-color\");\n                expect(hintList[1]).toBe(\"border-collapse: collapse;\");\n            });\n\n            it(\"should list prop-name hints at end of property-value finished by ; for style value context\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });    // after ;\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"display\");  // filtered on \"empty string\"\n            });\n\n            it(\"should NOT list prop-name hints right before style value context\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 11 });    // after =\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints after style value context\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 20 });    // after \"'\"\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n\n        describe(\"CSS hint provider in other filecontext (e.g. javascript)\", function () {\n            var defaultContent = \"function foobar (args) { \\n \" +\n                                 \"    /* do sth */ \\n\" +\n                                 \"    return 1; \\n\" +\n                                 \"} \\n\";\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"javascript\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should NOT list hints after function declaration\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 24 });    // after {  after function declaration\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n        });\n\n        describe(\"CSS hint provider cursor placement inside value functions\", function () {\n            var defaultContent = \".selector { \\n\" + // line 0\n                                 \"shape-inside:\\n\" + // line 1\n                                 \"}\\n\"; // line 2\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should should place the cursor between the parens of the value function\", function () {\n                var expectedString = \"shape-inside:polygon()\";\n\n                testEditor.setCursorPos({ line: 1, ch: 15 });    // after shape-inside\n                expectHints(CSSCodeHints.cssPropHintProvider);\n                selectHint(CSSCodeHints.cssPropHintProvider, \"polygon()\");\n                expect(testDocument.getLine(1).length).toBe(expectedString.length);\n                expect(testDocument.getLine(1)).toBe(expectedString);\n                expectCursorAt({ line: 1, ch: expectedString.length - 1 });\n            });\n        });\n\n        describe(\"CSS hint provider for regions and exclusions\", function () {\n            var defaultContent = \".selector { \\n\" + // line 0\n                                 \" shape-inside: \\n;\" + // line 1\n                                 \" shape-outside: \\n;\" + // line 2\n                                 \" region-fragment: \\n;\" + // line 3\n                                 \" region-break-after: \\n;\" + // line 4\n                                 \" region-break-inside: \\n;\" + // line 5\n                                 \" region-break-before: \\n;\" + // line 6\n                                 \" -ms-region\\n;\" + // line 7\n                                 \" -webkit-region\\n;\" + // line 8\n                                 \" flow-from: \\n;\" + // line 9\n                                 \" flow-into: \\n;\" + // line 10\n                                 \"}\\n\"; // line 11\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list 7 value-name hints for shape-inside\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 15 });    // after shape-inside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\n                    \"auto\",\"calc()\",\"circle()\",\"ellipse()\",\"inherit\",\"initial\",\"outside-shape\",\"polygon()\",\n                    \"rectangle()\",\"unset\",\"var()\"\n                ]);\n            });\n\n            it(\"should list 36 value-name hints for shape-outside\", function () {\n                testEditor.setCursorPos({ line: 2, ch: 16 });    // after shape-outside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-box\");  // first hint should be border-box\n                verifyAllValues(hintList, [\n                    \"-moz-element()\",\n                    \"-moz-linear-gradient()\",\n                    \"-moz-radial-gradient()\",\n                    \"-moz-repeating-linear-gradient()\",\n                    \"-moz-repeating-radial-gradient()\",\n                    \"-o-linear-gradient()\",\n                    \"-o-repeating-linear-gradient()\",\n                    \"-webkit-gradient()\",\n                    \"-webkit-image-set()\",\n                    \"-webkit-linear-gradient()\",\n                    \"-webkit-radial-gradient()\",\n                    \"-webkit-repeating-linear-gradient()\",\n                    \"-webkit-repeating-radial-gradient()\",\n                    \"border-box\",\n                    \"calc()\",\n                    \"circle()\",\n                    \"content-box\",\n                    \"cross-fade()\",\n                    \"element()\",\n                    \"ellipse()\",\n                    \"image()\",\n                    \"image-set()\",\n                    \"inherit\",\n                    \"initial\",\n                    \"inset()\",\n                    \"linear-gradient()\",\n                    \"margin-box\",\n                    \"none\",\n                    \"padding-box\",\n                    \"polygon()\",\n                    \"radial-gradient()\",\n                    \"repeating-linear-gradient()\",\n                    \"repeating-radial-gradient()\",\n                    \"unset\",\n                    \"url()\",\n                    \"var()\"]\n                );\n            });\n\n            it(\"should list 2 value-name hints for region-fragment\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 18 });    // after region-fragment\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\n                    \"auto\",\n                    \"break\",\n                    \"calc()\",\n                    \"inherit\",\n                    \"initial\",\n                    \"unset\",\n                    \"var()\"\n                ]);\n            });\n\n            it(\"should list 11 value-name hints for region-break-after\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 21 });    // after region-break-after\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"always\");  // first hint should be always\n                verifyAllValues(hintList, [\n                    \"always\",\n                    \"auto\",\n                    \"avoid\",\n                    \"avoid-column\",\n                    \"avoid-page\",\n                    \"avoid-region\",\n                    \"calc()\",\n                    \"column\",\n                    \"inherit\",\n                    \"initial\",\n                    \"left\",\n                    \"page\",\n                    \"region\",\n                    \"right\",\n                    \"unset\",\n                    \"var()\"\n                ]);\n            });\n\n            it(\"should list 5 value-name hints for region-break-inside\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 22 });    // after region-break-inside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\n                    \"auto\",\n                    \"avoid\",\n                    \"avoid-column\",\n                    \"avoid-page\",\n                    \"avoid-region\",\n                    \"calc()\",\n                    \"inherit\",\n                    \"initial\",\n                    \"unset\",\n                    \"var()\"\n                ]);\n            });\n\n            it(\"should list 11 value-name hints for region-break-before\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 23 });    // after region-break-before\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"always\");  // first hint should be always\n                verifyAllValues(hintList, [\n                    \"always\",\n                    \"auto\",\n                    \"avoid\",\n                    \"avoid-column\",\n                    \"avoid-page\",\n                    \"avoid-region\",\n                    \"calc()\",\n                    \"column\",\n                    \"inherit\",\n                    \"initial\",\n                    \"left\",\n                    \"page\",\n                    \"region\",\n                    \"right\",\n                    \"unset\",\n                    \"var()\"\n                ]);\n            });\n        });\n\n        describe(\"Color names and swatches in a CSS file\", function () {\n            beforeEach(function () {\n                setupTest(testContentCSS, \"css\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should list color names for color\", function () {\n                testEditor.setCursorPos({ line: 98, ch: 11 }); // after color\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"aliceblue\"); // first hint should be aliceblue\n            });\n\n            it(\"should show color swatches for background-color\", function () {\n                testEditor.setCursorPos({ line: 99, ch: 22 }); // after background-color\n                var hints = expectHints(CSSCodeHints.cssPropHintProvider, undefined, true).hints;\n                expect(hints[0].text()).toBe(\"aliceblue\"); // first hint should be aliceblue\n                expect(hints[0].find(\".color-swatch\").length).toBe(1);\n                // CEF 2623 will output \"aliceblue\" whereas earlier versions give \"rgb(240, 248, 255)\",\n                // so we need this ugly hack to make sure this test passes on both\n                expect(hints[0].find(\".color-swatch\").css(\"backgroundColor\")).toMatch(/^rgb\\(240, 248, 255\\)$|aliceblue/);\n            });\n\n            it(\"should filter out color names appropriately\", function () {\n                testEditor.setCursorPos({ line: 100, ch: 27 }); // after border-left-color\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"deeppink\"); // first hint should be deeppink\n                verifyAllValues(hintList, [\"deeppink\", \"deepskyblue\"]);\n            });\n\n            it(\"should always include transparent and currentColor and they should not have a swatch, but class no-swatch-margin\", function () {\n                testEditor.setCursorPos({ line: 101, ch: 22 }); // after border-color\n                var hints = expectHints(CSSCodeHints.cssPropHintProvider, undefined, true).hints,\n                    hintList = extractHintList(hints);\n                verifyAttrHints(hintList, \"currentColor\"); // first hint should be currentColor\n                verifyAllValues(hintList, [\"currentColor\", \"transparent\"]);\n                expect(hints[0].find(\".color-swatch\").length).toBe(0); // no swatch for currentColor\n                expect(hints[1].find(\".color-swatch\").length).toBe(0); // no swatch for transparent\n                expect(hints[0].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to currentColor\n                expect(hints[1].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to transparent\n            });\n\n            it(\"should insert color names correctly\", function () {\n                var expectedString  = \"    border-left-color: deeppink;\",\n                    line            = 100;\n\n                testEditor.setCursorPos({ line: line, ch: 27 }); // after border-left-color\n                expectHints(CSSCodeHints.cssPropHintProvider);\n                selectHint(CSSCodeHints.cssPropHintProvider, \"deeppink\");\n                expect(testDocument.getLine(line).length).toBe(expectedString.length);\n                expect(testDocument.getLine(line)).toBe(expectedString);\n                expectCursorAt({ line: line, ch: expectedString.length - 1 });\n            });\n\n\n            it(\"should not display color names for unrelated properties\", function () {\n                testEditor.setCursorPos({ line: 102, ch: 12 }); // after height\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                expect(hintList.indexOf(\"aliceblue\")).toBe(-1);\n            });\n        });\n\n        describe(\"Should not invoke CSS hints on space key\", function () {\n            beforeEach(function () {\n                setupTest(testContentHTML, \"html\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should not trigger CSS property name hints with space key\", function () {\n                testEditor.setCursorPos({ line: 25, ch: 11 });    // after {\n                expectNoHints(CSSCodeHints.cssPropHintProvider, \" \");\n            });\n\n            it(\"should not trigger CSS property value hints with space key\", function () {\n                testEditor.setCursorPos({ line: 28, ch: 21 });    // after flow-from\n                expectNoHints(CSSCodeHints.cssPropHintProvider, \" \");\n            });\n        });\n    });\n});\n\n"],"file":"unittests.js"}