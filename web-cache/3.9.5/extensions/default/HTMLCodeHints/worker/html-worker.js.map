{"version":3,"sources":["extensions/default/HTMLCodeHints/worker/html-worker.js"],"names":["htmlValidator","HTMLLanguageService","createHTMLValidator","extends","WorkerComm","triggerPeer","isUsingCustomConfig","currentConfigID","setupValidator","config","configID","e","message","async","htmlLint","params","errorMessage","start","end","severity","ruleId","validatorResult","validateString","text","filePath","results","length","errors","result","messages","push","offset","size","ruleUrl","updateHTMLLintConfig","console","error","setExecHandler"],"mappings":"CAsBC,WACG,IAAIA,cAAgBC,oBAAoBC,oBAAoB,CACxDC,QAAS,CAAC,4BAEdC,WAAWC,YAAY,6BAA8B,IAErD,IAAIC,qBAAsB,EAAOC,gBAEjC,SAASC,eAAeC,OAAQC,UAC5B,IAaI,OAZID,QAAUH,qBAEVN,cAAgBC,oBAAoBC,oBAAoB,CACpDC,QAAS,CAAC,4BAEdG,qBAAsB,EACtBC,gBAAkB,MACZE,QAAUF,kBAAoBG,WACpCV,cAAgBC,oBAAoBC,oBAAoBO,QACxDH,qBAAsB,EACtBC,gBAAkBG,UAEf,KACT,MAAOC,GACL,OAAOA,EAAEC,SAIjBC,eAAeC,SAASC,QACpB,IAAIC,aAAeR,eAAeO,OAAON,OAAQM,OAAOL,UACxD,GAAGM,aACC,MAAO,CAAC,CACJC,MAAO,EACPC,IAAK,EACLC,SAAU,EACVP,QAAS,2CAA4CI,aACrDI,OAAQ,mBAGhB,MAAMC,sBAAwBrB,cAAcsB,eAAeP,OAAOQ,KAAMR,OAAOS,UAC/E,IAAIH,kBAAoBA,gBAAgBI,UAAYJ,gBAAgBI,QAAQC,OACxE,MAAO,GAEX,MAAMC,OAAS,GACf,IAAI,IAAIC,UAAUP,gBAAgBI,QAC9B,GAAGG,OAAOC,UAAYD,OAAOC,SAASH,OAClC,IAAI,IAAId,WAAWgB,OAAOC,SACtBF,OAAOG,KAAK,CACRb,MAAOL,QAAQmB,OACfb,IAAKN,QAAQmB,QAAUnB,QAAQoB,MAAQ,GAAK,EAC5Cb,SAAUP,QAAQO,SAClBP,QAASA,QAAQA,QACjBQ,OAAQR,QAAQQ,OAChBa,QAASrB,QAAQqB,UAMjC,OAAON,OAGXd,eAAeqB,qBAAqBnB,QAC7BA,OAAON,OACN0B,QAAQC,MAAM,6DAA8DrB,QAGhFf,cAAgBC,oBAAoBC,oBAAoBa,OAAON,QAGnEL,WAAWiC,eAAe,WAAYvB,UACtCV,WAAWiC,eAAe,uBAAwBH,sBAvEtD","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global WorkerComm, HTMLLanguageService*/\n\n(function () {\n    let htmlValidator = HTMLLanguageService.createHTMLValidator({\n        extends: [\"html-validate:standard\"]\n    });\n    WorkerComm.triggerPeer(\"html_lint_extension_Loaded\", {});\n\n    let isUsingCustomConfig = false, currentConfigID;\n\n    function setupValidator(config, configID) {\n        try{\n            if(!config && isUsingCustomConfig) {\n                // reset the config\n                htmlValidator = HTMLLanguageService.createHTMLValidator({\n                    extends: [\"html-validate:standard\"]\n                });\n                isUsingCustomConfig = false;\n                currentConfigID = null;\n            } else if(config && currentConfigID !== configID) {\n                htmlValidator = HTMLLanguageService.createHTMLValidator(config);\n                isUsingCustomConfig = true;\n                currentConfigID = configID;\n            }\n            return null;\n        } catch (e) {\n            return e.message;\n        }\n    }\n\n    async function htmlLint(params) {\n        let errorMessage = setupValidator(params.config, params.configID);\n        if(errorMessage) {\n            return [{\n                start: 0,\n                end: 0,\n                severity: 2, // 1 warning and 2 is error\n                message: \"Invalid config file `.htmlvalidate.json`\"+ errorMessage,\n                ruleId: \"INVALID_CONFIG\"\n            }];\n        }\n        const validatorResult = await htmlValidator.validateString(params.text, params.filePath);\n        if(!validatorResult || !validatorResult.results || !validatorResult.results.length){\n            return [];\n        }\n        const errors = [];\n        for(let result of validatorResult.results){\n            if(result.messages && result.messages.length) {\n                for(let message of result.messages){\n                    errors.push({\n                        start: message.offset,\n                        end: message.offset + (message.size || 1) - 1,\n                        severity: message.severity,\n                        message: message.message,\n                        ruleId: message.ruleId,\n                        ruleUrl: message.ruleUrl // this is a doc link for the ruleId config, not good to show\n                        // to a user who doesnt know about html validator config is.\n                    });\n                }\n            }\n        }\n        return errors;\n    }\n\n    async function updateHTMLLintConfig(params) {\n        if(params.config){\n            console.error(\"HTML Lint worker updateHTMLLintConfig received null config\", params);\n            return;\n        }\n        htmlValidator = HTMLLanguageService.createHTMLValidator(params.config);\n    }\n\n    WorkerComm.setExecHandler(\"htmlLint\", htmlLint);\n    WorkerComm.setExecHandler(\"updateHTMLLintConfig\", updateHTMLLintConfig);\n}());\n"],"file":"html-worker.js"}