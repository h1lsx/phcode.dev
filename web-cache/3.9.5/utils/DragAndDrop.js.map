{"version":3,"sources":["utils/DragAndDrop.js"],"names":["define","require","exports","module","Async","CommandManager","Commands","Dialogs","DefaultDialogs","MainViewManager","FileSystem","PreferencesManager","FileUtils","ProjectManager","Strings","Metrics","StringUtils","_PREF_DRAG_AND_DROP","isValidDrop","items","i","len","length","kind","entry","webkitGetAsEntry","isFile","stopURIListPropagation","files","event","types","dataTransfer","forEach","value","stopPropagation","preventDefault","openDroppedFiles","paths","errorFiles","ERR_MULTIPLE_ITEMS_WITH_DIR","doInParallel","path","idx","result","$","Deferred","resolve","err","item","findInWorkingSet","ALL_PANES","countEvent","EVENT_TYPE","PLATFORM","execute","CMD_ADD_TO_WORKINGSET_AND_OPEN","fullPath","silent","done","fail","openErr","push","error","reject","isDirectory","openProject","promise","errorToString","ERROR_MIXED_DRAGDROP","getFileErrorString","message","ERROR_OPENING_FILES","info","breakableUrl","getProjectRelativeOrDisplayPath","showModalDialog","DIALOG_ID_ERROR","ERROR_OPENING_FILE_TITLE","async","_focusAndOpenDroppedFiles","droppedPaths","currentWindow","window","__TAURI__","getCurrent","setAlwaysOnTop","e","console","_computeNewPositionAndSizeWebkit","newSize","innerSize","newPosition","innerPosition","_computeNewPositionAndSizeWindows","_computeNewPositionAndSize","Phoenix","platform","showAndResizeFileDropWindow","$activeElement","fileDropWindow","WebviewWindow","getByLabel","has","target","hide","currentSize","currentPosition","isSameSize","width","height","isSamePosition","x","y","emit","projectName","basename","getProjectRoot","dropMessage","DROP_TO_OPEN_FILES","dropMessageOneFile","DROP_TO_OPEN_FILE","dropProjectMessage","DROP_TO_OPEN_PROJECT","windowLabelOfListener","appWindow","label","isVisible","setSize","setPosition","show","attachHandlers","handleDragOver","originalEvent","get","includes","dropEffect","handleDrop","brackets","app","getDroppedFiles","document","body","on","addEventListener","closest","definePreference","isNativeApp","description","DESCRIPTION_DRAG_AND_DROP_ENABLED","listen","payload","pathList","droppedVirtualPaths","droppedPath","fs","getTauriVirtualPath","register","CMD_OPEN_DROPPED_FILES","FILE_OPEN_DROPPED_FILES"],"mappings":"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","sourcesContent":[" /*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    const Async           = require(\"utils/Async\"),\n        CommandManager  = require(\"command/CommandManager\"),\n        Commands        = require(\"command/Commands\"),\n        Dialogs         = require(\"widgets/Dialogs\"),\n        DefaultDialogs  = require(\"widgets/DefaultDialogs\"),\n        MainViewManager = require(\"view/MainViewManager\"),\n        FileSystem      = require(\"filesystem/FileSystem\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        FileUtils       = require(\"file/FileUtils\"),\n        ProjectManager  = require(\"project/ProjectManager\"),\n        Strings         = require(\"strings\"),\n        Metrics = require(\"utils/Metrics\"),\n        StringUtils     = require(\"utils/StringUtils\");\n\n    const _PREF_DRAG_AND_DROP = \"dragAndDrop\"; // used in debug menu\n    PreferencesManager.definePreference(_PREF_DRAG_AND_DROP, \"boolean\",\n        Phoenix.isNativeApp && Phoenix.platform !== \"linux\", {description: Strings.DESCRIPTION_DRAG_AND_DROP_ENABLED}\n    );\n\n    /**\n     * Returns true if the drag and drop items contains valid drop objects.\n     * @param {Array.<DataTransferItem>} items Array of items being dragged\n     * @return {boolean} True if one or more items can be dropped.\n     */\n    function isValidDrop(items) {\n        var i, len = items.length;\n\n        for (i = 0; i < len; i++) {\n            if (items[i].kind === \"file\") {\n                var entry = items[i].webkitGetAsEntry();\n\n                if (entry.isFile) {\n                    // If any files are being dropped, this is a valid drop\n                    return true;\n                } else if (len === 1) {\n                    // If exactly one folder is being dropped, this is a valid drop\n                    return true;\n                }\n            }\n        }\n\n        // No valid entries found\n        return false;\n    }\n\n    /**\n     * Determines if the event contains a type list that has a URI-list.\n     * If it does and contains an empty file list, then what is being dropped is a URL.\n     * If that is true then we stop the event propagation and default behavior to save Brackets editor from the browser taking over.\n     * @param {Array.<File>} files Array of File objects from the event datastructure. URLs are the only drop item that would contain a URI-list.\n     * @param {event} event The event datastucture containing datatransfer information about the drag/drop event. Contains a type list which may or may not hold a URI-list depending on what was dragged/dropped. Interested if it does.\n     */\n    function stopURIListPropagation(files, event) {\n        var types = event.dataTransfer.types;\n\n        if ((!files || !files.length) && types) { // We only want to check if a string of text was dragged into the editor\n            types.forEach(function (value) {\n                //Dragging text externally (dragging text from another file): types has \"text/plain\" and \"text/html\"\n                //Dragging text internally (dragging text to another line): types has just \"text/plain\"\n                //Dragging a file: types has \"Files\"\n                //Dragging a url: types has \"text/plain\" and \"text/uri-list\" <-what we are interested in\n                if (value === \"text/uri-list\") {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    return;\n                }\n            });\n        }\n    }\n\n    /**\n     * Open dropped files\n     * @param {Array.<string>} files Array of files dropped on the application.\n     * @return {Promise} Promise that is resolved if all files are opened, or rejected\n     *     if there was an error.\n     */\n    function openDroppedFiles(paths) {\n        var errorFiles = [],\n            ERR_MULTIPLE_ITEMS_WITH_DIR = {};\n\n        return Async.doInParallel(paths, function (path, idx) {\n            var result = new $.Deferred();\n\n            // Only open files.\n            FileSystem.resolve(path, function (err, item) {\n                if (!err && item.isFile) {\n                    // If the file is already open, and this isn't the last\n                    // file in the list, return. If this *is* the last file,\n                    // always open it so it gets selected.\n                    if (idx < paths.length - 1) {\n                        if (MainViewManager.findInWorkingSet(MainViewManager.ALL_PANES, path) !== -1) {\n                            result.resolve();\n                            return;\n                        }\n                    }\n\n                    Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"dragAndDrop\", \"fileOpen\");\n                    CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN,\n                        {fullPath: path, silent: true})\n                        .done(function () {\n                            result.resolve();\n                        })\n                        .fail(function (openErr) {\n                            errorFiles.push({path: path, error: openErr});\n                            result.reject();\n                        });\n                } else if (!err && item.isDirectory && paths.length === 1) {\n                    // One folder was dropped, open it.\n                    Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"dragAndDrop\", \"projectOpen\");\n                    ProjectManager.openProject(path)\n                        .done(function () {\n                            result.resolve();\n                        })\n                        .fail(function () {\n                            // User was already notified of the error.\n                            result.reject();\n                        });\n                } else {\n                    errorFiles.push({path: path, error: err || ERR_MULTIPLE_ITEMS_WITH_DIR});\n                    result.reject();\n                }\n            });\n\n            return result.promise();\n        }, false)\n            .fail(function () {\n                function errorToString(err) {\n                    if (err === ERR_MULTIPLE_ITEMS_WITH_DIR) {\n                        return Strings.ERROR_MIXED_DRAGDROP;\n                    }\n                    return FileUtils.getFileErrorString(err);\n\n                }\n\n                if (errorFiles.length > 0) {\n                    var message = Strings.ERROR_OPENING_FILES;\n\n                    message += \"<ul class='dialog-list'>\";\n                    errorFiles.forEach(function (info) {\n                        message += \"<li><span class='dialog-filename'>\" +\n                            StringUtils.breakableUrl(ProjectManager.getProjectRelativeOrDisplayPath(info.path)) +\n                            \"</span> - \" + errorToString(info.error) +\n                            \"</li>\";\n                    });\n                    message += \"</ul>\";\n\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        Strings.ERROR_OPENING_FILE_TITLE,\n                        message\n                    );\n                }\n            });\n    }\n\n    async function _focusAndOpenDroppedFiles(droppedPaths) {\n        try{\n            const currentWindow = window.__TAURI__.window.getCurrent();\n            await currentWindow.setAlwaysOnTop(true);\n            await currentWindow.setAlwaysOnTop(false);\n        } catch (e) {\n            console.error(\"Error focusing window\");\n        }\n        openDroppedFiles(droppedPaths);\n    }\n\n    if(Phoenix.isNativeApp){\n        window.__TAURI__.event.listen('file-drop-event-phoenix', ({payload})=> {\n            if(!payload || !payload.pathList || !payload.pathList.length || !payload.windowLabelOfListener\n                || payload.windowLabelOfListener !== window.__TAURI__.window.appWindow.label){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"dragAndDrop\", \"any\");\n            const droppedVirtualPaths = [];\n            for(const droppedPath of payload.pathList) {\n                try{\n                    droppedVirtualPaths.push(window.fs.getTauriVirtualPath(droppedPath));\n                } catch (e) {\n                    console.error(\"Error resolving dropped path: \", droppedPath);\n                }\n            }\n            _focusAndOpenDroppedFiles(droppedVirtualPaths);\n        });\n    }\n\n    async function _computeNewPositionAndSizeWebkit() {\n        const currentWindow = window.__TAURI__.window.getCurrent();\n        const newSize = await currentWindow.innerSize();\n        const newPosition = await currentWindow.innerPosition();\n        // in mac we somehow get the top left of the window including the title bar even though we are calling the\n        // tauri innerPosition api. We earlier adjusted for a generally constant title bar height of mac that is 28px.\n        // But then is nome macs due to display scaling, it was not 28px all the time.\n        // so, we just draw over the entire window in mac alone.\n        return {newSize, newPosition};\n    }\n\n    async function _computeNewPositionAndSizeWindows() {\n        // Note that the drop window may be on different screens if multi window setup. in windows os, there can be\n        // of different scale factors like 1x and 1.5x on another monitor. Additionally, we may apply our own zoom\n        // settings. So its is always better to just use the tauri provided positions. the tauri api returned values\n        // will position the window to the correct monitor as well.\n        const currentWindow = window.__TAURI__.window.getCurrent();\n        const newSize = await currentWindow.innerSize();\n        const newPosition = await currentWindow.innerPosition();\n        return {newSize, newPosition};\n    }\n\n    async function _computeNewPositionAndSize() {\n        if(Phoenix.platform === \"win\") {\n            return _computeNewPositionAndSizeWindows();\n        }\n        return _computeNewPositionAndSizeWebkit();\n    }\n\n    async function showAndResizeFileDropWindow(event) {\n        let $activeElement;\n        const fileDropWindow = window.__TAURI__.window.WebviewWindow.getByLabel('fileDrop');\n        if($(\"#editor-holder\").has(event.target).length) {\n            $activeElement = $(\"#editor-holder\");\n        } else if($(\"#sidebar\").has(event.target).length) {\n            $activeElement = $(\"#sidebar\");\n        } else {\n            await fileDropWindow.hide();\n        }\n        if(!$activeElement){\n            return;\n        }\n\n        const {newSize, newPosition} = await _computeNewPositionAndSize();\n        const currentSize = await fileDropWindow.innerSize();\n        const currentPosition = await fileDropWindow.innerPosition();\n        const isSameSize = currentSize.width === newSize.width && currentSize.height === newSize.height;\n        const isSamePosition = currentPosition.x === newPosition.x && currentPosition.y === newPosition.y;\n        window.__TAURI__.event.emit(\"drop-attach-on-window\", {\n            projectName: window.path.basename(ProjectManager.getProjectRoot().fullPath),\n            dropMessage: Strings.DROP_TO_OPEN_FILES,\n            dropMessageOneFile: Strings.DROP_TO_OPEN_FILE,\n            dropProjectMessage: Strings.DROP_TO_OPEN_PROJECT,\n            windowLabelOfListener: window.__TAURI__.window.appWindow.label,\n            platform: Phoenix.platform\n        });\n        if (isSameSize && isSamePosition && (await fileDropWindow.isVisible())) {\n            return; // Do nothing if the window is already at the correct size and position and visible\n        }\n\n        // Resize the fileDrop window to match the current window\n        await fileDropWindow.setSize(newSize);\n        await fileDropWindow.setPosition(newPosition);\n\n        // Show the fileDrop window\n        await fileDropWindow.show();\n        await fileDropWindow.setAlwaysOnTop(true);\n        // the fileDropWindow window will always be on top as the window itslef has logic to dismiss itself if mouse\n        // exited it. Also, if we dont to that, in mac in some cases, the window will go to the background while\n        // dragging. So while this window is visible, this will alwyas be on top.\n    }\n\n    /**\n     * Attaches global drag & drop handlers to this window. This enables dropping files/folders to open them, and also\n     * protects the Brackets app from being replaced by the browser trying to load the dropped file in its place.\n     */\n    function attachHandlers() {\n\n        function handleDragOver(event) {\n            event = event.originalEvent || event;\n\n            var files = event.dataTransfer.files;\n\n            stopURIListPropagation(files, event);\n            if(PreferencesManager.get(_PREF_DRAG_AND_DROP) &&\n                event.dataTransfer.types && event.dataTransfer.types.includes(\"Files\")){\n                // in linux, there is a bug in ubuntu 24 where dropping a file will cause a ghost icon which only\n                // goes away on reboot. So we dont support drop files in linux for now.\n                showAndResizeFileDropWindow(event);\n            }\n\n            if (files && files.length) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                var dropEffect = \"none\";\n\n                // Don't allow drag-and-drop of files/folders when a modal dialog is showing.\n                if ($(\".modal.instance\").length === 0 && isValidDrop(event.dataTransfer.items)) {\n                    dropEffect = \"copy\";\n                }\n                event.dataTransfer.dropEffect = dropEffect;\n            }\n        }\n\n        function handleDrop(event) {\n            event = event.originalEvent || event;\n\n            const files = event.dataTransfer.files;\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"dragAndDrop\", \"any\");\n\n            stopURIListPropagation(files, event);\n\n            if (files && files.length) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                brackets.app.getDroppedFiles(function (err, paths) {\n                    if (!err) {\n                        openDroppedFiles(paths);\n                    }\n                });\n            }\n        }\n\n        // For most of the window, only respond if nothing more specific in the UI has already grabbed the event (e.g.\n        // the Extension Manager drop-to-install zone, or an extension with a drop-to-upload zone in its panel)\n        $(window.document.body)\n            .on(\"dragover\", handleDragOver)\n            .on(\"drop\", handleDrop);\n\n        // Over CodeMirror specifically, always pre-empt CodeMirror's drag event handling if files are being dragged - CM stops\n        // propagation on any drag event it sees, even when it's not a text drag/drop. But allow CM to handle all non-file drag\n        // events. See bug #10617.\n        window.document.body.addEventListener(\"dragover\", function (event) {\n            if ($(event.target).closest(\".CodeMirror\").length) {\n                handleDragOver(event);\n            }\n        }, true);\n        window.document.body.addEventListener(\"drop\", function (event) {\n            if ($(event.target).closest(\".CodeMirror\").length) {\n                handleDrop(event);\n            }\n        }, true);\n    }\n\n\n    CommandManager.register(Strings.CMD_OPEN_DROPPED_FILES, Commands.FILE_OPEN_DROPPED_FILES, openDroppedFiles);\n\n    // Export public API\n    exports.attachHandlers      = attachHandlers;\n    exports.isValidDrop         = isValidDrop;\n    exports.openDroppedFiles    = openDroppedFiles;\n\n    // private exports\n    exports._PREF_DRAG_AND_DROP = _PREF_DRAG_AND_DROP;\n});\n"],"file":"DragAndDrop.js"}