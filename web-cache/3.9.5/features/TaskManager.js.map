{"version":3,"sources":["features/TaskManager.js"],"names":["define","require","exports","module","Strings","EventDispatcher","StringUtils","taskList","STATUS_SUCCESS","STATUS_FAIL","STATUS_INCOMPLETE","SPINNER_FAIL","SPINNER_SUCCESS","SPINNER_NORMAL","SPINNER_HIDE_TIME","Phoenix","isTestWindow","currentSpinnerType","spinnerHideTimer","$spinner","legacyExtensionBusy","taskSelect","_showSpinnerIcon","spinnerType","clearTimeout","removeClass","addClass","setTimeout","hideSpinnerIcon","renderSpinnerIcon","showNormalSpinnerIfNone","unackSuccessTaskFound","task","Object","values","_spinnerIconAck","isFailed","isSucceeded","_onDropdownShown","_setTaskSelect","select","$","_renderItem","item","index","STATUSBAR_TASKS_UNKNOWN_EXTENSION_TASK","console","error","_$html","_title","_id","_message","eventListeners",".pause-icon",".play-icon",".retry-icon",".close-icon","iconClass","keys","find","click","evt","log","cbFn","_reRenderComponents","$html","_onSelect","el","selection","onSelect","_getDefaultTaskIDs","STATUSBAR_TASKS_HIDE_SPINNER","_showOrHideStatusBarIfNeeded","taskArray","length","push","items","refresh","closeDropdown","_renderProgressbar","_completedStatus","_percent","css","_renderPlayIcons","iconMap","showIconMessage","attr","text","_iconHTML","html","addNewTask","taskTitle","message","iconHTML","options","onPauseClick","onPlayClick","onStopClick","onRetryClick","progressPercent","noSpinnerNotification","Error","randomString","_showPauseIcon","_showPlayIcon","_showStopIcon","_showRestartIcon","_noSpinnerNotification","close","setIconHTML","setTitle","title","getTitle","setMessage","getMessage","show","setProgressPercent","percent","getProgressPercent","setFailed","setSucceeded","showStopIcon","tooltipMessage","STATUSBAR_TASKS_STOP","showPlayIcon","STATUSBAR_TASKS_PLAY","showPauseIcon","STATUSBAR_TASKS_PAUSE","showRestartIcon","STATUSBAR_TASKS_RESTART","hideStopIcon","hidePlayIcon","hidePauseIcon","hideRestartIcon","flashSpinnerForAttention","setSucceded","makeEventDispatcher","_setLegacyExtensionBusy","busy","window","TaskManager"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// @INCLUDE_IN_API_DOCS\n/**\n * TaskManager module deals with managing long running tasks in phcode. It handles the `Tasks` dropdown in the status\n * bar where the user can see all running tasks, monitor its progress and close/pause the execution of the task if\n * supported by the task.\n * @module features/TaskManager\n */\ndefine(function (require, exports, module) {\n    const Strings = require(\"strings\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        StringUtils = require(\"utils/StringUtils\");\n    const taskList = {};\n    const STATUS_SUCCESS = \"success\",\n        STATUS_FAIL =\"fail\",\n        STATUS_INCOMPLETE = \"incomplete\";\n    const SPINNER_FAIL = \"spinner-failure\",\n        SPINNER_SUCCESS = \"spinner-success\",\n        SPINNER_NORMAL = \"spinner-normal\";\n    const SPINNER_HIDE_TIME = Phoenix.isTestWindow? 5 : 3000; // for tests , we wait only 1 ms\n    let currentSpinnerType = null, spinnerHideTimer;\n    let $spinner;\n\n    /**\n     * This is used by legacy extensions that used StatusBar.showBusyIndicator and hide apis that are deprecated.\n     * here for legacy support.\n     * @private\n     * @type {boolean}\n     */\n    let legacyExtensionBusy = false;\n\n    let taskSelect;\n\n    function _showSpinnerIcon(spinnerType) {\n        // we only show the icon for a few seconds to be less distracting except if the persist option is specified\n        // the persist option is now used only for errors and success tasks that has not been removed from the task\n        // manager list(which usually happens if there is some user action needed). Even then on click the spinner will\n        // be hidden again.\n        if(spinnerType === SPINNER_FAIL) {\n            clearTimeout(spinnerHideTimer);\n            $spinner.removeClass(\"forced-hidden\");\n            $spinner.removeClass(SPINNER_SUCCESS);\n            $spinner.addClass(SPINNER_FAIL);\n            currentSpinnerType = SPINNER_FAIL;\n            return;\n        }\n        if(spinnerType === SPINNER_SUCCESS) {\n            clearTimeout(spinnerHideTimer);\n            $spinner.removeClass(\"forced-hidden\");\n            $spinner.removeClass(SPINNER_FAIL);\n            $spinner.addClass(SPINNER_SUCCESS);\n            currentSpinnerType = SPINNER_SUCCESS;\n            return;\n        }\n        if(spinnerType === SPINNER_NORMAL) {\n            clearTimeout(spinnerHideTimer);\n            $spinner.removeClass(\"forced-hidden\");\n            $spinner.removeClass(SPINNER_FAIL);\n            $spinner.removeClass(SPINNER_SUCCESS);\n            spinnerHideTimer = setTimeout(hideSpinnerIcon, SPINNER_HIDE_TIME);\n            currentSpinnerType = SPINNER_NORMAL;\n        }\n    }\n\n    function hideSpinnerIcon() {\n        clearTimeout(spinnerHideTimer);\n        currentSpinnerType = null;\n        $spinner.addClass(\"forced-hidden\");\n        $spinner.removeClass(SPINNER_FAIL);\n        $spinner.removeClass(SPINNER_SUCCESS);\n    }\n\n    /**\n     * determines what the spinner icon to show(green-for success), red-fail, blue normal based on the active\n     * tasks in list and renders. IF the active tasks has already  been notified, it wont notify again.\n     */\n    function renderSpinnerIcon(showNormalSpinnerIfNone) {\n        let unackSuccessTaskFound = false;\n        if(currentSpinnerType && currentSpinnerType !== SPINNER_NORMAL) {\n            // there is a success/fail spinner visible, clean it. For the normal spinner, it will be\n            // auto-cleaned by timer.\n            hideSpinnerIcon();\n        }\n        for(let task of Object.values(taskList)){\n            if(!task._spinnerIconAck && task.isFailed()){\n                _showSpinnerIcon(SPINNER_FAIL);\n                return;\n            }\n            if(!task._spinnerIconAck && task.isSucceeded()){\n                unackSuccessTaskFound = true;\n            }\n        }\n        if(unackSuccessTaskFound) {\n            _showSpinnerIcon(SPINNER_SUCCESS);\n            return;\n        }\n\n        // for normal spinner, we dont show anything as its only shown briefly till SPINNER_HIDE_TIME\n        // which was already handled, except when newTaskAdded\n        if(showNormalSpinnerIfNone) {\n            _showSpinnerIcon(SPINNER_NORMAL);\n        }\n    }\n\n    function _onDropdownShown() {\n        // the animating icon is a call to action that stops showing after a few seconds normally. On clicking the\n        // task dropdown, the user has checked the notifications and we can hide the distracting spinner.\n        for(let task of Object.values(taskList)){\n            task._spinnerIconAck = true;\n        }\n        hideSpinnerIcon();\n    }\n\n    function _setTaskSelect(select) {\n        taskSelect = select;\n        $spinner = $(\"#status-tasks .spinner\");\n        if(Phoenix.isTestWindow) {\n            exports.taskSelect = taskSelect;\n            exports.SPINNER_HIDE_TIME = SPINNER_HIDE_TIME;\n        }\n        hideSpinnerIcon();\n    }\n    function _renderItem(item, index) {\n        if(item === Strings.STATUSBAR_TASKS_UNKNOWN_EXTENSION_TASK){\n            return Strings.STATUSBAR_TASKS_UNKNOWN_EXTENSION_TASK;\n        }\n        if(!taskList[item]){\n            // This should never happen\n            console.error(\"Cannot render task item\", item);\n            return \"unknown\";\n        }\n        const task = taskList[item];\n        task._$html = $(`<div class=\"task-status-popup-item\">\n            <div class=\"task-icon\">\n                <i class=\"fa-solid fa-download\"></i>\n            </div>\n            <div class=\"status-container\">\n                <div class=\"task-heading\">\n                    <span class=\"task-title\">${task._title||task._id}</span>\n                </div>\n                <div class=\"progress-bar-container\">\n                    <div class=\"progress-bar-background\">\n                        <div\n                            class=\"progress progress-bar-foreground-pulse\"\n                            style=\"width: 100%\"></div>\n                    </div>\n                    <div class=\"pause-icon forced-hidden\" >\n                        <i class=\"fa-solid fa-circle-pause\"></i>\n                    </div>\n                    <div class=\"play-icon forced-hidden\" >\n                        <i class=\"fa-solid fa-circle-play\"></i>\n                    </div>\n                    <div class=\"retry-icon forced-hidden\">\n                        <i class=\"fa-solid fa-rotate\"></i>\n                    </div>\n                    <div class=\"close-icon forced-hidden\">\n                        <i class=\"fa-solid fa-circle-xmark\"></i>\n                    </div>\n                </div>\n                <div class=\"task-message\">${task._message||\"\"}</div>\n            </div>\n        </div>`);\n        const eventListeners= {\n            \".pause-icon\": \"onPauseClick\",\n            \".play-icon\": \"onPlayClick\",\n            \".retry-icon\": \"onRetryClick\",\n            \".close-icon\": \"onStopClick\"\n        };\n        for(let iconClass of Object.keys(eventListeners)){\n            task._$html.find(iconClass).click((evt)=>{\n                console.log(iconClass);\n                const cbFn = eventListeners[iconClass];\n                return task[cbFn] && task[cbFn](evt);\n            });\n        }\n        _reRenderComponents(task);\n        return {$html: task._$html};\n    }\n\n    function _onSelect(el, selection) {\n        if(selection===Strings.STATUSBAR_TASKS_UNKNOWN_EXTENSION_TASK){\n            return;\n        }\n        if(!taskList[selection]){\n            // This should never happen\n            console.error(\"Cannot select task item\", selection);\n            return;\n        }\n        const task = taskList[selection];\n        return task.onSelect && task.onSelect(el);\n    }\n\n    function _getDefaultTaskIDs() {\n        if(legacyExtensionBusy){\n            return [Strings.STATUSBAR_TASKS_UNKNOWN_EXTENSION_TASK, Strings.STATUSBAR_TASKS_HIDE_SPINNER];\n        }\n        return [Strings.STATUSBAR_TASKS_HIDE_SPINNER];\n    }\n\n    function _showOrHideStatusBarIfNeeded() {\n        const taskArray = Object.keys(taskList);\n        if(taskArray.length) {\n            taskArray.push(\"---\");\n        }\n        taskSelect.items = [...taskArray, ..._getDefaultTaskIDs()];\n        taskSelect.refresh();\n        if(Object.keys(taskList).length || legacyExtensionBusy){\n            $(\"#status-tasks\").removeClass('forced-hidden');\n        } else {\n            $(\"#status-tasks\").addClass('forced-hidden');\n            taskSelect.closeDropdown();\n        }\n    }\n\n    function _renderProgressbar(task) {\n        const $html = task._$html;\n        if(!task._$html){\n            return;\n        }\n        $html.find(\".progress\")\n            .removeClass(\"progress-bar-foreground\")\n            .removeClass(\"progress-bar-foreground-pulse\")\n            .removeClass(\"progress-bar-foreground-failure\")\n            .removeClass(\"progress-bar-foreground-success\");\n\n        if(task._completedStatus === STATUS_SUCCESS){\n            $html.find(\".progress\")\n                .addClass(\"progress-bar-foreground-success\")\n                .css('width', `100%`);\n            return;\n        }\n        if(task._completedStatus === STATUS_FAIL){\n            $html.find(\".progress\")\n                .addClass(\"progress-bar-foreground-failure\")\n                .css('width', `100%`);\n            return;\n        }\n        if(task._percent){\n            $html.find(\".progress\")\n                .addClass(\"progress-bar-foreground\")\n                .css('width', `${task._percent}%`);\n        } else {\n            $html.find(\".progress\")\n                .addClass(\"progress-bar-foreground-pulse\")\n                .css('width', `100%`);\n        }\n    }\n\n    function _renderPlayIcons(task) {\n        const $html = task._$html;\n        if(!task._$html){\n            return;\n        }\n        const iconMap = {\n            \".close-icon\": \"_showStopIcon\",\n            \".pause-icon\": \"_showPauseIcon\",\n            \".play-icon\": \"_showPlayIcon\",\n            \".retry-icon\": \"_showRestartIcon\"\n        };\n        for(let iconClass of Object.keys(iconMap)){\n            const showIconMessage = iconMap[iconClass];\n            if(task[showIconMessage]){\n                $html.find(iconClass)\n                    .removeClass('forced-hidden')\n                    .attr(\"title\", task[showIconMessage]);\n            } else {\n                $html.find(iconClass)\n                    .addClass('forced-hidden');\n            }\n        }\n    }\n\n    function _reRenderComponents(task) {\n        const $html = task._$html;\n        if(!task._$html){\n            return;\n        }\n        $html.find(\".task-title\").text(task._title||task._id);\n        $html.find(\".task-message\").text(task._message||\"\");\n        if(task._iconHTML) {\n            $html.find(\".task-icon\").html(task._iconHTML);\n        }\n        _renderProgressbar(task);\n        _renderPlayIcons(task);\n    }\n\n    /**\n     * @typedef {Object} TaskObject\n     * Methods for managing the task's state and UI representation in the TaskManager.\n     *\n     * @property {function(): void} show - Shows the task popup in the ui.\n     * @property {function(): void} close - Closes the task and removes it from the UI.\n     * @property {function(string): void} setTitle - Sets the task's title.\n     * @property {function(): string} getTitle - Returns the task's title.\n     * @property {function(string): void} setMessage - Sets the task's message.\n     * @property {function(): string} getMessage - Returns the task's message.\n     * @property {function(number): void} setProgressPercent - Sets the task's progress percentage.\n     * @property {function(): number} getProgressPercent - Returns the task's current progress percentage.\n     * @property {function(): void} setFailed - Marks the task as failed.\n     * @property {function(): boolean} isFailed - Returns true if the task is marked as failed.\n     * @property {function(): void} setSucceded - Marks the task as succeeded.\n     * @property {function(): boolean} isSucceded - Returns true if the task is marked as succeeded.\n     * @property {function(string): void} showStopIcon - Shows the stop icon with an optional tooltip message.\n     * @property {function(): void} hideStopIcon - Hides the stop icon.\n     * @property {function(string): void} showPlayIcon - Shows the play icon with an optional tooltip message.\n     * @property {function(): void} hidePlayIcon - Hides the play icon.\n     * @property {function(string): void} showPauseIcon - Shows the pause icon with an optional tooltip message.\n     * @property {function(): void} hidePauseIcon - Hides the pause icon.\n     * @property {function(string): void} showRestartIcon - Shows the restart (retry) icon with an optional tooltip message.\n     * @property {function(): void} hideRestartIcon - Hides the restart (retry) icon.\n     * @property {function(): void} flashSpinnerForAttention - briefly flashes the task spinner icon for attention.\n     */\n\n    /**\n     * The addNewTask is designed for adding new tasks to the task management system. This function is central to\n     * managing long-running tasks, providing a way to visually represent task progress, status, and control actions\n     * directly from the UI in the status bar.\n     *\n     * @param {string} taskTitle - The title of the task. This is a mandatory parameter and is displayed in the UI.\n     * @param {string} message - A message or status associated with the task. Displayed as additional information in the UI.\n     * @param {string} [iconHTML] - Optional HTML string for the task's icon. Used to visually represent the task in the UI.\n     * @param {Object} [options] - Optional settings and callbacks for the task.\n     * @param {Function} [options.onPauseClick] - Callback function triggered when the pause button is clicked.\n     * @param {Function} [options.onPlayClick] - Callback function triggered when the play button is clicked.\n     * @param {Function} [options.onStopClick] - Callback function triggered when the stop button is clicked.\n     * @param {Function} [options.onRetryClick] - Callback function triggered when the retry button is clicked.\n     * @param {Function} [options.onSelect] - Callback function triggered when the task is selected from the dropdown.\n     * @param {number} [options.progressPercent] - Initial progress percentage of the task.\n     * @param {boolean} [options.noSpinnerNotification] - If set to true, will not show the task spinners for this task.\n     *         This can be used for silent background tasks where user attention is not needed.\n     * @returns {TaskObject} Returns a task object with methods for updating the task's state and UI representation,\n     * such as `setProgressPercent`, `setMessage`, `setSucceeded`, `setFailed`, and control visibility methods\n     * like `showStopIcon`, `hideStopIcon`, etc.\n     *\n     * @example\n     * // Example: Adding a new task with initial progress and attaching event handlers\n     * const task = TaskManager.addNewTask(\n     *   'Data Processing',\n     *   'Processing data...',\n     *   '<i class=\"fa fa-spinner fa-spin\"></i>',\n     *   {\n     *     onPauseClick: () => console.log('Task paused'),\n     *     onPlayClick: () => console.log('Task resumed'),\n     *     onStopClick: () => console.log('Task stopped'),\n     *     onRetryClick: () => console.log('Task retried'),\n     *     onSelect: () => console.log('Task selected'),\n     *     progressPercent: 20\n     *   }\n     * );\n     *\n     * // Updating task progress\n     * task.setProgressPercent(60);\n     *\n     * // Updating task message\n     * task.setMessage('60% completed');\n     *\n     * // Marking task as succeeded\n     * task.setSucceeded();\n     */\n    function addNewTask(taskTitle, message, iconHTML=null, options = {\n        onPauseClick: null,\n        onPlayClick: null,\n        onStopClick: null,\n        onRetryClick: null,\n        onSelect: null,\n        progressPercent: null,\n        noSpinnerNotification: false\n    }) {\n        if(!taskTitle){\n            throw new Error(\"taskTitle is required to call addNewTask\");\n        }\n        const task = {\n            _id: `${taskTitle}-${StringUtils.randomString(10)}`,\n            _title: taskTitle,\n            _message: message,\n            _showPauseIcon: null,\n            _showPlayIcon: null,\n            _showStopIcon: null,\n            _showRestartIcon: null,\n            onPauseClick: options && options.onPauseClick,\n            onPlayClick: options && options.onPlayClick,\n            onStopClick: options && options.onStopClick,\n            onRetryClick: options && options.onRetryClick,\n            onSelect: options && options.onSelect,\n            _percent: options && options.progressPercent,\n            _completedStatus: STATUS_INCOMPLETE,\n            _iconHTML: iconHTML,\n            _noSpinnerNotification: options && options.noSpinnerNotification,\n            _spinnerIconAck: options ? !!options.noSpinnerNotification : false\n            // Spinner ack is set when the user has seen the spinner icon spinning and clicked to see\n            // weather the task succeeded or failed. Some tasks may want to be silent by setting noSpinnerNotification.\n        };\n        function close() {\n            delete taskList[task._id];\n            _showOrHideStatusBarIfNeeded();\n            renderSpinnerIcon();\n        }\n\n        function setIconHTML(html) {\n            task._iconHTML = html;\n            if(task._$html){\n                task._$html.find(\".task-icon\").html(task._iconHTML);\n            }\n        }\n        function setTitle(title) {\n            task._title = title;\n            if(task._$html){\n                task._$html.find(\".task-title\").text(task._title||task._id);\n            }\n        }\n        function getTitle() {\n            return task._title;\n        }\n        function setMessage(_message) {\n            task._message = _message;\n            if(task._$html){\n                task._$html.find(\".task-message\").text(task._message||\"\");\n            }\n        }\n        function getMessage() {\n            return task._message;\n        }\n\n        function show() {\n            $(\"#status-tasks .btn-dropdown\").click();\n        }\n\n        function setProgressPercent(percent) {\n            task._percent = percent;\n            task._completedStatus = STATUS_INCOMPLETE;\n            _renderProgressbar(task);\n            task._spinnerIconAck= true; // when progress changes, there is no notification visual in status bar.\n            renderSpinnerIcon();\n        }\n        function getProgressPercent() {\n            return task._percent;\n        }\n\n        function setFailed(){\n            task._completedStatus = STATUS_FAIL;\n            _renderProgressbar(task);\n            if(!task._noSpinnerNotification){\n                task._spinnerIconAck= false;\n            }\n            renderSpinnerIcon();\n        }\n        function isFailed(){\n            return task._completedStatus === STATUS_FAIL;\n        }\n        function setSucceeded(){\n            task._completedStatus = STATUS_SUCCESS;\n            _renderProgressbar(task);\n            if(!task._noSpinnerNotification){\n                task._spinnerIconAck= false;\n            }\n            renderSpinnerIcon();\n        }\n        function isSucceeded(){\n            return task._completedStatus === STATUS_SUCCESS;\n        }\n\n        function showStopIcon(tooltipMessage) {\n            task._showStopIcon = tooltipMessage || Strings.STATUSBAR_TASKS_STOP;\n            _renderPlayIcons(task);\n        }\n        function showPlayIcon(tooltipMessage) {\n            task._showPlayIcon = tooltipMessage || Strings.STATUSBAR_TASKS_PLAY;\n            _renderPlayIcons(task);\n        }\n        function showPauseIcon(tooltipMessage) {\n            task._showPauseIcon = tooltipMessage || Strings.STATUSBAR_TASKS_PAUSE;\n            _renderPlayIcons(task);\n        }\n        function showRestartIcon(tooltipMessage) {\n            task._showRestartIcon = tooltipMessage || Strings.STATUSBAR_TASKS_RESTART;\n            _renderPlayIcons(task);\n        }\n        function hideStopIcon() {\n            task._showStopIcon = null;\n            _renderPlayIcons(task);\n        }\n        function hidePlayIcon() {\n            task._showPlayIcon = null;\n            _renderPlayIcons(task);\n        }\n        function hidePauseIcon() {\n            task._showPauseIcon = null;\n            _renderPlayIcons(task);\n        }\n        function hideRestartIcon() {\n            task._showRestartIcon = null;\n            _renderPlayIcons(task);\n        }\n        function flashSpinnerForAttention() {\n            renderSpinnerIcon(true);\n        }\n\n        task.show = show;\n        task.close = close;\n        task.setTitle = setTitle;\n        task.getTitle = getTitle;\n        task.setMessage = setMessage;\n        task.getMessage = getMessage;\n        task.setSucceded = setSucceeded;\n        task.isSucceeded = isSucceeded;\n        task.setFailed = setFailed;\n        task.isFailed = isFailed;\n        task.setProgressPercent = setProgressPercent;\n        task.getProgressPercent = getProgressPercent;\n        task.setIconHTML = setIconHTML;\n        task.showStopIcon = showStopIcon;\n        task.hideStopIcon = hideStopIcon;\n        task.showPlayIcon = showPlayIcon;\n        task.hidePlayIcon = hidePlayIcon;\n        task.showPauseIcon = showPauseIcon;\n        task.hidePauseIcon = hidePauseIcon;\n        task.showRestartIcon = showRestartIcon;\n        task.hideRestartIcon = hideRestartIcon;\n        task.flashSpinnerForAttention = flashSpinnerForAttention;\n        taskList[task._id] = task;\n        EventDispatcher.makeEventDispatcher(task);\n        _showOrHideStatusBarIfNeeded();\n        if(!task._noSpinnerNotification){\n            renderSpinnerIcon(true);\n        } else {\n            renderSpinnerIcon();\n        }\n        return task;\n    }\n\n    function _setLegacyExtensionBusy(busy) {\n        legacyExtensionBusy = busy;\n        if(busy){\n            renderSpinnerIcon(true);\n        } else {\n            renderSpinnerIcon();\n        }\n        _showOrHideStatusBarIfNeeded();\n    }\n\n    // private apis\n    exports._setTaskSelect = _setTaskSelect;\n    exports._onDropdownShown = _onDropdownShown;\n    exports._renderItem = _renderItem;\n    exports._onSelect = _onSelect;\n    exports._setLegacyExtensionBusy = _setLegacyExtensionBusy;\n\n    window.TaskManager = exports;\n    // public apis\n    exports.addNewTask = addNewTask;\n});\n"],"file":"TaskManager.js"}