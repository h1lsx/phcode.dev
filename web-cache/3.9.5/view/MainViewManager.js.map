{"version":3,"sources":["view/MainViewManager.js"],"names":["define","require","exports","module","_","EventDispatcher","Strings","AppInit","CommandManager","MainViewFactory","ViewStateManager","Commands","EditorManager","FileSystemError","DocumentManager","PreferencesManager","ProjectManager","WorkspaceManager","AsyncUtils","ViewUtils","Resizer","Pane","KeyBindingManager","brackets","getModule","EVENT_CURRENT_FILE_CHANGE","PREFS_NAME","OLD_PREFS_NAME","ALL_PANES","ACTIVE_PANE","FIRST_PANE","SECOND_PANE","VERTICAL","HORIZONTAL","MIN_PANE_SIZE","_orientation","_activePaneId","_$el","_panes","_paneScrollStates","_traversingFileList","_mruList","_paneTitles","_makeMRUListEntry","file","paneId","_findFileInMRUList","findIndex","record","fullPath","isExclusiveToPane","index","getActivePaneId","_resolvePaneId","_getPane","focusActivePane","activePane","focus","_isSpecialPaneId","_makeFileMostRecent","entry","pane","makeViewMostRecent","id","splice","console","log","unshift","_makePaneMostRecent","getCurrentlyViewedFile","setActivePaneId","newPaneId","oldPaneId","oldPane","newPane","Error","trigger","_getPaneFromElement","$el","find","getCurrentlyViewedEditor","getAllViewedEditors","editorList","getPaneIdList","editor","push","getCurrentlyViewedPath","_activeEditorChange","e","current","$container","parent","parents","length","$","_forEachPaneOrPanes","callback","forEach","cacheScrollState","getScrollState","restoreAdjustedScrollState","heightDelta","restoreAndAdjustScrollState","getWorkingSet","result","viewList","getViewList","union","getAllOpenFiles","Object","keys","getWorkingSetSize","getViewListSize","getPaneTitle","getPaneCount","_doFindInWorkingSet","method","call","findInAllWorkingSets","findInViewList","findInOpenPane","paneList","findInWorkingSet","findInWorkingSetByAddedOrder","findInWorkingSetByMRUOrder","_getPaneIdForPath","info","shift","LEFT","TOP","RIGHT","BOTTOM","_viewStateSaveScheduled","_scheduleViewStateSave","_saveViewStateAndResetScheduler","_saveViewState","window","setTimeout","addToWorkingSet","force","reorderItem","ITEM_FOUND_NEEDS_SORT","warn","ITEM_NOT_FOUND","addToViewList","addListToWorkingSet","fileList","uniqueFileList","addListToViewList","unsolvedList","filter","item","_removeFileFromMRU","compare","_removeView","suppressRedraw","removeView","_moveView","sourcePaneId","destinationPaneId","destinationIndex","Deferred","sourcePane","destinationPane","moveView","done","every","resolve","promise","switchPaneFocus","$firstPane","$secondPane","hasClass","click","_removeDeletedFileFromMRU","_sortWorkingSet","compareFn","sortViewList","_moveWorkingSetItem","fromIndex","toIndex","moveWorkingSetItem","_swapWorkingSetListIndexes","index1","index2","swapViewListIndexes","traverseToNextViewByMRU","direction","traverseViewArray","traverseToNextViewInListOrder","curPaneId","allFiles","paneFiles","map","concat","beginTraversal","endTraversal","_synchronizePaneSize","forceRefresh","available","innerWidth","innerHeight","resyncSizer","data","updateLayout","_updateLayout","event","viewAreaHeight","percentage","height","css","_initialLayout","panes","size","width","float","_updatePaneHeaders","updateHeaderText","_createPaneIfNecessary","hasOwnProperty","on","newView","oldView","getFile","view","_makeFirstPaneResizable","firstPane","makeResizable","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","POSITION_BOTTOM","POSITION_RIGHT","undefined","_doSplit","orientation","removeSizable","removeClass","toLowerCase","addClass","_edit","doc","optionsIn","options","isUntitled","isWithinProject","openDocument","noPaneActivate","_open","doPostOpenActivation","reject","factory","findSuitableFactoryForPath","exists","fileError","fileExists","openFile","fail","NOT_FOUND","getDocumentForPath","extend","_mergePanes","secondPane","lastViewed","mergeFrom","off","destroy","_close","noOpenNextFile","_closeList","closedList","removeViews","_closeAll","_reset","_findPaneForDocument","document","_masterEditor","_destroyEditorIfNotNeeded","Document","destroyViewIfNotNeeded","_loadViewState","promises","state","getViewState","STATE_PROJECT_CONTEXT","convertViewState","files","activePaneId","first-pane","value","reset","paneState","loadState","waitForAll","then","opensList","prop","isNumeric","splitPercentage","openData","execute","FILE_OPEN","_computeSplitPercentage","used","projectRoot","getProjectRoot","saveState","setViewState","_initialize","_handleActivePaneChange","register","CMD_SWITCH_PANE_FOCUS","setLayoutScheme","rows","columns","error","getLayoutScheme","htmlReady","on_duringInit","makeEventDispatcher","setLeakThresholdForEvent","findInGlobalMRUList"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n\n/**\n * MainViewManager manages the arrangement of all open panes as well as provides the controller\n * logic behind all views in the MainView (e.g. ensuring that a file doesn't appear in 2 lists)\n *\n * Each pane contains one or more views wich are created by a view factory and inserted into a pane list.\n * There may be several panes managed by the MainViewManager with each pane containing a list of views.\n * The panes are always visible and the layout is determined by the MainViewManager and the user.\n *\n * Currently we support only 2 panes.\n *\n * All of the WorkingSet APIs take a paneId Argument.  This can be an actual pane Id, ALL_PANES (in most cases)\n * or ACTIVE_PANE. ALL_PANES may not be supported for some APIs.  See the API for details.\n *\n * This module dispatches several events:\n *\n *    - activePaneChange - When the active pane changes.  There will always be an active pane.\n *          (e, newPaneId:string, oldPaneId:string)\n *    - currentFileChange -- When the user has switched to another pane, file, document. When the user closes a view\n *      and there are no other views to show the current file will be null.\n *          (e, newFile:File, newPaneId:string, oldFile:File, oldPaneId:string)\n *    - paneLayoutChange -- When Orientation changes.\n *          (e, orientation:string)\n *    - paneCreate -- When a pane is created\n *          (e, paneId:string)\n *    - paneDestroy -- When a pane is destroyed\n *          (e, paneId:string)\n *\n *\n *    To listen for working set changes, you must listen to *all* of these events:\n *    - workingSetAdd -- When a file is added to the working set\n *          (e, fileAdded:File, index:number, paneId:string)\n *    - workingSetAddList -- When multiple files are added to the working set\n *          (e, fileAdded:Array.<File>, paneId:string)\n *    - workingSetMove - When a File has moved to a different working set\n *          (e, File:FILE, sourcePaneId:string, destinationPaneId:string)\n *    - workingSetRemove -- When a file is removed from the working set\n *          (e, fileRemoved:File, suppressRedraw:boolean, paneId:string)\n *    - workingSetRemoveList -- When multiple files are removed from the working set\n *          (e, filesRemoved:Array.<File>, paneId:string)\n *    - workingSetSort -- When a pane's view array is reordered without additions or removals.\n *          (e, paneId:string)\n *    - workingSetUpdate -- When changes happen due to system events such as a file being deleted.\n *                              listeners should discard all working set info and rebuilt it from the pane\n *                              by calling getWorkingSet()\n *          (e, paneId:string)\n *    - _workingSetDisableAutoSort -- When the working set is reordered by manually dragging a file.\n *          (e, paneId:string) For Internal Use Only.\n *\n * To listen for events, do something like this: (see EventDispatcher for details on this pattern)\n *    `MainViewManager.on(\"eventname\", handler);`\n */\ndefine(function (require, exports, module) {\n\n\n    var _                   = require(\"thirdparty/lodash\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        Strings             = require(\"strings\"),\n        AppInit             = require(\"utils/AppInit\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        MainViewFactory     = require(\"view/MainViewFactory\"),\n        ViewStateManager    = require(\"view/ViewStateManager\"),\n        Commands            = require(\"command/Commands\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        FileSystemError     = require(\"filesystem/FileSystemError\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        ProjectManager      = require(\"project/ProjectManager\"),\n        WorkspaceManager    = require(\"view/WorkspaceManager\"),\n        AsyncUtils          = require(\"utils/Async\"),\n        ViewUtils           = require(\"utils/ViewUtils\"),\n        Resizer             = require(\"utils/Resizer\"),\n        Pane                = require(\"view/Pane\").Pane,\n        KeyBindingManager   = brackets.getModule(\"command/KeyBindingManager\");\n\n    const EVENT_CURRENT_FILE_CHANGE = \"currentFileChange\";\n\n    /**\n     * Preference setting name for the MainView Saved State\n     * @const\n     * @private\n     */\n    var PREFS_NAME          = \"mainView.state\";\n\n    /**\n     * Legacy Preference setting name used to migrate old preferences\n     * @const\n     * @private\n     */\n    var OLD_PREFS_NAME      = \"project.files\";\n\n    /**\n     * Special paneId shortcut that can be used to specify that\n     * all panes should be targeted by the API.\n     * Not all APIs support this constnant.\n     * Check the API documentation before use.\n     * @const\n     */\n    var ALL_PANES           = \"ALL_PANES\";\n\n    /**\n     * Special paneId shortcut that can be used to specify that\n     * the API should target the focused pane only.\n     * All APIs support this shortcut.\n     * @const\n     */\n    var ACTIVE_PANE        = \"ACTIVE_PANE\";\n\n    /**\n     * Internal pane id\n     * @const\n     * @private\n     */\n    var FIRST_PANE          = \"first-pane\";\n\n    /**\n     * Internal pane id\n     * @const\n     * @private\n     */\n    var SECOND_PANE         = \"second-pane\";\n\n    /*\n     * NOTE: The following commands and constants will change\n     *        when implementing the UX UI Treatment @larz0\n     */\n\n    /**\n     * Vertical layout state name\n     * @const\n     * @private\n     */\n    var VERTICAL            = \"VERTICAL\";\n\n    /**\n     * Horizontal layout state name\n     * @const\n     * @private\n     */\n    var HORIZONTAL          = \"HORIZONTAL\";\n\n    /**\n     * The minimum width or height that a pane can be\n     * @const\n     * @private\n     */\n    var MIN_PANE_SIZE      = 75;\n\n    /**\n     * current orientation (null, VERTICAL or HORIZONTAL)\n     * @type {string=}\n     * @private\n     */\n    var _orientation = null;\n\n    /**\n     * current pane id. May not be null\n     * @type {!string}\n     * @private\n     */\n    var _activePaneId = null;\n\n    /**\n     * DOM element hosting the Main View.\n     * @type {jQuery}\n     * @private\n     */\n    var _$el;\n\n    /**\n     * Maps paneId to Pane objects\n     * @type {Object.<string, Pane>}\n     * @private\n     */\n    var _panes = {};\n\n\n    /**\n     * map of pane scroll states\n     * @type {Object.map<string, *>}\n     * @private\n     */\n    var _paneScrollStates = {};\n\n\n    /**\n     * flag indicating if traversing is currently taking place\n     * When True, changes the current pane's MRU list will not be updated.\n     * Useful for next/previous keyboard navigation (until Ctrl is released)\n     * or for incremental-search style document preview like Quick Open will eventually have.\n     * @type {!boolean}\n     * @private\n     */\n    var _traversingFileList = false;\n\n    /**\n     * The global MRU list (for traversing)\n     * @type {Array.<file:File, paneId:string>}\n     */\n    var _mruList = [];\n\n    /**\n     * localized pane titles\n     * @type {Object.<FIRST_PANE|SECOND_PANE, <VERTICAL.string, HORIZONTAL.string>}}\n     *  Localized string for first and second panes in the current orientation.\n     * @see {@link #getPaneTitle} for more information\n     * @private\n     */\n    var _paneTitles  = {};\n\n    /*\n     * Initialize _paneTitles\n     */\n    _paneTitles[FIRST_PANE] = {};\n    _paneTitles[SECOND_PANE] = {};\n\n    _paneTitles[FIRST_PANE][VERTICAL]     = Strings.LEFT;\n    _paneTitles[FIRST_PANE][HORIZONTAL]   = Strings.TOP;\n    _paneTitles[SECOND_PANE][VERTICAL]    = Strings.RIGHT;\n    _paneTitles[SECOND_PANE][HORIZONTAL]  = Strings.BOTTOM;\n\n    /**\n     * Makes a MRU List Entry\n     * @param {!File} File - the file\n     * @param {!string} paneId - the paneId\n     * @return {{file:File, paneId:string}}\n     * @private\n     */\n    function _makeMRUListEntry(file, paneId) {\n        return {file: file, paneId: paneId};\n    }\n\n    /**\n     * Locates the first  MRU entry of a file for the requested pane\n     * @param {!string} paneId - the paneId\n     * @param {!File} File - the file\n     * @return {{file:File, paneId:string}}\n     * @private\n     */\n    function _findFileInMRUList(paneId, file) {\n        return _.findIndex(_mruList, function (record) {\n            return (record.file.fullPath === file.fullPath && record.paneId === paneId);\n        });\n    }\n\n    /**\n     * Checks whether a file is listed exclusively in the provided pane\n     * @param {!File} File - the file\n     * @return {{file:File, paneId:string}}\n     */\n    function isExclusiveToPane(file, paneId) {\n        paneId = paneId === ACTIVE_PANE && _activePaneId ? _activePaneId : paneId;\n        var index = _.findIndex(_mruList, function (record) {\n            return (record.file.fullPath === file.fullPath && record.paneId !== paneId);\n        });\n        return index === -1;\n    }\n\n\n    /**\n     * Retrieves the currently active Pane Id\n     * @return {!string} Active Pane's ID.\n     */\n    function getActivePaneId() {\n        return _activePaneId;\n    }\n\n    /**\n     * Resolve paneId to actual pane.\n     * @param {?string} paneId - id of the desired pane. May be symbolic or null (to indicate current pane)\n     * @return {string} id of the pane in which to open the document\n     */\n    function _resolvePaneId(paneId) {\n        if (!paneId || paneId === ACTIVE_PANE) {\n            return getActivePaneId();\n        }\n        return paneId;\n    }\n\n    /**\n     * Retrieves the Pane object for the given paneId\n     * @param {!string} paneId - id of the pane to retrieve\n     * @return {?Pane} the Pane object or null if a pane object doesn't exist for the pane\n     * @private\n     */\n    function _getPane(paneId) {\n        paneId = _resolvePaneId(paneId);\n\n        if (_panes[paneId]) {\n            return _panes[paneId];\n        }\n\n        return null;\n    }\n\n    /**\n     * Focuses the current pane. If the current pane has a current view, then the pane will focus the view.\n     */\n    function focusActivePane() {\n        const activePane = _getPane(ACTIVE_PANE);\n        activePane && activePane.focus();\n    }\n\n    /**\n     * Determines if the pane id is a special pane id\n     * @param {!string} paneId - the id to test\n     * @return {boolean} true if the pane id is a special identifier, false if not\n     */\n    function _isSpecialPaneId(paneId) {\n        return paneId === ACTIVE_PANE || paneId === ALL_PANES;\n    }\n\n    /**\n     * Makes the file the most recent for the pane and the global mru lists\n     * @param {!string} paneId - id of the pane to mae th file most recent or ACTIVE_PANE\n     * @param {!File} file - File object to make most recent\n     * @private\n     */\n    function _makeFileMostRecent(paneId, file) {\n        var index,\n            entry,\n            pane = _getPane(paneId);\n\n        if (!_traversingFileList) {\n            pane.makeViewMostRecent(file);\n\n            index = _findFileInMRUList(pane.id, file);\n\n            entry = _makeMRUListEntry(file, pane.id);\n\n            if (index !== -1) {\n                _mruList.splice(index, 1);\n            }\n\n            if (_findFileInMRUList(pane.id, file) !== -1) {\n                console.log(file.fullPath + \" duplicated in mru list\");\n            }\n\n            // add it to the front of the list\n            _mruList.unshift(entry);\n        }\n    }\n\n    /**\n     * Makes the Pane's current file the most recent\n     * @param {!string} paneId - id of the pane to make the file most recent, or ACTIVE_PANE\n     * @param {!File} file - File object to make most recent\n     * @private\n     */\n    function _makePaneMostRecent(paneId) {\n        var pane = _getPane(paneId);\n\n        if (pane.getCurrentlyViewedFile()) {\n            _makeFileMostRecent(paneId, pane.getCurrentlyViewedFile());\n        }\n    }\n\n    /**\n     * Switch active pane to the specified pane id (or ACTIVE_PANE/ALL_PANES, in which case this\n     * call does nothing).\n     * @param {!string} paneId - the id of the pane to activate\n     */\n    function setActivePaneId(newPaneId) {\n        if (!_isSpecialPaneId(newPaneId) && newPaneId !== _activePaneId) {\n            var oldPaneId = _activePaneId,\n                oldPane = _getPane(ACTIVE_PANE),\n                newPane = _getPane(newPaneId);\n\n            if (!newPane) {\n                throw new Error(\"invalid pane id: \" + newPaneId);\n            }\n\n            _activePaneId = newPaneId;\n\n            exports.trigger(\"activePaneChange\", newPaneId, oldPaneId);\n            exports.trigger(EVENT_CURRENT_FILE_CHANGE, _getPane(ACTIVE_PANE).getCurrentlyViewedFile(),\n                                                            newPaneId,\n                                                            oldPane.getCurrentlyViewedFile(),\n                                                            oldPaneId);\n\n            _makePaneMostRecent(_activePaneId);\n            focusActivePane();\n        }\n    }\n\n    /**\n     * Retrieves the Pane ID for the specified container\n     * @param {!jQuery} $el - the element of the pane to fetch\n     * @return {?string} the id of the pane that matches the container or undefined if a pane doesn't exist for that container\n     */\n    function _getPaneFromElement($el) {\n        return _.find(_panes, function (pane) {\n            if (pane.$el[0] === $el[0]) {\n                return pane;\n            }\n        });\n    }\n\n    /**\n     * Retrieves the currently viewed file of the specified paneId\n     * @param {?string} paneId - the id of the pane in which to retrieve the currently viewed file\n     * @return {?File} File object of the currently viewed file, or null if there isn't one or there's no such pane\n     */\n    function getCurrentlyViewedFile(paneId) {\n        var pane = _getPane(paneId);\n        return pane ? pane.getCurrentlyViewedFile() : null;\n    }\n\n    /**\n     * Retrieves the currently viewed editor of the specified paneId\n     * @param {?string} paneId - the id of the pane in which to retrieve the currently viewed editor\n     * @return {?Editor} currently editor, or null if there isn't one or there's no such pane\n     */\n    function getCurrentlyViewedEditor(paneId) {\n        const pane = _getPane(paneId);\n        return pane ? pane.getCurrentlyViewedEditor() : null;\n    }\n\n    /**\n     * Get an array of editors open in panes with their pane ids. Can return empty if no editor open.\n     * @return {[{editor: Editor, paneId:string}]}\n     */\n    function getAllViewedEditors() {\n        const editorList = [];\n        for(let paneId of getPaneIdList()){\n            const editor = getCurrentlyViewedEditor(paneId);\n            if(editor){\n                editorList.push({editor, paneId});\n            }\n        }\n        return editorList;\n    }\n\n    /**\n     * Retrieves the currently viewed path of the pane specified by paneId\n     * @param {?string} paneId - the id of the pane in which to retrieve the currently viewed path\n     * @return {?string} the path of the currently viewed file or null if there isn't one\n     */\n    function getCurrentlyViewedPath(paneId) {\n        var file = getCurrentlyViewedFile(paneId);\n        return file ? file.fullPath : null;\n    }\n\n    /**\n     * EditorManager.activeEditorChange handler\n     *   This event is triggered when an visible editor gains focus\n     *   Therefore we need to Activate the pane that the active editor belongs to\n     * @private\n     * @param {!jQuery.Event} e - jQuery Event object\n     * @param {Editor=} current - editor being made the current editor\n     */\n    function _activeEditorChange(e, current) {\n        if (current) {\n            var $container = current.$el.parent().parent(),\n                pane = _getPaneFromElement($container);\n\n            if (pane) {\n                // Editor is a full editor\n                if (pane.id !== _activePaneId) {\n                    // we just need to set the active pane in this case\n                    //  it will dispatch the currentFileChange message as well\n                    //  as dispatching other events when the active pane changes\n                    setActivePaneId(pane.id);\n                }\n            } else {\n                // Editor is an inline editor, find the parent pane\n                var parents = $container.parents(\".view-pane\");\n                if (parents.length === 1) {\n                    $container = $(parents[0]);\n                    pane = _getPaneFromElement($container);\n                    if (pane) {\n                        if (pane.id !== _activePaneId) {\n                            // activate the pane which will put focus in the pane's doc\n                            setActivePaneId(pane.id);\n                            // reset the focus to the inline editor\n                            current.focus();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Iterates over the pane or ALL_PANES and calls the callback function for each.\n     * @param {!string} paneId - id of the pane in which to adjust the scroll state, ALL_PANES or ACTIVE_PANE\n     * @param {!function(!pane:Pane):boolean} callback - function to callback on to perform work.\n     * The callback will receive a Pane and should return false to stop iterating.\n     * @private\n     */\n    function _forEachPaneOrPanes(paneId, callback) {\n        if (paneId === ALL_PANES) {\n            _.forEach(_panes, callback);\n        } else {\n            callback(_getPane(paneId));\n        }\n    }\n\n    /**\n     * Caches the specified pane's current scroll state\n     * If there was already cached state for the specified pane, it is discarded and overwritten\n     * @param {!string} paneId - id of the pane in which to cache the scroll state,\n     *                            ALL_PANES or ACTIVE_PANE\n     */\n    function cacheScrollState(paneId) {\n        _forEachPaneOrPanes(paneId, function (pane) {\n            _paneScrollStates[pane.id] = pane.getScrollState();\n        });\n    }\n\n\n    /**\n     * Restores the scroll state from cache and applies the heightDelta\n     * The view implementation is responsible for applying or ignoring the heightDelta.\n     * This is used primarily when a modal bar opens to keep the editor from scrolling the current\n     * page out of view in order to maintain the appearance.\n     * The state is removed from the cache after calling this function.\n     * @param {!string} paneId - id of the pane in which to adjust the scroll state,\n     *                              ALL_PANES or ACTIVE_PANE\n     * @param {!number} heightDelta - delta H to apply to the scroll state\n     */\n    function restoreAdjustedScrollState(paneId, heightDelta) {\n        _forEachPaneOrPanes(paneId, function (pane) {\n            pane.restoreAndAdjustScrollState(_paneScrollStates[pane.id], heightDelta);\n            delete _paneScrollStates[pane.id];\n        });\n    }\n\n\n    /**\n     * Retrieves the WorkingSet for the given paneId not including temporary views\n     * @param {!string} paneId - id of the pane in which to get the view list, ALL_PANES or ACTIVE_PANE\n     * @return {Array.<File>}\n     */\n    function getWorkingSet(paneId) {\n        var result = [];\n\n        _forEachPaneOrPanes(paneId, function (pane) {\n            var viewList = pane.getViewList();\n            result = _.union(result, viewList);\n        });\n\n        return result;\n    }\n\n\n    /**\n     * Retrieves the list of all open files including temporary views\n     * @return {array.<File>} the list of all open files in all open panes\n     */\n    function getAllOpenFiles() {\n        var result = getWorkingSet(ALL_PANES);\n        _.forEach(_panes, function (pane) {\n            var file = pane.getCurrentlyViewedFile();\n            if (file) {\n                result = _.union(result, [file]);\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Retrieves the list of all open pane ids\n     * @return {array.<string>} the list of all open panes\n     */\n    function getPaneIdList() {\n        return Object.keys(_panes);\n    }\n\n    /**\n     * Retrieves the size of the selected pane's view list\n     * @param {!string} paneId - id of the pane in which to get the workingset size.\n     *      Can use `ALL_PANES` or `ACTIVE_PANE`\n     * @return {!number} the number of items in the specified pane\n     */\n    function getWorkingSetSize(paneId) {\n        var result = 0;\n        _forEachPaneOrPanes(paneId, function (pane) {\n            result += pane.getViewListSize();\n        });\n        return result;\n    }\n\n    /**\n     * Retrieves the title to display in the workingset view\n     * @param {!string} paneId - id of the pane in which to get the title\n     * @return {?string} title\n     */\n    function getPaneTitle(paneId) {\n        return _paneTitles[paneId][_orientation];\n    }\n\n    /**\n     * Retrieves the number of panes\n     * @return {number}\n     */\n    function getPaneCount() {\n        return Object.keys(_panes).length;\n    }\n\n    /**\n     * Helper to abastract the common working set search functions\n     * @param {!string} paneId - id of the pane to search or ALL_PANES to search all panes\n     * @param {!string} fullPath - path of the file to locate\n     * @param {!string} method - name of the method to use for searching\n     *       \"findInViewList\", \"findInViewListAddedOrder\" or \"FindInViewListMRUOrder\"\n     *\n     * @private\n     */\n    function _doFindInWorkingSet(paneId, fullPath, method) {\n        var result = -1;\n        _forEachPaneOrPanes(paneId, function (pane) {\n            var index = pane[method].call(pane, fullPath);\n            if (index >= 0) {\n                result = index;\n                return false;\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Finds all instances of the specified file in all working sets.\n     * If there is a temporary view of the file, it is not part of the result set\n     * @param {!string} fullPath - path of the file to find views of\n     * @return {Array.<{pane:string, index:number}>} an array of paneId/index records\n     */\n    function findInAllWorkingSets(fullPath) {\n        let index,\n            result = [];\n\n        _.forEach(_panes, function (pane) {\n            index = pane.findInViewList(fullPath);\n            if (index >= 0) {\n                result.push({paneId: pane.id, index: index});\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Returns the paneId and editor(if present) of the given file on any open and viewable pane. If same file\n     * is open in multiple panes, all matching panes will be returned. If not found in any panes, [] will be returned.\n     * @param {string} fullPath\n     * @return {[{paneId:string, editor:?Editor}]} paneId - array of id of the panes in which the file is open.\n     */\n    function findInOpenPane(fullPath) {\n        const paneList = [];\n        for(let paneId of getPaneIdList()){\n            const file = getCurrentlyViewedFile(paneId);\n            const editor = getCurrentlyViewedEditor(paneId);\n            if(file && file.fullPath === fullPath){\n                paneList.push({paneId, editor});\n            }\n        }\n        return paneList;\n    }\n\n    /**\n     * Gets the index of the file matching fullPath in the workingset\n     * @param {!string} paneId - id of the pane in which to search or ALL_PANES or ACTIVE_PANE\n     * @param {!string} fullPath - full path of the file to search for\n     * @return {number} index, -1 if not found.\n     */\n    function findInWorkingSet(paneId, fullPath) {\n        return _doFindInWorkingSet(paneId, fullPath, \"findInViewList\");\n    }\n\n    /**\n     * Gets the index of the file matching fullPath in the added order workingset\n     * @param {!string} paneId - id of the pane in which to search or ALL_PANES or ACTIVE_PANE\n     * @param {!string} fullPath - full path of the file to search for\n     * @return {number} index, -1 if not found.\n     */\n    function findInWorkingSetByAddedOrder(paneId, fullPath) {\n        return _doFindInWorkingSet(paneId, fullPath, \"findInViewListAddedOrder\");\n    }\n\n    /**\n     * Gets the index of the file matching fullPath in the MRU order workingset\n     * @param {!string} paneId - id of the pane in which to search or ALL_PANES or ACTIVE_PANE\n     * @param {!string} fullPath - full path of the file to search for\n     * @return {number} index, -1 if not found.\n     */\n    function findInWorkingSetByMRUOrder(paneId, fullPath) {\n        return _doFindInWorkingSet(paneId, fullPath, \"findInViewListMRUOrder\");\n    }\n\n    /**\n     * @private\n     * Retrieves pane id where the specified file has been opened. Used to ensure that a file\n     *  is open in only one pane so this will change once support for multiple views is added\n     * The result includes panes with a temporary view of the file not just working set instances\n     * @param {!string} fullPath - full path of the file to search for\n     * @return {?string} pane id where the file has been opened or null if it wasn't found\n     */\n    function _getPaneIdForPath(fullPath) {\n        // Search all working sets and pull off the first one\n        var info = findInAllWorkingSets(fullPath).shift();\n\n        // Look for a view that has not been added to a working set\n        if (!info) {\n            _.forEach(_panes, function (pane) {\n                if (pane.getCurrentlyViewedPath() === fullPath) {\n                    info = {paneId: pane.id};\n                    return false;\n                }\n            });\n        }\n\n        if (!info) {\n            return null;\n        }\n\n        return info.paneId;\n    }\n\n    /**\n     * View states are only saved once every second max.\n     * @type {boolean}\n     * @private\n     */\n    let _viewStateSaveScheduled = false;\n    function _scheduleViewStateSave() {\n        function _saveViewStateAndResetScheduler() {\n            _saveViewState();\n            _viewStateSaveScheduled = false;\n        }\n        if(!_viewStateSaveScheduled){\n            _viewStateSaveScheduled = true;\n            window.setTimeout(_saveViewStateAndResetScheduler, 1000);\n        }\n    }\n\n    /**\n     * Adds the given file to the end of the workingset, if it is not already there.\n     *  This API does not create a view of the file, it just adds it to the working set\n     * Views of files in the working set are persisted and are not destroyed until the user\n     *  closes the file using FILE_CLOSE; Views are created using FILE_OPEN and, when opened, are\n     *  made the current view. If a File is already opened then the file is just made current\n     *  and its view is shown.\n     * @param {!string} paneId - The id of the pane in which to add the file object to or ACTIVE_PANE\n     * @param {!File} file - The File object to add to the workingset\n     * @param {number=} index - Position to add to list (defaults to last); -1 is ignored\n     * @param {boolean=} forceRedraw - If true, a workingset change notification is always sent\n     *    (useful if suppressRedraw was used with removeView() earlier)\n     */\n    function addToWorkingSet(paneId, file, index, force) {\n        // look for the file to have already been added to another pane\n        var pane = _getPane(paneId);\n        if (!pane) {\n            throw new Error(\"invalid pane id: \" + paneId);\n        }\n\n        var result = pane.reorderItem(file, index, force),\n            entry = _makeMRUListEntry(file, pane.id);\n\n\n        // handles the case of save as so that the file remains in the\n        //  the same location in the working set as the file that was renamed\n        if (result === pane.ITEM_FOUND_NEEDS_SORT) {\n            console.warn(\"pane.reorderItem returned pane.ITEM_FOUND_NEEDS_SORT which shouldn't happen \" + file);\n            exports.trigger(\"workingSetSort\", pane.id);\n        } else if (result === pane.ITEM_NOT_FOUND) {\n            index = pane.addToViewList(file, index);\n\n            if (_findFileInMRUList(pane.id, file) === -1) {\n                // Add to or update the position in MRU\n                if (pane.getCurrentlyViewedFile() === file) {\n                    _mruList.unshift(entry);\n                } else {\n                    _mruList.push(entry);\n                }\n            }\n\n            exports.trigger(\"workingSetAdd\", file, index, pane.id);\n        }\n    }\n\n    /**\n     * Adds the given file list to the end of the workingset.\n     * @param {!string} paneId - The id of the pane in which to add the file object to or ACTIVE_PANE\n     * @param {!Array.<File>} fileList - Array of files to add to the pane\n     */\n    function addListToWorkingSet(paneId, fileList) {\n        var uniqueFileList,\n            pane = _getPane(paneId);\n\n        uniqueFileList = pane.addListToViewList(fileList);\n\n        uniqueFileList.forEach(function (file) {\n            if (_findFileInMRUList(pane.id, file) !== -1) {\n                console.log(file.fullPath + \" duplicated in mru list\");\n            }\n            _mruList.push(_makeMRUListEntry(file, pane.id));\n        });\n\n        exports.trigger(\"workingSetAddList\", uniqueFileList, pane.id);\n\n        //  find all of the files that could be added but were not\n        var unsolvedList = fileList.filter(function (item) {\n            // if the file open in another pane, then add it to the list of unsolvedList\n            return (pane.findInViewList(item.fullPath) === -1 && _getPaneIdForPath(item.fullPath));\n        });\n\n        // Use the pane id of the first one in the list for pane id and recurse\n        //  if we add more panes, then this will recurse until all items in the list are satisified\n        if (unsolvedList.length) {\n            addListToWorkingSet(_getPaneIdForPath(unsolvedList[0].fullPath), unsolvedList);\n        }\n    }\n\n    /**\n     * Removes a file from the global MRU list. Future versions of this\n     *  implementation may support the ALL_PANES constant but FOCUS_PANE is not allowed\n     * @param {!string} paneId - Must be a valid paneId (not a shortcut e.g. ALL_PANES)\n     @ @param {File} file The file object to remove.\n     * @private\n     */\n    function _removeFileFromMRU(paneId, file) {\n        var index,\n            compare = function (record) {\n                return (record.file === file && record.paneId === paneId);\n            };\n\n        // find and remove all instances\n        do {\n            index = _.findIndex(_mruList, compare);\n            if (index !== -1) {\n                _mruList.splice(index, 1);\n            }\n        } while (index !== -1);\n    }\n\n    /**\n     * Removes a file the specified pane\n     * @param {!string} paneId - Must be a valid paneId (not a shortcut e.g. ALL_PANES)\n     * @param {!File} file - the File to remove\n     * @param {boolean=} suppressRedraw - true to tell listeners not to redraw\n     *          Use the suppressRedraw flag when calling this function along with many changes to prevent flicker\n     * @private\n     */\n    function _removeView(paneId, file, suppressRedraw) {\n        var pane = _getPane(paneId);\n\n        if (pane.removeView(file)) {\n            _removeFileFromMRU(pane.id, file);\n            exports.trigger(\"workingSetRemove\", file, suppressRedraw, pane.id);\n        }\n    }\n\n    /**\n     * moves a view from one pane to another\n     * @param {!string} sourcePaneId - id of the source pane\n     * @param {!string} destinationPaneId - id of the destination pane\n     * @param {!File} file - the File to move\n     * @param {Number} destinationIndex - the working set index of the file in the destination pane\n     * @return {jQuery.Promise} a promise that resolves when the move has completed.\n     * @private\n     */\n    function _moveView(sourcePaneId, destinationPaneId, file, destinationIndex) {\n        var result = new $.Deferred(),\n            sourcePane = _getPane(sourcePaneId),\n            destinationPane = _getPane(destinationPaneId);\n\n        sourcePane.moveView(file, destinationPane, destinationIndex)\n            .done(function () {\n                // remove existing entry from mrulist for the same document if present\n                _removeFileFromMRU(destinationPane.id, file);\n                // update the mru list\n                _mruList.every(function (record) {\n                    if (record.file === file && record.paneId === sourcePane.id) {\n                        record.paneId = destinationPane.id;\n                        return false;\n                    }\n                    return true;\n                });\n                exports.trigger(\"workingSetMove\", file, sourcePane.id, destinationPane.id);\n                result.resolve();\n            });\n\n        return result.promise();\n    }\n\n    /**\n     * Switch between panes\n     */\n    function switchPaneFocus() {\n        var $firstPane = $('#first-pane'), $secondPane = $('#second-pane');\n        if($firstPane.hasClass('active-pane')) {\n            $secondPane.click();\n        }        else {\n            $firstPane.click();\n        }\n    }\n\n    /**\n     * DocumentManager.pathDeleted Event handler to remove a file\n     * from the MRU list\n     * @param {!jQuery.event} e -\n     * @param {!string} fullPath - path of the file to remove\n     * @private\n     */\n    function _removeDeletedFileFromMRU(e, fullPath) {\n        var index,\n            compare = function (record) {\n                return (record.file.fullPath === fullPath);\n            };\n\n        // find and remove all instances\n        do {\n            index = _.findIndex(_mruList, compare);\n            if (index !== -1) {\n                _mruList.splice(index, 1);\n            }\n        } while (index !== -1);\n    }\n\n    /**\n     * sorts the pane's view list\n     * @param {!string} paneId - id of the pane to sort, ALL_PANES or ACTIVE_PANE\n     * @param {sortFunctionCallback} compareFn - callback to determine sort order (called on each item)\n     * @see {@link Pane#sortViewList} for more information\n     * @see {@link https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort|Sort Array - MDN}\n     * @private\n     */\n    function _sortWorkingSet(paneId, compareFn) {\n        _forEachPaneOrPanes(paneId, function (pane) {\n            pane.sortViewList(compareFn);\n            exports.trigger(\"workingSetSort\", pane.id);\n        });\n    }\n\n    /**\n     * moves a working set item from one index to another shifting the items\n     * after in the working set up and reinserting it at the desired location\n     * @param {!string} paneId - id of the pane to sort\n     * @param {!number} fromIndex - the index of the item to move\n     * @param {!number} toIndex - the index to move to\n     * @private\n     */\n    function _moveWorkingSetItem(paneId, fromIndex, toIndex) {\n        var pane = _getPane(paneId);\n\n        pane.moveWorkingSetItem(fromIndex, toIndex);\n        exports.trigger(\"workingSetSort\", pane.id);\n        exports.trigger(\"_workingSetDisableAutoSort\", pane.id);\n    }\n\n    /**\n     * Mutually exchanges the files at the indexes passed by parameters.\n     * @param {!string} paneId - id of the pane to swap indices or ACTIVE_PANE\n     * @param {!number} index1 - the index on the left\n     * @param {!number} index2 - the index on the rigth\n     * @private\n     */\n    function _swapWorkingSetListIndexes(paneId, index1, index2) {\n        var pane = _getPane(paneId);\n\n        pane.swapViewListIndexes(index1, index2);\n        exports.trigger(\"workingSetSort\", pane.id);\n        exports.trigger(\"_workingSetDisableAutoSort\", pane.id);\n    }\n\n    /**\n     * Get the next or previous file in the MRU list.\n     * @param {!number} direction - Must be 1 or -1 to traverse forward or backward\n     * @return {?{file:File, paneId:string}} The File object of the next item in the traversal order or null if there aren't any files to traverse.\n     *                                       May return current file if there are no other files to traverse.\n     */\n    function traverseToNextViewByMRU(direction) {\n        var file = getCurrentlyViewedFile(),\n            paneId = getActivePaneId(),\n            index = _.findIndex(_mruList, function (record) {\n                return (record.file === file && record.paneId === paneId);\n            });\n\n        return ViewUtils.traverseViewArray(_mruList, index, direction);\n    }\n\n    /**\n     * Get the next or previous file in list order.\n     * @param {!number} direction - Must be 1 or -1 to traverse forward or backward\n     * @return {?{file:File, paneId:string}} The File object of the next item in the traversal order or null if there aren't any files to traverse.\n     *                                       May return current file if there are no other files to traverse.\n     */\n    function traverseToNextViewInListOrder(direction) {\n        var file = getCurrentlyViewedFile(),\n            curPaneId = getActivePaneId(),\n            allFiles = [],\n            index;\n\n        getPaneIdList().forEach(function (paneId) {\n            var paneFiles = getWorkingSet(paneId).map(function (file) {\n                return { file: file, pane: paneId };\n            });\n            allFiles = allFiles.concat(paneFiles);\n        });\n\n        index = _.findIndex(allFiles, function (record) {\n            return (record.file === file && record.pane === curPaneId);\n        });\n\n        return ViewUtils.traverseViewArray(allFiles, index, direction);\n    }\n\n    /**\n     * Indicates that traversal has begun.\n     * Can be called any number of times.\n     */\n    function beginTraversal() {\n        _traversingFileList = true;\n    }\n\n    /**\n     * Un-freezes the MRU list after one or more beginTraversal() calls.\n     * Whatever file is current is bumped to the front of the MRU list.\n     */\n    function endTraversal() {\n        var pane = _getPane(ACTIVE_PANE);\n\n        if (_traversingFileList) {\n            _traversingFileList = false;\n\n            _makeFileMostRecent(pane.id, pane.getCurrentlyViewedFile());\n        }\n    }\n\n    /**\n     * Synchronizes the pane's sizer element, updates the pane's resizer maxsize value\n     *   and tells the pane to update its layout\n     * @param {boolean} forceRefresh - true to force a resize and refresh of the entire view\n     * @private\n     */\n    function _synchronizePaneSize(pane, forceRefresh) {\n        var available;\n\n        if (_orientation === VERTICAL) {\n            available = _$el.innerWidth();\n        } else {\n            available = _$el.innerHeight();\n        }\n\n        // Update the pane's sizer element if it has one and update the max size\n        Resizer.resyncSizer(pane.$el);\n        pane.$el.data(\"maxsize\", available - MIN_PANE_SIZE);\n        pane.updateLayout(forceRefresh);\n    }\n\n\n    /**\n     * Event handler for \"workspaceUpdateLayout\" to update the layout\n     * @param {jQuery.Event} event - jQuery event object\n     * @param {number} viewAreaHeight - unused\n     * @param {boolean} forceRefresh - true to force a resize and refresh of the entire view\n     * @private\n     */\n    function _updateLayout(event, viewAreaHeight, forceRefresh) {\n        var available;\n\n        if (_orientation === VERTICAL) {\n            available = _$el.innerWidth();\n        } else {\n            available = _$el.innerHeight();\n        }\n\n        _.forEach(_panes, function (pane) {\n            // For VERTICAL orientation, we set the second pane to be width: auto\n            //  so that it resizes to fill the available space in the containing div\n            // unfortunately, that doesn't work in the HORIZONTAL orientation so we\n            //  must update the height and convert it into a percentage\n            if (pane.id === SECOND_PANE && _orientation === HORIZONTAL) {\n                var percentage = ((_panes[FIRST_PANE].$el.height() + 1) / available);\n                pane.$el.css(\"height\", 100 - (percentage * 100) + \"%\");\n            }\n\n            _synchronizePaneSize(pane, forceRefresh);\n        });\n    }\n\n    /**\n     * Sets up the initial layout so panes are evenly distributed\n     * This also sets css properties that aid in the layout when _updateLayout is called\n     * @param {boolean} forceRefresh - true to force a resize and refresh of the entire view\n     * @private\n     */\n    function _initialLayout(forceRefresh) {\n        var panes = Object.keys(_panes),\n            size = 100 / panes.length;\n\n        _.forEach(_panes, function (pane) {\n            if (pane.id === FIRST_PANE) {\n                if (_orientation === VERTICAL) {\n                    pane.$el.css({height: \"100%\",\n                        width: size + \"%\",\n                        float: \"left\"\n                    });\n                } else {\n                    pane.$el.css({ height: size + \"%\",\n                        width: \"100%\"\n                    });\n                }\n            } else {\n                if (_orientation === VERTICAL) {\n                    pane.$el.css({  height: \"100%\",\n                        width: \"auto\",\n                        float: \"none\"\n                    });\n                } else {\n                    pane.$el.css({ width: \"100%\",\n                        height: \"50%\"\n                    });\n                }\n            }\n\n            _synchronizePaneSize(pane, forceRefresh);\n        });\n    }\n\n    /**\n     * Updates the header text for all panes\n     */\n    function _updatePaneHeaders() {\n        _forEachPaneOrPanes(ALL_PANES, function (pane) {\n            pane.updateHeaderText();\n        });\n\n    }\n\n    /**\n     * Creates a pane for paneId if one doesn't already exist\n     * @param {!string} paneId - id of the pane to create\n     * @private\n     * @return {?Pane} - the pane object of the new pane, or undefined if no pane created\n     */\n    function _createPaneIfNecessary(paneId) {\n        var newPane;\n\n        if (!_panes.hasOwnProperty(paneId)) {\n            newPane = new Pane(paneId, _$el);\n            _panes[paneId] = newPane;\n\n            exports.trigger(\"paneCreate\", newPane.id);\n\n            newPane.$el.on(\"click.mainview dragover.mainview\", function () {\n                setActivePaneId(newPane.id);\n            });\n\n            newPane.on(\"viewListChange.mainview\", function () {\n                _updatePaneHeaders();\n                exports.trigger(\"workingSetUpdate\", newPane.id);\n            });\n            newPane.on(\"currentViewChange.mainview\", function (e, newView, oldView) {\n                _updatePaneHeaders();\n                if (_activePaneId === newPane.id) {\n                    exports.trigger(EVENT_CURRENT_FILE_CHANGE,\n                                               newView && newView.getFile(),\n                                               newPane.id, oldView && oldView.getFile(),\n                                               newPane.id);\n                }\n            });\n            newPane.on(\"viewDestroy.mainView\", function (e, view) {\n                _removeFileFromMRU(newPane.id, view.getFile());\n            });\n        }\n\n        return newPane;\n    }\n\n    /**\n     * Makes the first pane resizable\n     * @private\n     */\n    function _makeFirstPaneResizable() {\n        var firstPane = _panes[FIRST_PANE];\n        Resizer.makeResizable(firstPane.$el,\n                              _orientation === HORIZONTAL ? Resizer.DIRECTION_VERTICAL : Resizer.DIRECTION_HORIZONTAL,\n                              _orientation === HORIZONTAL ? Resizer.POSITION_BOTTOM : Resizer.POSITION_RIGHT,\n                              MIN_PANE_SIZE, false, false, false,\n            true, undefined, true);\n\n        firstPane.$el.on(\"panelResizeUpdate\", function () {\n            _updateLayout();\n        });\n    }\n\n\n    /**\n     * Creates a split for the specified orientation\n     * @private\n     * @param {!string} orientation (VERTICAL|HORIZONTAL)\n     */\n    function _doSplit(orientation) {\n        var firstPane, newPane;\n\n        if (orientation === _orientation) {\n            return;\n        }\n\n        firstPane = _panes[FIRST_PANE];\n        Resizer.removeSizable(firstPane.$el);\n\n        if (_orientation) {\n            _$el.removeClass(\"split-\" + _orientation.toLowerCase());\n        }\n        _$el.addClass(\"split-\" + orientation.toLowerCase());\n\n        _orientation = orientation;\n        newPane = _createPaneIfNecessary(SECOND_PANE);\n        _makeFirstPaneResizable();\n\n        // reset the layout to 50/50 split\n        // if we changed orientation then\n        //  the percentages are reset as well\n        _initialLayout();\n\n        exports.trigger(\"paneLayoutChange\", _orientation);\n\n        // if new pane was created, and original pane is not empty, make new pane the active pane\n        if (newPane && getCurrentlyViewedFile(firstPane.id)) {\n            setActivePaneId(newPane.id);\n        }\n    }\n\n    /**\n     * Edits a document in the specified pane.\n     * This function is only used by:\n     *  - Unit Tests (which construct Mock Document objects),\n     *  - by File > New  because there is yet to be an established File object\n     *  - by Find In Files which needs to open documents synchronously in some cases\n     * Do not use this API it is for internal use only\n     * @param {!string} paneId - id of the pane in which to open the document\n     * @param {!Document} doc - document to edit\n     * @param {{noPaneActivate:boolean=}=} optionsIn - options\n     * @private\n     */\n    function _edit(paneId, doc, optionsIn) {\n        var options = optionsIn || {};\n\n        var pane = _getPane(paneId);\n\n        // If file is untitled or otherwise not within project tree, add it to\n        // working set right now (don't wait for it to become dirty)\n        if (doc.isUntitled() || !ProjectManager.isWithinProject(doc.file.fullPath)) {\n            addToWorkingSet(paneId, doc.file);\n        }\n\n        // open document will show the editor if there is one already\n        EditorManager.openDocument(doc, pane, options);\n        _makeFileMostRecent(paneId, doc.file);\n\n        if (!options.noPaneActivate) {\n            setActivePaneId(paneId);\n        }\n    }\n\n    /**\n     * Opens a file in the specified pane this can be used to open a file with a custom viewer\n     * or a document for editing.  If it's a document for editing, edit is called on the document\n     * @param {!string} paneId - id of the pane in which to open the document\n     * @param {!File} file - file to open\n     * @param {{noPaneActivate:boolean=}=} optionsIn - options\n     * @return {jQuery.Promise}  promise that resolves to a File object or\n     *                           rejects with a File error or string\n     */\n    function _open(paneId, file, optionsIn) {\n        var result = new $.Deferred(),\n            options = optionsIn || {};\n\n        function doPostOpenActivation() {\n            if (!options.noPaneActivate) {\n                setActivePaneId(paneId);\n            }\n        }\n\n        if (!file || !_getPane(paneId)) {\n            return result.reject(\"bad argument\").promise();\n        }\n\n\n        // See if there is already a view for the file\n        var pane = _getPane(paneId);\n\n        // See if there is a factory to create a view for this file\n        //  we want to do this first because, we don't want our internal\n        //  editor to edit files for which there are suitable viewfactories\n        var factory = MainViewFactory.findSuitableFactoryForPath(file.fullPath);\n\n        if (factory) {\n            file.exists(function (fileError, fileExists) {\n                if (fileExists) {\n                    // let the factory open the file and create a view for it\n                    factory.openFile(file, pane)\n                        .done(function () {\n                            // if we opened a file that isn't in the project\n                            //  then add the file to the working set\n                            if (!ProjectManager.isWithinProject(file.fullPath)) {\n                                addToWorkingSet(paneId, file);\n                            }\n                            doPostOpenActivation();\n                            result.resolve(file);\n                        })\n                        .fail(function (fileError) {\n                            result.reject(fileError);\n                        });\n                } else {\n                    result.reject(fileError || FileSystemError.NOT_FOUND);\n                }\n            });\n        } else {\n            DocumentManager.getDocumentForPath(file.fullPath, file)\n                .done(function (doc) {\n                    if (doc) {\n                        _edit(paneId, doc, $.extend({}, options, {\n                            noPaneActivate: true\n                        }));\n                        doPostOpenActivation();\n                        result.resolve(doc.file);\n                    } else {\n                        result.resolve(null);\n                    }\n                })\n                .fail(function (fileError) {\n                    result.reject(fileError);\n                });\n        }\n\n        result.done(function () {\n            _makeFileMostRecent(paneId, file);\n        });\n\n        return result;\n    }\n\n    /**\n     * Merges second pane into first pane and opens the current file\n     * @private\n     */\n    function _mergePanes() {\n        if (_panes.hasOwnProperty(SECOND_PANE)) {\n\n            var firstPane = _panes[FIRST_PANE],\n                secondPane = _panes[SECOND_PANE],\n                fileList = secondPane.getViewList(),\n                lastViewed = getCurrentlyViewedFile();\n\n            Resizer.removeSizable(firstPane.$el);\n            firstPane.mergeFrom(secondPane);\n\n            exports.trigger(\"workingSetRemoveList\", fileList, secondPane.id);\n\n            setActivePaneId(firstPane.id);\n\n            secondPane.$el.off(\".mainview\");\n            secondPane.off(\".mainview\");\n\n            secondPane.destroy();\n            delete _panes[SECOND_PANE];\n            exports.trigger(\"paneDestroy\", secondPane.id);\n            exports.trigger(\"workingSetAddList\", fileList, firstPane.id);\n\n            _mruList.forEach(function (record) {\n                if (record.paneId === secondPane.id) {\n                    record.paneId = firstPane.id;\n                }\n            });\n\n            _$el.removeClass(\"split-\" + _orientation.toLowerCase());\n            _orientation = null;\n            // this will set the remaining pane to 100%\n            _initialLayout();\n\n            exports.trigger(\"paneLayoutChange\", _orientation);\n\n            // if the current view before the merger was in the pane\n            //  that went away then reopen it so that it's now the current view again\n            if (lastViewed && getCurrentlyViewedFile() !== lastViewed) {\n                exports._open(firstPane.id, lastViewed);\n            }\n        }\n    }\n\n    /**\n     * Closes a file in the specified pane or panes\n     * @param {!string} paneId - id of the pane in which to open the document\n     * @param {!File} file - file to close\n     * @param {Object={noOpenNextFile:boolean}} optionsIn - options\n     * This function does not fail if the file is not open\n     */\n    function _close(paneId, file, optionsIn) {\n        var options = optionsIn || {};\n        _forEachPaneOrPanes(paneId, function (pane) {\n            if (pane.removeView(file, options.noOpenNextFile) && (paneId === ACTIVE_PANE || pane.id === paneId)) {\n                _removeFileFromMRU(pane.id, file);\n                exports.trigger(\"workingSetRemove\", file, false, pane.id);\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Closes a list of file in the specified pane or panes\n     * @param {!string} paneId - id of the pane in which to open the document\n     * @param {!Array.<File>} fileList - files to close\n     * This function does not fail if the file is not open\n     */\n    function _closeList(paneId, fileList) {\n        _forEachPaneOrPanes(paneId, function (pane) {\n            var closedList = pane.removeViews(fileList);\n            closedList.forEach(function (file) {\n                _removeFileFromMRU(pane.id, file);\n            });\n\n            exports.trigger(\"workingSetRemoveList\", closedList, pane.id);\n        });\n    }\n\n    /**\n     * Closes all files in the specified pane or panes\n     * @param {!string} paneId - id of the pane in which to open the document\n     * This function does not fail if the file is not open\n     */\n    function _closeAll(paneId) {\n        _forEachPaneOrPanes(paneId, function (pane) {\n            var closedList = pane.getViewList();\n            closedList.forEach(function (file) {\n                _removeFileFromMRU(pane.id, file);\n            });\n\n            pane._reset();\n            exports.trigger(\"workingSetRemoveList\", closedList, pane.id);\n        });\n    }\n\n\n    /**\n     * Finds which pane a document belongs to\n     * @param {!Document} document - the document to locate\n     * @return {?Pane} the pane where the document lives or NULL if it isn't in a pane\n     * @private\n     */\n    function _findPaneForDocument(document) {\n        // First check for an editor view of the document\n        var pane = _getPaneFromElement($(document._masterEditor.$el.parent().parent()));\n\n        if (!pane) {\n            // No view of the document, it may be in a working set and not yet opened\n            var info = findInAllWorkingSets(document.file.fullPath).shift();\n            if (info) {\n                pane = _panes[info.paneId];\n            }\n        }\n\n        return pane;\n    }\n\n    /**\n     * Destroys an editor object if a document is no longer referenced\n     * @param {!Document} doc - document to destroy\n     */\n    function _destroyEditorIfNotNeeded(document) {\n        if (!(document instanceof DocumentManager.Document)) {\n            throw new Error(\"_destroyEditorIfUnneeded() should be passed a Document\");\n        }\n        if (document._masterEditor) {\n            // findPaneForDocument tries to locate the pane in which the document\n            //  is either opened or will be opened (in the event that the document is\n            //  in a working set but has yet to be opened) and then asks the pane\n            //  to destroy the view if it doesn't need it anymore\n            var pane = _findPaneForDocument(document);\n\n            if (pane) {\n                // let the pane deceide if it wants to destroy the view if it's no needed\n                pane.destroyViewIfNotNeeded(document._masterEditor);\n            } else {\n                // in this case, the document isn't referenced at all so just destroy it\n                document._masterEditor.destroy();\n            }\n        }\n    }\n\n\n    /**\n     * Loads the workingset state\n     * @private\n     */\n    function _loadViewState(e) {\n        // file root is appended for each project\n        var panes,\n            promises = [],\n            state = PreferencesManager.getViewState(PREFS_NAME, PreferencesManager.STATE_PROJECT_CONTEXT);\n\n        function convertViewState() {\n            let files = PreferencesManager.getViewState(OLD_PREFS_NAME, PreferencesManager.STATE_PROJECT_CONTEXT);\n\n            if (!files) {\n                // nothing to convert\n                return;\n            }\n\n            var result = {\n                orientation: null,\n                activePaneId: FIRST_PANE,\n                panes: {\n                    \"first-pane\": []\n                }\n            };\n\n            // Add all files to the workingset without verifying that\n            // they still exist on disk (for faster project switching)\n            files.forEach(function (value) {\n                result.panes[FIRST_PANE].push(value);\n            });\n\n            return result;\n        }\n\n        if (!state) {\n            // not converted yet\n            state = convertViewState();\n        }\n\n        // reset\n        _mergePanes();\n        _mruList = [];\n        ViewStateManager.reset();\n\n        if (state) {\n\n            panes = Object.keys(state.panes);\n            _orientation = (panes.length > 1) ? state.orientation : null;\n\n            _.forEach(state.panes, function (paneState, paneId) {\n                _createPaneIfNecessary(paneId);\n                promises.push(_panes[paneId].loadState(paneState));\n            });\n\n            AsyncUtils.waitForAll(promises).then(function (opensList) {\n\n                // this will set the default layout of 50/50 or 100\n                //  based on the number of panes\n                _initialLayout();\n\n                // More than 1 pane, then make it resizable\n                //  and layout the panes from serialized state\n                if (panes.length > 1) {\n                    _makeFirstPaneResizable();\n\n                    // If the split state was serialized correctly\n                    //  then setup the splits according to was serialized\n                    // Avoid a zero and negative split percentages\n                    if ($.isNumeric(state.splitPercentage) && state.splitPercentage > 0) {\n                        var prop;\n                        if (_orientation === VERTICAL) {\n                            prop = \"width\";\n                        } else {\n                            prop = \"height\";\n                        }\n\n                        _panes[FIRST_PANE].$el.css(prop, state.splitPercentage * 100 + \"%\");\n                        _updateLayout();\n                    }\n                }\n\n                if (_orientation) {\n                    _$el.addClass(\"split-\" + _orientation.toLowerCase());\n                    exports.trigger(\"paneLayoutChange\", _orientation);\n                }\n\n                _.forEach(_panes, function (pane) {\n                    var fileList = pane.getViewList();\n\n                    fileList.forEach(function (file) {\n                        if (_findFileInMRUList(pane.id, file) !== -1) {\n                            console.log(file.fullPath + \" duplicated in mru list\");\n                        }\n                        _mruList.push(_makeMRUListEntry(file, pane.id));\n                    });\n                    exports.trigger(\"workingSetAddList\", fileList, pane.id);\n                });\n\n                promises = [];\n\n                opensList.forEach(function (openData) {\n                    if (openData) {\n                        promises.push(CommandManager.execute(Commands.FILE_OPEN, openData));\n                    }\n                });\n\n                // finally set the active pane\n                AsyncUtils.waitForAll(promises).then(function () {\n                    setActivePaneId(state.activePaneId);\n                });\n            });\n        }\n    }\n\n    /**\n     * Saves the workingset state\n     * @private\n     */\n    function _saveViewState() {\n        function _computeSplitPercentage() {\n            var available,\n                used;\n\n            if (getPaneCount() === 1) {\n                // just short-circuit here and\n                //  return 100% to avoid any rounding issues\n                return 1;\n            }\n            if (_orientation === VERTICAL) {\n                available = _$el.innerWidth();\n                used = _panes[FIRST_PANE].$el.width();\n            } else {\n                available = _$el.innerHeight();\n                used = _panes[FIRST_PANE].$el.height();\n            }\n\n            return used / available;\n\n        }\n\n        let projectRoot     = ProjectManager.getProjectRoot();\n        if (!projectRoot) {\n            return;\n        }\n\n        let state = {\n            orientation: _orientation,\n            activePaneId: getActivePaneId(),\n            splitPercentage: _computeSplitPercentage(),\n            panes: {\n            }\n        };\n\n        _.forEach(_panes, function (pane) {\n            state.panes[pane.id] = pane.saveState();\n        });\n\n        PreferencesManager.setViewState(PREFS_NAME, state, PreferencesManager.STATE_PROJECT_CONTEXT);\n    }\n\n    /**\n     * Initializes the MainViewManager's view state\n     * @param {jQuery} $container - the container where the main view will live\n     * @private\n     */\n    function _initialize($container) {\n        if (_activePaneId) {\n            throw new Error(\"MainViewManager has already been initialized\");\n        }\n\n        _$el = $container;\n        _createPaneIfNecessary(FIRST_PANE);\n        _activePaneId = FIRST_PANE;\n        // One-time init so the pane has the \"active\" appearance\n        _panes[FIRST_PANE]._handleActivePaneChange(undefined, _activePaneId);\n        _initialLayout();\n\n        // This ensures that unit tests that use this function\n        //  get an event handler for workspace events and we don't listen\n        //  to the event before we've been initialized\n        WorkspaceManager.on(\"workspaceUpdateLayout\", _updateLayout);\n\n        exports.on(EVENT_CURRENT_FILE_CHANGE, _scheduleViewStateSave);\n        exports.on(\"paneLayoutChange\", _scheduleViewStateSave);\n\n        // Listen to key Alt-W to toggle between panes\n        CommandManager.register(Strings.CMD_SWITCH_PANE_FOCUS, Commands.CMD_SWITCH_PANE_FOCUS, switchPaneFocus);\n        // no shortcut for switch panes by default as its taken care of by double ctrl click workflow.\n    }\n\n    /**\n     * Changes the layout scheme\n     * @param {!number} rows (may be 1 or 2)\n     * @param {!number} columns (may be 1 or 2)\n     * @summay Rows or Columns may be 1 or 2 but both cannot be 2. 1x2, 2x1 or 1x1 are the legal values\n     */\n    function setLayoutScheme(rows, columns) {\n        if ((rows < 1) || (rows > 2) || (columns < 1) || (columns > 2) || (columns === 2 && rows === 2)) {\n            console.error(\"setLayoutScheme unsupported layout \" + rows + \", \" + columns);\n            return false;\n        }\n\n        if (rows === columns) {\n            _mergePanes();\n        } else if (rows > columns) {\n            _doSplit(HORIZONTAL);\n        } else {\n            _doSplit(VERTICAL);\n        }\n        return true;\n    }\n\n    /**\n     * Retrieves the current layout scheme\n     * @return {!{rows: number, columns: number>}}\n     */\n    function getLayoutScheme() {\n        var result = {\n            rows: 1,\n            columns: 1\n        };\n\n        if (_orientation === HORIZONTAL) {\n            result.rows = 2;\n        } else if (_orientation === VERTICAL) {\n            result.columns = 2;\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Setup a ready event to initialize ourself\n     */\n    AppInit.htmlReady(function () {\n        _initialize($(\"#editor-holder\"));\n    });\n\n    // Event handlers - not safe to call on() directly, due to circular dependencies\n    EventDispatcher.on_duringInit(ProjectManager, \"projectOpen\",                       _loadViewState);\n    EventDispatcher.on_duringInit(ProjectManager, \"beforeProjectClose beforeAppClose\", _saveViewState);\n    EventDispatcher.on_duringInit(EditorManager, \"activeEditorChange\",                 _activeEditorChange);\n    EventDispatcher.on_duringInit(DocumentManager, \"pathDeleted\",                      _removeDeletedFileFromMRU);\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n    // currentFileChange has a large number of listeners. so we raise warning threshold to 25\n    EventDispatcher.setLeakThresholdForEvent(EVENT_CURRENT_FILE_CHANGE, 25);\n\n    // Unit Test Helpers\n    exports._initialize                   = _initialize;\n    exports._getPane                      = _getPane;\n\n    // Private Helpers\n    exports._removeView                   = _removeView;\n    exports._moveView                     = _moveView;\n\n    // Private API\n    exports._sortWorkingSet               = _sortWorkingSet;\n    exports._moveWorkingSetItem           = _moveWorkingSetItem;\n    exports._swapWorkingSetListIndexes    = _swapWorkingSetListIndexes;\n    exports._destroyEditorIfNotNeeded     = _destroyEditorIfNotNeeded;\n    exports._edit                         = _edit;\n    exports._open                         = _open;\n    exports._close                        = _close;\n    exports._closeAll                     = _closeAll;\n    exports._closeList                    = _closeList;\n    exports._getPaneIdForPath             = _getPaneIdForPath;\n\n    // WorkingSet Management\n    exports.addToWorkingSet               = addToWorkingSet;\n    exports.addListToWorkingSet           = addListToWorkingSet;\n    exports.getWorkingSetSize             = getWorkingSetSize;\n    exports.getWorkingSet                 = getWorkingSet;\n\n    // Pane state\n    exports.cacheScrollState              = cacheScrollState;\n    exports.restoreAdjustedScrollState    = restoreAdjustedScrollState;\n\n    // Searching\n    exports.findInWorkingSet              = findInWorkingSet;\n    exports.findInWorkingSetByAddedOrder  = findInWorkingSetByAddedOrder;\n    exports.findInWorkingSetByMRUOrder    = findInWorkingSetByMRUOrder;\n    exports.findInAllWorkingSets          = findInAllWorkingSets;\n    exports.findInOpenPane                = findInOpenPane;\n    exports.findInGlobalMRUList           = _findFileInMRUList;\n\n    // Traversal\n    exports.beginTraversal                = beginTraversal;\n    exports.endTraversal                  = endTraversal;\n    exports.traverseToNextViewByMRU       = traverseToNextViewByMRU;\n    exports.traverseToNextViewInListOrder = traverseToNextViewInListOrder;\n\n    // PaneView Attributes\n    exports.getActivePaneId               = getActivePaneId;\n    exports.setActivePaneId               = setActivePaneId;\n    exports.getPaneIdList                 = getPaneIdList;\n    exports.getPaneTitle                  = getPaneTitle;\n    exports.getPaneCount                  = getPaneCount;\n    exports.isExclusiveToPane             = isExclusiveToPane;\n\n    exports.getAllOpenFiles               = getAllOpenFiles;\n    exports.focusActivePane               = focusActivePane;\n    exports.switchPaneFocus               = switchPaneFocus;\n\n    // Layout\n    exports.setLayoutScheme               = setLayoutScheme;\n    exports.getLayoutScheme               = getLayoutScheme;\n\n    // Convenience\n    exports.getCurrentlyViewedFile        = getCurrentlyViewedFile;\n    exports.getCurrentlyViewedPath        = getCurrentlyViewedPath;\n    exports.getCurrentlyViewedEditor      = getCurrentlyViewedEditor;\n    exports.getAllViewedEditors           = getAllViewedEditors;\n\n    // Constants\n    exports.ALL_PANES                     = ALL_PANES;\n    exports.ACTIVE_PANE                   = ACTIVE_PANE;\n    exports.FIRST_PANE                    = FIRST_PANE;\n    exports.SECOND_PANE                   = SECOND_PANE;\n    exports.EVENT_CURRENT_FILE_CHANGE     = EVENT_CURRENT_FILE_CHANGE;\n});\n"],"file":"MainViewManager.js"}