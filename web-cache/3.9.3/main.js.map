{"version":3,"sources":["main.js"],"names":["window","jsPromise","jqueryOrJSPromise","catch","then","finally","fail","done","console","error","Error","Promise","resolve","reject","deferredToPromise","catchToNull","promise","logError","err","trackedScriptCount","_setSplashScreenStatusUpdate","message1","message2","splashScreenFrame","document","getElementById","debugMode","scriptObserver","disconnect","log","displayBtn1","contentDocument","displayText2","textContent","callback","mutationsList","mutation","type","addedNodes","length","src","scriptAddedSplit","split","message","Phoenix","firstBoot","e","mainScripts","config","childList","_unregisterServiceWorkers","navigator","warn","serviceWorker","getRegistrations","registrations","unregisterPromises","registration","scope","push","unregister","allSettled","logger","reportError","setTimeout","isNativeApp","MutationObserver","observe","require","paths","text","i18n","fileSystemImpl","preact-compat","preact","map","*","thirdparty/CodeMirror2","thirdparty/preact","view/PanelManager","waitSeconds","location","search","indexOf","preferences/PreferencesImpl","locale","PhStore","getItem","language","SESSION_RESTART_ONCE_DUE_TO_CRITICAL_ERROR","applyStyles","element","styles","Object","assign","style","confirmReload","title","modal","createElement","modalContent","modalTitle","modalMessage","buttonsContainer","copyButton","getHelpButton","reloadButton","forEach","part","index","array","appendChild","createTextNode","buttonStyles","padding","marginRight","border","color","borderRadius","cursor","copyButtonStyles","backgroundColor","getHelpButtonStyles","reloadButtonStyles","position","top","left","width","height","zIndex","display","justifyContent","alignItems","textAlign","boxShadow","marginTop","onclick","clipboard","writeText","alert","app","openURLInDefaultBrowser","body","resetCacheAndRestart","_resetCacheIfNeeded","reload","async","_recoverOnFailure","onLine","restartedOnce","sessionStorage","shouldRestart","stack","setItem","define","Metrics"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * global util to convert jquery/js promise to a js promise. This can be used as an adapter when you do not know if the\n * promise in hand is a js or jquery deferred promise. This function will always return a normal js promise.\n * @param jqueryOrJSPromise\n * @returns {{finally}|{then}|{catch}|*}\n */\nwindow.jsPromise = function (jqueryOrJSPromise) {\n    if(jqueryOrJSPromise && jqueryOrJSPromise.catch && jqueryOrJSPromise.then && jqueryOrJSPromise.finally){\n        // this should be a normal js promise return as is\n        return  jqueryOrJSPromise;\n    }\n    if(!jqueryOrJSPromise ||\n        (jqueryOrJSPromise && !jqueryOrJSPromise.fail) || (jqueryOrJSPromise && !jqueryOrJSPromise.done)){\n        console.error(\"this function expects a jquery promise with done and fail handlers\");\n        throw new Error(\"this function expects a jquery promise with done and fail handlers\");\n    }\n    return new Promise((resolve, reject)=>{\n        jqueryOrJSPromise\n            .done(resolve)\n            .fail(reject);\n    });\n};\nwindow.deferredToPromise = window.jsPromise;\n\n/**\n * A safe way to return null on promise fail. This will never reject or throw.\n * @param promise\n * @param {string} logError - If a string is passed in, will log the error to console.\n * @return {*}\n */\nwindow.catchToNull = function (promise, logError) {\n    return new Promise(resolve=>{\n        promise.then(resolve)\n            .catch((err)=>{\n                logError && console.error(logError, err);\n                resolve(null);\n            });\n    });\n};\n\n// splash screen updates for initial install which could take time, or slow networks.\nlet trackedScriptCount = 0;\nfunction _setSplashScreenStatusUpdate(message1, message2) {\n    let splashScreenFrame = document.getElementById(\"splash-screen-frame\");\n    if(!splashScreenFrame){\n        if(!window.debugMode){\n            // If not in debug mode & splash screen isn't there, we don't need to observe dom script update status\n            // to improve performance.\n            window.scriptObserver && window.scriptObserver.disconnect();\n            console.log('startup Watcher: Disconnected script load watcher.');\n        }\n        return false;\n    }\n    let displayBtn1 = splashScreenFrame.contentDocument.getElementById(\"load-status-display-btn\");\n    let displayText2 = splashScreenFrame.contentDocument.getElementById(\"load-status-display-text\");\n    displayBtn1.textContent = message1;\n    displayText2.textContent = message2;\n    return true;\n}\n\n// Callback function to execute when mutations are observed\nconst callback = function(mutationsList) {\n    try{\n        // we have to guard here with try catch as this callback is executed on script load and any error\n        // here will break load\n        for(const mutation of mutationsList) {\n            if (mutation.type === 'childList' && mutation.addedNodes.length >0 && mutation.addedNodes[0].src) {\n                trackedScriptCount++;\n                let scriptAddedSplit = mutation.addedNodes[0].src.split(\"/\");\n                if(scriptAddedSplit.length > 0){\n                    let message = `Loading (${trackedScriptCount})`;\n                    if(window.Phoenix && window.Phoenix.firstBoot) {\n                        message = `Installing (${trackedScriptCount})`;\n                    }\n                    _setSplashScreenStatusUpdate(message, `${scriptAddedSplit[scriptAddedSplit.length-1]}`);\n                }\n            }\n        }\n    } catch (e) {\n        console.error(\"Error in script mutation observer!\", e);\n    }\n};\nconst mainScripts = document.getElementById('main-scripts-head');\nconst config = { childList: true};\n\nif(!Phoenix.isNativeApp) {\n    // in tauri, there is no splash screen, so we dont do this.\n    // Create an observer instance linked to the callback function\n    window.scriptObserver = new MutationObserver(callback);\n\n    // Start observing the target node for configured mutations\n    window.scriptObserver.observe(mainScripts, config);\n}\n\n/**\n * The bootstrapping module for brackets. This module sets up the require\n * configuration and loads the brackets module.\n */\nrequire.config({\n    paths: {\n        \"text\": \"thirdparty/text/text\",\n        \"i18n\": \"thirdparty/i18n/i18n\",\n\n        // The file system implementation. Change this value to use different\n        // implementations (e.g. cloud-based storage).\n        \"fileSystemImpl\": \"filesystem/impls/appshell/AppshellFileSystem\",\n        \"preact-compat\": \"thirdparty/preact-compat/preact-compat.min\",\n        \"preact\": \"thirdparty/preact/preact\"\n    },\n    map: {\n        \"*\": {\n            \"thirdparty/CodeMirror2\": \"thirdparty/CodeMirror\",\n            \"thirdparty/preact\": \"preact-compat\",\n            \"view/PanelManager\": \"view/WorkspaceManager\"  // For extension compatibility\n        }\n    },\n    waitSeconds: 60\n});\n\nif (window.location.search.indexOf(\"testEnvironment\") > -1) {\n    require.config({\n        paths: {\n            \"preferences/PreferencesImpl\": \"../test/TestPreferencesImpl\"\n        },\n        locale: \"en\" // force English (US)\n    });\n} else {\n    /**\n     * hack for r.js optimization, move locale to another config call\n     *\n     * Use custom brackets property until CEF sets the correct navigator.language\n     * NOTE: When we change to navigator.language here, we also should change to\n     * navigator.language in ExtensionLoader (when making require contexts for each\n     * extension).\n     */\n    require.config({\n        locale: window.PhStore.getItem(\"locale\") || window.navigator.language\n    });\n}\n\nfunction _unregisterServiceWorkers() {\n    return new Promise(resolve =>{\n        if ('serviceWorker' in navigator) {\n            console.warn(\"Recovering boot: unregistering all service workers...\");\n            navigator.serviceWorker.getRegistrations().then((registrations) => {\n                const unregisterPromises = [];\n                for (let registration of registrations) {\n                    console.warn(\"Recovering boot: unregistering\", registration.scope);\n                    unregisterPromises.push(registration.unregister());\n                }\n                Promise.allSettled(unregisterPromises)\n                    .catch(console.error)\n                    .then(()=>{\n                        console.warn(\"Recovering boot: Success, unregistered all service workers!\");\n                        resolve();\n                    });\n            }).catch(err=>{\n                console.error(\"Error getting service worker registrations for boot recovery!!!\", err);\n                window.logger && window.logger.reportError(err,\n                    'Critical error Recovering boot, while resetting service worker registrations');\n                // wait for 2 more seconds for the error to be reported to bugsnag before reloading page.\n                setTimeout(resolve, 2000);\n            });\n        } else {\n            resolve();\n        }\n    });\n}\n\nconst SESSION_RESTART_ONCE_DUE_TO_CRITICAL_ERROR = \"SESSION_RESTART_ONCE_DUE_TO_CRITICAL_ERROR\";\n\nfunction applyStyles(element, styles) {\n    Object.assign(element.style, styles);\n}\nfunction confirmReload(title, message) {\n    // vanilla js elements as we dont know if anything else is available in crash scenario\n    const modal = document.createElement('div');\n    const modalContent = document.createElement('div');\n    const modalTitle = document.createElement('h2');\n    const modalMessage = document.createElement('p');\n    const buttonsContainer = document.createElement('div'); // Container for buttons\n    const copyButton = document.createElement('button');\n    const getHelpButton = document.createElement('button');\n    const reloadButton = document.createElement('button');\n\n    // Set content\n    modalTitle.textContent = title;\n    message.split('\\n').forEach((part, index, array) => {\n        modalMessage.appendChild(document.createTextNode(part));\n        if (index < array.length - 1) { // Don't add a break on the last element\n            modalMessage.appendChild(document.createElement('br'));\n        }\n    });\n    copyButton.textContent = 'Copy Error';\n    getHelpButton.textContent = 'Get Help';\n    reloadButton.textContent = 'Restart App';\n    // Styling for visibility\n    // Define common styles for buttons\n    const buttonStyles = {\n        padding: '10px 20px',\n        marginRight: '10px', // Space between buttons\n        border: 'none',\n        color: 'white',\n        borderRadius: '5px',\n        cursor: 'pointer'\n    };\n\n    // Specific styles for different buttons\n    const copyButtonStyles = {backgroundColor: '#288edf'};\n    const getHelpButtonStyles = {backgroundColor: '#4CAF50'};\n    const reloadButtonStyles = {backgroundColor: '#4CAF50'};\n\n    modalTitle.style.color = 'red';\n    applyStyles(modal, {\n        color: 'black',\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(0, 0, 0, 0.75)',\n        zIndex: '10000000',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    });\n\n    applyStyles(modalContent, {\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '10px',\n        textAlign: 'center',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n    });\n\n    applyStyles(buttonsContainer, {\n        marginTop: '20px',\n        display: 'flex',\n        justifyContent: 'space-around'\n    });\n\n    // Apply styles to buttons\n    applyStyles(copyButton, {...buttonStyles, ...copyButtonStyles});\n    applyStyles(getHelpButton, {...buttonStyles, ...getHelpButtonStyles});\n    applyStyles(reloadButton, {...buttonStyles, ...reloadButtonStyles});\n\n    // Event listeners for buttons\n    copyButton.onclick = function() {\n        navigator.clipboard.writeText(message).then(() => {\n            alert('Error Message copied!');\n        }, (err) => {\n            console.error('Failed to copy text: ', err);\n        });\n    };\n    getHelpButton.onclick = function() {\n        Phoenix.app.openURLInDefaultBrowser(\"https://github.com/phcode-dev/phoenix/discussions\");\n    };\n\n    // Append children\n    modalContent.appendChild(modalTitle);\n    modalContent.appendChild(modalMessage);\n    buttonsContainer.appendChild(copyButton);\n    buttonsContainer.appendChild(getHelpButton);\n    buttonsContainer.appendChild(reloadButton);\n    modalContent.appendChild(buttonsContainer);\n    modal.appendChild(modalContent);\n\n    // Append modal to the body\n    document.body.appendChild(modal);\n\n    return new Promise(resolve =>{\n        reloadButton.onclick = function() {\n            resolve(true);\n            reloadButton.textContent = 'Reloading...';\n            reloadButton.style.color = 'darkgray';\n            reloadButton.style.backgroundColor = 'grey';\n        };\n    });\n}\n\nfunction resetCacheAndRestart() {\n    // try a cache reset\n    if(window._resetCacheIfNeeded){\n        window._resetCacheIfNeeded(true)\n            .finally(()=>{\n                // wait for 3 seconds for bugsnag to send report and service workers to be active.\n                setTimeout(()=>{\n                    _unregisterServiceWorkers()\n                        .then(()=>{\n                            location.reload();\n                        });\n                }, 3000);\n            });\n    } else {\n        // wait for 3 seconds for bugsnag to send report.\n        setTimeout(()=>{\n            location.reload();\n        }, 3000);\n    }\n}\n\nasync function _recoverOnFailure(err) {\n    if (!Phoenix.isNativeApp && !navigator.onLine) {\n        alert('No internet connection. Please check your connection and reload page.');\n        return;\n    }\n    // metrics api might not be available here as we were seeing no metrics raised. Only bugsnag there.\n    window.logger && window.logger.reportError(err,\n        'Critical error when loading brackets. Trying to reload again.');\n    const restartedOnce = sessionStorage.getItem(SESSION_RESTART_ONCE_DUE_TO_CRITICAL_ERROR);\n    let shouldRestart;\n    if(!restartedOnce){\n        sessionStorage.setItem(SESSION_RESTART_ONCE_DUE_TO_CRITICAL_ERROR, \"true\");\n        shouldRestart = true;\n    } else {\n        shouldRestart = await confirmReload('Oops! Something went wrong', (err.message +\"\\n\"+ err.stack)||err);\n    }\n    if(!shouldRestart) {\n        return;\n    }\n    resetCacheAndRestart();\n}\n\ndefine(function (require) {\n    // Load compatibility shims--these need to load early, be careful moving this\n    // Event dispatcher must be loaded before worker comm https://github.com/phcode-dev/phoenix/pull/678\n    require([\"utils/Metrics\", \"utils/Compatibility\", \"utils/EventDispatcher\"], function () {\n        window.Metrics = require(\"utils/Metrics\");\n        // Load the brackets module. This is a self-running module that loads and runs the entire application.\n        require([\"brackets\"], ()=>{}, _recoverOnFailure);\n    });\n});\n"],"file":"main.js"}