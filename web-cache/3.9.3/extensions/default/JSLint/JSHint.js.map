{"version":3,"sources":["extensions/default/JSLint/JSHint.js"],"names":["define","require","exports","module","CodeInspection","brackets","getModule","FileSystemError","AppInit","PreferencesManager","DocumentManager","Strings","StringUtils","ProjectManager","FileSystem","IndexingWorker","Metrics","ESLint","Phoenix","isTestWindow","on","window","_JsHintExtensionReadyToIntegTest","loadScriptInWorker","uri","prefs","getExtensionPrefs","projectSpecificOptions","jsHintConfigFileErrorMessage","PREFS_JSHINT_DISABLED","DEFAULT_OPTIONS","esversion","browser","node","jquery","rhino","jasmine","devel","_getLinterConfigFileErrorMsg","pos","line","ch","message","type","Type","ERROR","async","lintOneFile","text","_fullPath","Promise","resolve","errors","replace","options","startTime","Date","now","execPeer","then","jsHintErrors","logPerformanceTime","lintResult","length","map","lintError","character","reason","code","definePreference","description","DESCRIPTION_JSHINT_DISABLE","requestRun","JSHINT_NAME","CONFIG_FILE_NAME","removeComments","str","_readConfig","dir","configFileName","reject","configFilePath","path","join","displayPath","getProjectRelativeOrDisplayPath","getDocumentForPath","done","configDoc","isWithinProject","config","content","getText","JSON","parse","console","log","e","format","JSHINT_CONFIG_JSON_ERROR","extends","extendFile","getFileForPath","parentPath","name","baseConfigResult","mergedConfig","$","extend","globals","catch","extendDisplayPath","makeProjectRelativeIfPossible","fullPath","fail","err","NOT_FOUND","error","JSHINT_CONFIG_ERROR","_reloadOptions","scanningProjectPath","getProjectRoot","countEvent","EVENT_TYPE","LINT","isJSHintConfigActive","_projectFileChanged","_evt","changedPath","addedSet","removedSet","configPath","has","appReady","EVENT_PROJECT_CHANGED_OR_RENAMED_PATH","EVENT_PROJECT_OPEN","register","scanFileAsync","canInspect","get","endsWith","isESLintActive"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// Parts of this file is adapted from https://github.com/cfjedimaster/brackets-jshint\n\n/*global path*/\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const CodeInspection     = brackets.getModule(\"language/CodeInspection\"),\n        FileSystemError    = brackets.getModule(\"filesystem/FileSystemError\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        StringUtils        = brackets.getModule(\"utils/StringUtils\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        FileSystem         = brackets.getModule(\"filesystem/FileSystem\"),\n        IndexingWorker     = brackets.getModule(\"worker/IndexingWorker\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        ESLint       = require(\"./ESLint\");\n\n    if(Phoenix.isTestWindow) {\n        IndexingWorker.on(\"JsHint_extension_Loaded\", ()=>{\n            window._JsHintExtensionReadyToIntegTest = true;\n        });\n    }\n    IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/jslint-helper.js`);\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"jshint\"),\n        projectSpecificOptions = null,\n        jsHintConfigFileErrorMessage = null;\n\n    const PREFS_JSHINT_DISABLED = \"disabled\";\n\n    // We don't provide default options in the preferences as preferences will try to mixin default options with\n    // user defined options leading to unexpected results. Either we take user defined options or default, no mixin.\n    let DEFAULT_OPTIONS = {\n        \"esversion\": 11,\n        \"browser\": true,\n        \"node\": true,\n        \"jquery\": true,\n        \"rhino\": false, // false here means read-only global property\n        \"jasmine\": true,\n        \"devel\": false\n    };\n\n    prefs.definePreference(PREFS_JSHINT_DISABLED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_JSHINT_DISABLE\n    }).on(\"change\", function () {\n        CodeInspection.requestRun(Strings.JSHINT_NAME);\n    });\n\n    function _getLinterConfigFileErrorMsg() {\n        return [{\n            // JSLint returns 1-based line/col numbers\n            pos: { line: -1, ch: 0 },\n            message: jsHintConfigFileErrorMessage,\n            type: CodeInspection.Type.ERROR\n        }];\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, _fullPath) {\n        return new Promise((resolve)=>{\n            if(jsHintConfigFileErrorMessage){\n                resolve({ errors: _getLinterConfigFileErrorMsg() });\n                return;\n            }\n            // If a line contains only whitespace (here spaces or tabs), remove the whitespace\n            text = text.replace(/^[ \\t]+$/gm, \"\");\n\n            let options = projectSpecificOptions || DEFAULT_OPTIONS;\n\n            const startTime = Date.now();\n            IndexingWorker.execPeer(\"jsHint\", {\n                text,\n                options\n            }).then(jsHintErrors =>{\n                Metrics.logPerformanceTime(\"JSHint\", Date.now() - startTime);\n                if (!jsHintErrors.lintResult && jsHintErrors.errors.length) {\n                    let errors = jsHintErrors.errors;\n\n                    errors = errors.map(function (lintError) {\n                        return {\n                            // JSLint returns 1-based line/col numbers\n                            pos: { line: lintError.line - 1, ch: lintError.character },\n                            message: `${lintError.reason} jshint (${lintError.code})`,\n                            type: CodeInspection.Type.ERROR\n                        };\n                    });\n\n                    resolve({ errors: errors });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    const CONFIG_FILE_NAME = \".jshintrc\";\n\n    /**\n     * Removes JavaScript comments from a string by replacing\n     * everything between block comments and everything after\n     * single-line comments in a non-greedy way.\n     *\n     * English version of the regex:\n     *   match '/*'\n     *   then match zero or more instances of any character (incl. \\n)\n     *   except for instances of '* /' (without a space, obv.)\n     *   then match '* /' (again, without a space)\n     *\n     * @param {string} str a string with potential JavaScript comments.\n     * @returns {string} a string without JavaScript comments.\n     */\n    function removeComments(str) {\n        str = str || \"\";\n\n        str = str.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\//g, \"\");\n        str = str.replace(/\\/\\/[^\\n\\r]*/g, \"\"); // Everything after '//'\n\n        return str;\n    }\n\n    /**\n     * Reads configuration file in the specified directory. Returns a promise for configuration object.\n     *\n     * @param {string} dir absolute path to a directory.\n     * @param {string} configFileName name of the configuration file (optional)\n     *\n     * @returns {Promise} a promise to return configuration object.\n     */\n    function _readConfig(dir, configFileName) {\n        return new Promise((resolve, reject)=>{\n            configFileName = configFileName || CONFIG_FILE_NAME;\n            const configFilePath = path.join(dir, configFileName);\n            let displayPath = ProjectManager.getProjectRelativeOrDisplayPath(configFilePath);\n            DocumentManager.getDocumentForPath(configFilePath).done(function (configDoc) {\n                if (!ProjectManager.isWithinProject(configFilePath)) {\n                    // this is a rare race condition where the user switches project between the get document call.\n                    // Eg. in integ tests.\n                    reject(`JSHint Project changed while scanning ${configFilePath}`);\n                    return;\n                }\n                let config;\n                const content = configDoc.getText();\n                try {\n                    config = JSON.parse(removeComments(content));\n                    console.log(\"JSHint: loaded config file for project \" + configFilePath);\n                } catch (e) {\n                    console.log(\"JSHint: error parsing \" + configFilePath, content, e);\n                    // just log and return as this is an expected failure for us while the user edits code\n                    reject(StringUtils.format(Strings.JSHINT_CONFIG_JSON_ERROR, displayPath));\n                    return;\n                }\n                // Load any base config defined by \"extends\".\n                // The same functionality as in\n                // jslints -> cli.js -> loadConfig -> if (config['extends'])...\n                // https://jshint.com/docs/cli/ > Special Options\n                if (config.extends) {\n                    let extendFile = FileSystem.getFileForPath(path.join(dir, config.extends));\n                    _readConfig(extendFile.parentPath, extendFile.name).then(baseConfigResult=>{\n                        delete config.extends;\n                        let mergedConfig = $.extend({}, baseConfigResult, config);\n                        if (config.globals) {\n                            delete config.globals;\n                        }\n                        resolve(mergedConfig);\n                    }).catch(()=>{\n                        let extendDisplayPath = ProjectManager.makeProjectRelativeIfPossible(extendFile.fullPath);\n                        extendDisplayPath = ProjectManager.getProjectRelativeOrDisplayPath(extendDisplayPath);\n                        reject(StringUtils.format(Strings.JSHINT_CONFIG_JSON_ERROR, extendDisplayPath));\n                    });\n                } else {\n                    resolve(config);\n                }\n            }).fail((err)=>{\n                if(err === FileSystemError.NOT_FOUND){\n                    resolve(null); // no config file is a valid case. we just resolve with null\n                    return;\n                }\n                console.error(\"Error reading JSHint Config File\", configFilePath, err);\n                reject(StringUtils.format(Strings.JSHINT_CONFIG_ERROR, displayPath));\n            });\n        });\n    }\n\n    function _reloadOptions() {\n        projectSpecificOptions = null;\n        jsHintConfigFileErrorMessage = null;\n        const scanningProjectPath = ProjectManager.getProjectRoot().fullPath;\n        _readConfig(scanningProjectPath, CONFIG_FILE_NAME).then((config)=>{\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                // this is a rare race condition where the user switches project between the get document call.\n                // Eg. in integ tests. do nothing as another scan for the new project will be in progress.\n                return;\n            }\n            if(config) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"jsHint\", \"config\");\n            }\n            projectSpecificOptions = config;\n            jsHintConfigFileErrorMessage = null;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n        }).catch((err)=>{\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"jsHintConfig\", \"error\");\n            jsHintConfigFileErrorMessage = err;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n        });\n    }\n\n    function isJSHintConfigActive() {\n        return !!(jsHintConfigFileErrorMessage || projectSpecificOptions);\n    }\n\n    function _projectFileChanged(_evt, changedPath, addedSet, removedSet) {\n        let configPath = path.join(ProjectManager.getProjectRoot().fullPath, CONFIG_FILE_NAME);\n        if(changedPath === configPath || addedSet.has(configPath)){\n            _reloadOptions();\n        } else if(removedSet.has(configPath)){\n            projectSpecificOptions = null;\n            jsHintConfigFileErrorMessage = null;\n        }\n    }\n\n    AppInit.appReady(function () {\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CHANGED_OR_RENAMED_PATH, _projectFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _reloadOptions);\n        _reloadOptions();\n    });\n\n    // Register for JS files\n    CodeInspection.register(\"javascript\", {\n        name: Strings.JSHINT_NAME,\n        scanFileAsync: lintOneFile,\n        canInspect: function (fullPath) {\n            return !prefs.get(PREFS_JSHINT_DISABLED) && fullPath && !fullPath.endsWith(\".min.js\")\n                && (isJSHintConfigActive() || !ESLint.isESLintActive());\n            // if there is no linter, then we use jsHint as the default linter as it works in browser and native apps.\n            // remove ESLint.isESLintActive() once we add typescript language service that supports browser.\n        }\n    });\n\n    exports.isJSHintConfigActive = isJSHintConfigActive;\n});\n"],"file":"JSHint.js"}