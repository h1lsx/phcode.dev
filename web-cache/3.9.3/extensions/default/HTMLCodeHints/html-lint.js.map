{"version":3,"sources":["extensions/default/HTMLCodeHints/html-lint.js"],"names":["define","require","exports","module","CodeInspection","brackets","getModule","AppInit","Strings","StringUtils","EditorManager","ProjectManager","PreferencesManager","Metrics","FileSystem","IndexingWorker","Phoenix","isTestWindow","on","window","_htmlLintExtensionReadyToIntegTest","loadScriptInWorker","uri","prefs","getExtensionPrefs","PREFS_HTML_LINT_DISABLED","CONFIG_FILE_NAME","UNSUPPORTED_CONFIG_FILES","projectSpecificOptions","configErrorMessage","configID","projectConfigPaths","getTypeFromSeverity","sev","Type","WARNING","ERROR","META","_getLinterConfigFileErrorMsg","pos","line","ch","message","type","async","lintOneFile","text","fullPath","Promise","resolve","reject","errors","execPeer","filePath","config","then","lintResult","editor","getCurrentFullEditor","document","file","length","map","lintError","posFromIndex","start","endPos","end","ruleId","severity","moreInfoURL","ruleUrl","Error","getProjectRelativeOrDisplayPath","_readConfig","dir","configFilePath","path","join","displayPath","fs","readFile","err","content","ERR_CODES","ENOENT","code","console","error","JSON","parse","log","e","format","HTML_LINT_CONFIG_JSON_ERROR","_validateUnsupportedConfig","scanningProjectPath","errorMessage","unsupportedFileName","exists","existsAsync","HTML_LINT_CONFIG_UNSUPPORTED","getProjectRoot","requestRun","HTML_LINT_NAME","_reloadOptions","countEvent","EVENT_TYPE","LINT","catch","_getConfigPaths","fileName","_projectFileChanged","_evt","changedPath","addedSet","removedSet","configPaths","configPath","has","definePreference","description","DESCRIPTION_HTML_LINT_DISABLE","appReady","EVENT_PROJECT_CHANGED_OR_RENAMED_PATH","EVENT_PROJECT_OPEN","registration","name","scanFileAsync","canInspect","_fullPath","get","register"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/* global path, fs*/\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const CodeInspection   = brackets.getModule(\"language/CodeInspection\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        Strings            = brackets.getModule(\"strings\"),\n        StringUtils        = brackets.getModule(\"utils/StringUtils\"),\n        EditorManager      = brackets.getModule(\"editor/EditorManager\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        FileSystem         = brackets.getModule(\"filesystem/FileSystem\"),\n        IndexingWorker     = brackets.getModule(\"worker/IndexingWorker\");\n\n    if(Phoenix.isTestWindow) {\n        IndexingWorker.on(\"html_lint_extension_Loaded\", ()=>{\n            window._htmlLintExtensionReadyToIntegTest = true;\n        });\n    }\n    IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/html-worker.js`);\n\n    const prefs = PreferencesManager.getExtensionPrefs(\"HTMLLint\");\n    const PREFS_HTML_LINT_DISABLED = \"disabled\";\n    const CONFIG_FILE_NAME = \".htmlvalidate.json\";\n    const UNSUPPORTED_CONFIG_FILES = [\".htmlvalidate.js\", \".htmlvalidate.cjs\"];\n\n    let projectSpecificOptions, configErrorMessage, configID = 0;\n\n    prefs.definePreference(PREFS_HTML_LINT_DISABLED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_HTML_LINT_DISABLE\n    }).on(\"change\", function () {\n        CodeInspection.requestRun(Strings.HTML_LINT_NAME);\n    });\n\n    function getTypeFromSeverity(sev) {\n        // https://html-validate.org/guide/api/getting-started.html\n        switch (sev) {\n        case 1:  return CodeInspection.Type.WARNING;\n        case 2:  return CodeInspection.Type.ERROR;\n        default: return CodeInspection.Type.META;\n        }\n    }\n\n    function _getLinterConfigFileErrorMsg() {\n        return [{\n            // JSLint returns 1-based line/col numbers\n            pos: { line: -1, ch: 0 },\n            message: configErrorMessage,\n            type: CodeInspection.Type.ERROR\n        }];\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, fullPath) {\n        return new Promise((resolve, reject)=>{\n            if(configErrorMessage){\n                resolve({ errors: _getLinterConfigFileErrorMsg() });\n                return;\n            }\n            IndexingWorker.execPeer(\"htmlLint\", {\n                text,\n                filePath: fullPath,\n                configID,\n                config: projectSpecificOptions\n            }).then(lintResult =>{\n                const editor = EditorManager.getCurrentFullEditor();\n                if(!editor || editor.document.file.fullPath !== fullPath) {\n                    reject(new Error(\"Lint failed as  \"+ ProjectManager.getProjectRelativeOrDisplayPath(fullPath)\n                        + \" is not active.\"));\n                    return;\n                }\n                if (lintResult && lintResult.length) {\n                    lintResult = lintResult.map(function (lintError) {\n                        return {\n                            pos: editor.posFromIndex(lintError.start),\n                            endPos: editor.posFromIndex(lintError.end),\n                            message: `${lintError.message} (${lintError.ruleId})`,\n                            type: getTypeFromSeverity(lintError.severity),\n                            moreInfoURL: lintError.ruleUrl\n                        };\n                    });\n\n                    resolve({ errors: lintResult });\n                }\n                resolve();\n            });\n        });\n    }\n\n    function _readConfig(dir) {\n        return new Promise((resolve, reject)=>{\n            const configFilePath = path.join(dir, CONFIG_FILE_NAME);\n            let displayPath = ProjectManager.getProjectRelativeOrDisplayPath(configFilePath);\n            // directly reading from fs as we are still getting deleted file from document manager read.\n            fs.readFile(configFilePath, 'utf8', function (err, content) {\n                if (err && fs.ERR_CODES.ENOENT === err.code) {\n                    resolve(null); // no config file is a valid case. we just resolve with null\n                } else if(err){\n                    console.error(\"Error reading JSHint Config File\", configFilePath, err);\n                    reject(\"Error reading JSHint Config File\", displayPath);\n                } else {\n                    let config;\n                    try {\n                        config = JSON.parse(content);\n                        console.log(\"html-lint: loaded config file for project \" + configFilePath);\n                    } catch (e) {\n                        console.log(\"html-lint: error parsing \" + configFilePath, content, e);\n                        // just log and return as this is an expected failure for us while the user edits code\n                        reject(StringUtils.format(Strings.HTML_LINT_CONFIG_JSON_ERROR, displayPath));\n                        return;\n                    }\n                    resolve(config);\n                }\n            });\n        });\n    }\n\n    async function _validateUnsupportedConfig(scanningProjectPath) {\n        let errorMessage;\n        for(let unsupportedFileName of UNSUPPORTED_CONFIG_FILES) {\n            let exists = await FileSystem.existsAsync(path.join(scanningProjectPath, unsupportedFileName));\n            if(exists) {\n                errorMessage = StringUtils.format(Strings.HTML_LINT_CONFIG_UNSUPPORTED, unsupportedFileName);\n                break;\n            }\n        }\n        if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath) {\n            // this is a rare race condition where the user switches project between the config reload\n            // Eg. in integ tests. do nothing as another scan for the new project will be in progress.\n            return;\n        }\n        configErrorMessage = errorMessage;\n        CodeInspection.requestRun(Strings.HTML_LINT_NAME);\n    }\n\n    function _reloadOptions() {\n        projectSpecificOptions = null;\n        configErrorMessage = null;\n        const scanningProjectPath = ProjectManager.getProjectRoot().fullPath;\n        configID++;\n        _readConfig(scanningProjectPath).then((config)=>{\n            configID++;\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                // this is a rare race condition where the user switches project between the get document call.\n                // Eg. in integ tests. do nothing as another scan for the new project will be in progress.\n                return;\n            }\n            if(config) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"html\", \"configPresent\");\n                projectSpecificOptions = config;\n                configErrorMessage = null;\n                CodeInspection.requestRun(Strings.HTML_LINT_NAME);\n            } else {\n                _validateUnsupportedConfig(scanningProjectPath)\n                    .catch(console.error);\n            }\n        }).catch((err)=>{\n            configID++;\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"HTMLConfig\", \"error\");\n            configErrorMessage = err;\n            CodeInspection.requestRun(Strings.HTML_LINT_NAME);\n        });\n    }\n\n    let projectConfigPaths;\n    function _getConfigPaths() {\n        if(!projectConfigPaths){\n            projectConfigPaths=[\n                path.join(ProjectManager.getProjectRoot().fullPath, CONFIG_FILE_NAME),\n                ...UNSUPPORTED_CONFIG_FILES.map(fileName=>\n                    path.join(ProjectManager.getProjectRoot().fullPath, fileName))\n            ];\n        }\n        return projectConfigPaths;\n    }\n\n    function _projectFileChanged(_evt, changedPath, addedSet, removedSet) {\n        const configPaths = _getConfigPaths();\n        for(let configPath of configPaths) {\n            if(changedPath=== configPath || addedSet.has(configPath) || removedSet.has(configPath)){\n                _reloadOptions();\n                return;\n            }\n        }\n    }\n\n    AppInit.appReady(function () {\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CHANGED_OR_RENAMED_PATH, _projectFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, ()=>{\n            projectConfigPaths = null;\n            _reloadOptions();\n        });\n        _reloadOptions();\n    });\n\n    const registration = {\n        name: Strings.HTML_LINT_NAME,\n        scanFileAsync: lintOneFile,\n        canInspect: function (_fullPath) {\n            return !prefs.get(PREFS_HTML_LINT_DISABLED);\n        }\n    };\n    CodeInspection.register(\"html\", registration);\n    CodeInspection.register(\"php\", registration);\n});\n"],"file":"html-lint.js"}