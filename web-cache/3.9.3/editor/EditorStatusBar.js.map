{"version":3,"sources":["editor/EditorStatusBar.js"],"names":["define","require","exports","module","_","AnimationUtils","AppInit","DropdownButton","EditorManager","MainViewManager","Editor","KeyEvent","LanguageManager","PreferencesManager","StatusBar","Strings","InMemoryFile","ProjectManager","Async","TaskManager","FileSystem","CommandManager","Commands","DocumentManager","StringUtils","Metrics","SupportedEncodings","fs","SUPPORTED_ENCODINGS","sort","languageSelect","encodingSelect","tasksSelect","$cursorInfo","$fileInfo","$indentType","$indentAuto","$indentWidthLabel","$indentWidthInput","$statusOverwrite","LANGUAGE_SET_AS_DEFAULT","_formatCountable","number","singularStr","pluralStr","format","_updateLanguageInfo","editor","doc","lang","document","getLanguage","$button","text","getName","_updateEncodingInfo","file","_encoding","_updateFileInfo","lines","lineCount","STATUSBAR_LINE_COUNT_SINGULAR","STATUSBAR_LINE_COUNT_PLURAL","_updateIndentType","fullPath","indentWithTabs","getUseTabChar","STATUSBAR_TAB_SIZE","STATUSBAR_SPACES","attr","STATUSBAR_INDENT_TOOLTIP_SPACES","STATUSBAR_INDENT_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES","_updateAutoIndent","autoIndent","getAutoTabSpaces","html","STATUSBAR_AUTO_INDENT","STATUSBAR_FIXED_INDENT","_getIndentSize","getTabSize","getSpaceUnits","_updateIndentSize","size","val","_toggleIndentType","current","getActiveEditor","setUseTabChar","_toggleAutoIndent","setAutoTabSpaces","_autoDetectTabSpaces","_updateCursorInfo","event","cursor","getCursorPos","cursorStr","STATUSBAR_CURSOR_POSITION","line","ch","sels","getSelections","selStr","length","countEvent","EVENT_TYPE","EDITOR","STATUSBAR_SELECTION_MULTIPLE","hasSelection","sel","start","end","STATUSBAR_SELECTION_LINE_SINGULAR","STATUSBAR_SELECTION_LINE_PLURAL","cols","getColOffset","STATUSBAR_SELECTION_CH_SINGULAR","STATUSBAR_SELECTION_CH_PLURAL","_changeIndentWidth","value","removeClass","addClass","off","focusActivePane","valInt","parseInt","setTabSize","setSpaceUnits","_updateOverwriteLabel","newstate","doNotAnimate","STATUSBAR_OVERWRITE","STATUSBAR_INSERT","animateUsingClass","_updateEditorOverwriteMode","_codeMirror","state","overwrite","toggleOverwrite","_initOverwriteMode","currentEditor","STATUSBAR_INSOVR_TOOLTIP","_onActiveEditorChange","previous","releaseRef","showAllPanes","on","window","setTimeout","addRef","hideAllPanes","_populateLanguageDropdown","languages","values","getLanguages","filter","language","isBinary","a","b","toLowerCase","localeCompare","items","unshift","_changeEncodingAndReloadDoc","promise","reload","done","readTimestamp","encoding","getViewState","STATE_PROJECT_CONTEXT","setViewState","fail","error","console","log","_populateEncodingDropdown","_init","$","item","index","defaultLang","getLanguageForPath","label","escape","STATUSBAR_SET_DEFAULT_LANG","getCompoundFileExtension","enabled","STATUSBAR_DEFAULT_LANG","dropdownExtraClasses","append","STATUSBAR_LANG_TOOLTIP","STATUSBAR_ENCODING_TOOLTIP","hideSpinner","STATUSBAR_TASKS","STATUSBAR_TASKS_HIDE_SPINNER","_renderItem","_setTaskSelect","STATUSBAR_TASKS_TOOLTIP","e","selection","_onSelect","EVENT_DROPDOWN_SHOWN","evt","_onDropdownShown","focus","keyCode","DOM_VK_RETURN","blur","DOM_VK_ESCAPE","select","fileType","filelanguageName","_name","fileExtensionMap","get","getId","set","setLanguageOverrideForPath","originalPath","originalEncoding","isDirty","execute","FILE_SAVE_AS","getCurrentDocument","_checkFileExistance","filePath","deferred","Deferred","fileEntry","getFileForPath","exists","err","resolve","reject","doSequentially","Object","keys","always","htmlReady","appReady","show"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global fs*/\n\n/**\n * Manages parts of the status bar related to the current editor's state.\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    const _                    = require(\"thirdparty/lodash\"),\n        AnimationUtils       = require(\"utils/AnimationUtils\"),\n        AppInit              = require(\"utils/AppInit\"),\n        DropdownButton       = require(\"widgets/DropdownButton\"),\n        EditorManager        = require(\"editor/EditorManager\"),\n        MainViewManager      = require(\"view/MainViewManager\"),\n        Editor               = require(\"editor/Editor\").Editor,\n        KeyEvent             = require(\"utils/KeyEvent\"),\n        LanguageManager      = require(\"language/LanguageManager\"),\n        PreferencesManager   = require(\"preferences/PreferencesManager\"),\n        StatusBar            = require(\"widgets/StatusBar\"),\n        Strings              = require(\"strings\"),\n        InMemoryFile         = require(\"document/InMemoryFile\"),\n        ProjectManager       = require(\"project/ProjectManager\"),\n        Async                = require(\"utils/Async\"),\n        TaskManager    = require(\"features/TaskManager\"),\n        FileSystem           = require(\"filesystem/FileSystem\"),\n        CommandManager       = require(\"command/CommandManager\"),\n        Commands             = require(\"command/Commands\"),\n        DocumentManager      = require(\"document/DocumentManager\"),\n        StringUtils          = require(\"utils/StringUtils\"),\n        Metrics              = require(\"utils/Metrics\");\n\n    const SupportedEncodings = fs.SUPPORTED_ENCODINGS.sort();\n\n    /* StatusBar indicators */\n    var languageSelect, // this is a DropdownButton instance\n        encodingSelect, // this is a DropdownButton instance\n        tasksSelect, // this is a DropdownButton instance\n        $cursorInfo,\n        $fileInfo,\n        $indentType,\n        $indentAuto,\n        $indentWidthLabel,\n        $indentWidthInput,\n        $statusOverwrite;\n\n    /** Special list item for the 'set as default' gesture in language switcher dropdown */\n    var LANGUAGE_SET_AS_DEFAULT = {};\n\n\n    /**\n     * Determine string based on count\n     * @param {number} number Count\n     * @param {string} singularStr Singular string\n     * @param {string} pluralStr Plural string\n     * @return {string} Proper string to use for count\n     */\n    function _formatCountable(number, singularStr, pluralStr) {\n        return StringUtils.format(number > 1 ? pluralStr : singularStr, number);\n    }\n\n    /**\n     * Update file mode\n     * @param {Editor} editor Current editor\n     */\n    function _updateLanguageInfo(editor) {\n        var doc = editor.document,\n            lang = doc.getLanguage();\n\n        // Show the current language as button title\n        languageSelect.$button.text(lang.getName());\n    }\n\n    /**\n     * Update encoding\n     * @param {Editor} editor Current editor\n     */\n    function _updateEncodingInfo(editor) {\n        var doc = editor.document;\n\n        // Show the current encoding as button title\n        if (!doc.file._encoding) {\n            doc.file._encoding = \"utf8\";\n        }\n        encodingSelect.$button.text(doc.file._encoding);\n    }\n\n    /**\n     * Update file information\n     * @param {Editor} editor Current editor\n     */\n    function _updateFileInfo(editor) {\n        var lines = editor.lineCount();\n        $fileInfo.text(_formatCountable(lines, Strings.STATUSBAR_LINE_COUNT_SINGULAR, Strings.STATUSBAR_LINE_COUNT_PLURAL));\n    }\n\n    /**\n     * Update indent type and size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentType(fullPath) {\n        var indentWithTabs = Editor.getUseTabChar(fullPath);\n        $indentType.text(indentWithTabs ? Strings.STATUSBAR_TAB_SIZE : Strings.STATUSBAR_SPACES);\n        $indentType.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_TOOLTIP_SPACES : Strings.STATUSBAR_INDENT_TOOLTIP_TABS);\n        $indentWidthLabel.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_TABS : Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES);\n    }\n\n    function _updateAutoIndent(fullPath) {\n        const autoIndent = Editor.getAutoTabSpaces(fullPath);\n        $indentAuto.html(autoIndent ? Strings.STATUSBAR_AUTO_INDENT : Strings.STATUSBAR_FIXED_INDENT);\n    }\n\n    /**\n     * Get indent size based on type\n     * @param {string} fullPath Path to file in current editor\n     * @return {number} Indent size\n     */\n    function _getIndentSize(fullPath) {\n        return Editor.getUseTabChar(fullPath) ? Editor.getTabSize(fullPath) : Editor.getSpaceUnits(fullPath);\n    }\n\n    /**\n     * Update indent size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentSize(fullPath) {\n        var size = _getIndentSize(fullPath);\n        $indentWidthLabel.text(size);\n        $indentWidthInput.val(size);\n    }\n\n    /**\n     * Toggle indent type\n     */\n    function _toggleIndentType() {\n        var current = EditorManager.getActiveEditor(),\n            fullPath = current && current.document.file.fullPath;\n\n        Editor.setUseTabChar(!Editor.getUseTabChar(fullPath), fullPath);\n        _updateIndentType(fullPath);\n        _updateAutoIndent(fullPath);\n        _updateIndentSize(fullPath);\n    }\n\n    function _toggleAutoIndent() {\n        const current = EditorManager.getActiveEditor(),\n            fullPath = current && current.document.file.fullPath;\n        Editor.setAutoTabSpaces(!Editor.getAutoTabSpaces(fullPath), fullPath);\n        if(Editor.getAutoTabSpaces(fullPath)){\n            // if the user explicitly clicked on the auto indent status bar icon, he might mean to recompute it\n            Editor._autoDetectTabSpaces(current, true, true);\n        }\n        _updateIndentType(fullPath);\n        _updateAutoIndent(fullPath);\n        _updateIndentSize(fullPath);\n    }\n\n    /**\n     * Update cursor(s)/selection(s) information\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     */\n    function _updateCursorInfo(event, editor) {\n        editor = editor || EditorManager.getActiveEditor();\n\n        // compute columns, account for tab size\n        var cursor = editor.getCursorPos(true);\n\n        var cursorStr = StringUtils.format(Strings.STATUSBAR_CURSOR_POSITION, cursor.line + 1, cursor.ch + 1);\n\n        var sels = editor.getSelections(),\n            selStr = \"\";\n\n        if (sels.length > 1) {\n            //Send analytics data for multicursor use\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"multiCursor\",\n                \"usage\"\n            );\n            selStr = StringUtils.format(Strings.STATUSBAR_SELECTION_MULTIPLE, sels.length);\n        } else if (editor.hasSelection()) {\n            var sel = sels[0];\n            if (sel.start.line !== sel.end.line) {\n                var lines = sel.end.line - sel.start.line + 1;\n                if (sel.end.ch === 0) {\n                    lines--;  // end line is exclusive if ch is 0, inclusive otherwise\n                }\n                selStr = _formatCountable(lines, Strings.STATUSBAR_SELECTION_LINE_SINGULAR, Strings.STATUSBAR_SELECTION_LINE_PLURAL);\n            } else {\n                var cols = editor.getColOffset(sel.end) - editor.getColOffset(sel.start);  // end ch is exclusive always\n                selStr = _formatCountable(cols, Strings.STATUSBAR_SELECTION_CH_SINGULAR, Strings.STATUSBAR_SELECTION_CH_PLURAL);\n            }\n        }\n        $cursorInfo.text(cursorStr + selStr);\n    }\n\n    /**\n     * Change indent size\n     * @param {string} fullPath Path to file in current editor\n     * @param {string} value Size entered into status bar\n     */\n    function _changeIndentWidth(fullPath, value) {\n        $indentWidthLabel.removeClass(\"hidden\");\n        $indentWidthInput.addClass(\"hidden\");\n\n        // remove all event handlers from the input field\n        $indentWidthInput.off(\"blur keyup\");\n\n        // restore focus to the editor\n        MainViewManager.focusActivePane();\n\n        var valInt = parseInt(value, 10);\n        if (Editor.getUseTabChar(fullPath)) {\n            if (!Editor.setTabSize(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        } else {\n            if (!Editor.setSpaceUnits(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        }\n\n        // update indicator\n        _updateIndentSize(fullPath);\n\n        // column position may change when tab size changes\n        _updateCursorInfo();\n    }\n\n    /**\n     * Update insert/overwrite label\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     * @param {string} newstate New overwrite state\n     * @param {boolean=} doNotAnimate True if state should not be animated\n     */\n    function _updateOverwriteLabel(event, editor, newstate, doNotAnimate) {\n        if ($statusOverwrite.text() === (newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT)) {\n            // label already up-to-date\n            return;\n        }\n\n        $statusOverwrite.text(newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT);\n\n        if (!doNotAnimate) {\n            AnimationUtils.animateUsingClass($statusOverwrite[0], \"flash\", 1500);\n        }\n    }\n\n    /**\n     * Update insert/overwrite indicator\n     * @param {Event} event (unused)\n     */\n    function _updateEditorOverwriteMode(event) {\n        var editor = EditorManager.getActiveEditor(),\n            newstate = !editor._codeMirror.state.overwrite;\n\n        // update label with no transition\n        _updateOverwriteLabel(event, editor, newstate, true);\n        editor.toggleOverwrite(newstate);\n    }\n\n    /**\n     * Initialize insert/overwrite indicator\n     * @param {Editor} currentEditor Current editor\n     */\n    function _initOverwriteMode(currentEditor) {\n        currentEditor.toggleOverwrite($statusOverwrite.text() === Strings.STATUSBAR_OVERWRITE);\n        $statusOverwrite.attr(\"title\", Strings.STATUSBAR_INSOVR_TOOLTIP);\n    }\n\n    /**\n     * Handle active editor change event\n     * @param {Event} event (unused)\n     * @param {Editor} current Current editor\n     * @param {Editor} previous Previous editor\n     */\n    function _onActiveEditorChange(event, current, previous) {\n        if (previous) {\n            previous.off(\".statusbar\");\n            previous.document.off(\".statusbar\");\n            previous.document.releaseRef();\n        }\n\n        if (!current) {\n            StatusBar.hideAllPanes();\n        } else {\n            Editor._autoDetectTabSpaces(current);\n            const fullPath = current.document.file.fullPath;\n            StatusBar.showAllPanes();\n\n            current.on(\"cursorActivity.statusbar\", _updateCursorInfo);\n            current.on(\"optionChange.statusbar\", function () {\n                _updateIndentType(fullPath);\n                _updateAutoIndent(fullPath);\n                _updateIndentSize(fullPath);\n            });\n            current.on(\"change.statusbar\", function () {\n                // async update to keep typing speed smooth\n                window.setTimeout(function () { _updateFileInfo(current); }, 0);\n            });\n            current.on(\"overwriteToggle.statusbar\", _updateOverwriteLabel);\n\n            current.document.addRef();\n            current.document.on(\"languageChanged.statusbar\", function () {\n                _updateLanguageInfo(current);\n            });\n\n            _updateCursorInfo(null, current);\n            _updateLanguageInfo(current);\n            _updateEncodingInfo(current);\n            _updateFileInfo(current);\n            _initOverwriteMode(current);\n            _updateIndentType(fullPath);\n            _updateAutoIndent(fullPath);\n            _updateIndentSize(fullPath);\n        }\n    }\n\n    /**\n     * Populate the languageSelect DropdownButton's menu with all registered Languages\n     */\n    function _populateLanguageDropdown() {\n        // Get all non-binary languages\n        var languages = _.values(LanguageManager.getLanguages()).filter(function (language) {\n            return !language.isBinary();\n        });\n\n        // sort dropdown alphabetically\n        languages.sort(function (a, b) {\n            return a.getName().toLowerCase().localeCompare(b.getName().toLowerCase());\n        });\n\n        languageSelect.items = languages;\n\n        // Add option to top of menu for persisting the override\n        languageSelect.items.unshift(\"---\");\n        languageSelect.items.unshift(LANGUAGE_SET_AS_DEFAULT);\n    }\n\n    /**\n     * Change the encoding and reload the current document.\n     * If passed then save the preferred encoding in state.\n     */\n    function _changeEncodingAndReloadDoc(document) {\n        var promise = document.reload();\n        promise.done(function (text, readTimestamp) {\n            encodingSelect.$button.text(document.file._encoding);\n            // Store the preferred encoding in the state\n            const encoding = PreferencesManager.getViewState(\"encoding\", PreferencesManager.STATE_PROJECT_CONTEXT);\n            encoding[document.file.fullPath] = document.file._encoding;\n            PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n        });\n        promise.fail(function (error) {\n            console.log(\"Error reloading contents of \" + document.file.fullPath, error);\n        });\n    }\n\n\n    /**\n     * Populate the encodingSelect DropdownButton's menu with all registered encodings\n     */\n    function _populateEncodingDropdown() {\n        encodingSelect.items = SupportedEncodings;\n    }\n\n    /**\n     * Initialize\n     */\n    function _init() {\n\n        $cursorInfo         = $(\"#status-cursor\");\n        $fileInfo           = $(\"#status-file\");\n        $indentType         = $(\"#indent-type\");\n        $indentAuto         = $(\"#indent-auto\");\n        $indentWidthLabel   = $(\"#indent-width-label\");\n        $indentWidthInput   = $(\"#indent-width-input\");\n        $statusOverwrite    = $(\"#status-overwrite\");\n\n        languageSelect      = new DropdownButton.DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document,\n                defaultLang = LanguageManager.getLanguageForPath(document.file.fullPath, true);\n\n            if (item === LANGUAGE_SET_AS_DEFAULT) {\n                var label = _.escape(StringUtils.format(Strings.STATUSBAR_SET_DEFAULT_LANG, LanguageManager.getCompoundFileExtension(document.file.fullPath)));\n                return { html: label, enabled: document.getLanguage() !== defaultLang };\n            }\n\n            var html = _.escape(item.getName());\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === defaultLang) {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.getLanguage()) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        languageSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        languageSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-language\").append(languageSelect.$button);\n        languageSelect.$button.attr(\"title\", Strings.STATUSBAR_LANG_TOOLTIP);\n\n\n        encodingSelect = new DropdownButton.DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document;\n            var html = _.escape(item);\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === \"utf8\") {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.file._encoding) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        encodingSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        encodingSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-encoding\").append(encodingSelect.$button);\n        encodingSelect.$button.attr(\"title\", Strings.STATUSBAR_ENCODING_TOOLTIP);\n        let hideSpinner = PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n        if(hideSpinner){\n            $(\"#status-tasks .spinner\").addClass(\"hide-spinner\");\n        }\n\n        tasksSelect = new DropdownButton.DropdownButton(Strings.STATUSBAR_TASKS, [Strings.STATUSBAR_TASKS_HIDE_SPINNER], function (item, index) {\n            if (item === Strings.STATUSBAR_TASKS_HIDE_SPINNER) {\n                hideSpinner = PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n                if(hideSpinner){\n                    return  \"<span class='checked-spinner'></span>\" + item;\n                }\n                return item;\n            }\n            return TaskManager._renderItem(item, index);\n        });\n        TaskManager._setTaskSelect(tasksSelect);\n\n        tasksSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        tasksSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-tasks\").append(tasksSelect.$button);\n        tasksSelect.$button.attr(\"title\", Strings.STATUSBAR_TASKS_TOOLTIP);\n        tasksSelect.on(\"select\", function (e, selection) {\n            if(selection === Strings.STATUSBAR_TASKS_HIDE_SPINNER){\n                hideSpinner = !PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n                PreferencesManager.setViewState(\"StatusBar.HideSpinner\", hideSpinner);\n                if(hideSpinner){\n                    $(\"#status-tasks .spinner\").addClass(\"hide-spinner\");\n                } else {\n                    $(\"#status-tasks .spinner\").removeClass(\"hide-spinner\");\n                }\n                return;\n            }\n            return TaskManager._onSelect(e, selection);\n        });\n        tasksSelect.on(DropdownButton.EVENT_DROPDOWN_SHOWN, (evt)=>{\n            return TaskManager._onDropdownShown(evt);\n        });\n\n        // indentation event handlers\n        $indentType.on(\"click\", _toggleIndentType);\n        $indentAuto.on(\"click\", _toggleAutoIndent);\n        $indentWidthLabel\n            .on(\"click\", function () {\n                // update the input value before displaying\n                var fullPath = EditorManager.getActiveEditor().document.file.fullPath;\n                $indentWidthInput.val(_getIndentSize(fullPath));\n\n                $indentWidthLabel.addClass(\"hidden\");\n                $indentWidthInput.removeClass(\"hidden\");\n                $indentWidthInput.focus();\n\n                $indentWidthInput\n                    .on(\"blur\", function () {\n                        _changeIndentWidth(fullPath, $indentWidthInput.val());\n                    })\n                    .on(\"keyup\", function (event) {\n                        if (event.keyCode === KeyEvent.DOM_VK_RETURN) {\n                            $indentWidthInput.blur();\n                        } else if (event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                            _changeIndentWidth(fullPath, false);\n                        }\n                    });\n            });\n\n        $indentWidthInput.focus(function () { $indentWidthInput.select(); });\n\n        // Language select change handler\n        languageSelect.on(\"select\", function (e, lang) {\n            var document = EditorManager.getActiveEditor().document,\n                fullPath = document.file.fullPath;\n\n            var fileType = (document.file instanceof InMemoryFile) ? \"newFile\" : \"existingFile\",\n                filelanguageName = lang ? lang._name||\"\" : \"\";\n\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"languageChange\",\n                `${filelanguageName.toLowerCase()}-${fileType}`\n            );\n\n            if (lang === LANGUAGE_SET_AS_DEFAULT) {\n                // Set file's current language in preferences as a file extension override (only enabled if not default already)\n                var fileExtensionMap = PreferencesManager.get(\"language.fileExtensions\");\n                fileExtensionMap[LanguageManager.getCompoundFileExtension(fullPath)] = document.getLanguage().getId();\n                PreferencesManager.set(\"language.fileExtensions\", fileExtensionMap);\n\n            } else {\n                // Set selected language as a path override for just this one file (not persisted)\n                var defaultLang = LanguageManager.getLanguageForPath(fullPath, true);\n                // if default language selected, pass null to clear the override\n                LanguageManager.setLanguageOverrideForPath(fullPath, lang === defaultLang ? null : lang);\n            }\n        });\n\n        // Encoding select change handler\n        encodingSelect.on(\"select\", function (e, encoding) {\n            var document = EditorManager.getActiveEditor().document,\n                originalPath = document.file.fullPath,\n                originalEncoding = document.file._encoding;\n\n            document.file._encoding = encoding;\n            if (!(document.file instanceof InMemoryFile) && document.isDirty) {\n                CommandManager.execute(Commands.FILE_SAVE_AS, {doc: document}).done(function () {\n                    var doc = DocumentManager.getCurrentDocument();\n                    if (originalPath === doc.file.fullPath) {\n                        _changeEncodingAndReloadDoc(doc);\n                    } else {\n                        document.file._encoding = originalEncoding;\n                    }\n                }).fail(function () {\n                    document.file._encoding = originalEncoding;\n                });\n            } else if (document.file instanceof InMemoryFile) {\n                encodingSelect.$button.text(encoding);\n            } else if (!document.isDirty) {\n                _changeEncodingAndReloadDoc(document);\n            }\n        });\n\n        $statusOverwrite.on(\"click\", _updateEditorOverwriteMode);\n    }\n\n    // Initialize: status bar focused listener\n    EditorManager.on(\"activeEditorChange\", _onActiveEditorChange);\n\n    function _checkFileExistance(filePath, index, encoding) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(filePath);\n\n        fileEntry.exists(function (err, exists) {\n            if (!err && exists) {\n                deferred.resolve();\n            } else {\n                delete encoding[filePath];\n                deferred.reject();\n            }\n        });\n\n        return deferred.promise();\n    }\n\n    ProjectManager.on(\"projectOpen\", function () {\n        let encoding = PreferencesManager.getViewState(\"encoding\", PreferencesManager.STATE_PROJECT_CONTEXT);\n        if (!encoding) {\n            encoding = {};\n            PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n        }\n        Async.doSequentially(Object.keys(encoding), function (filePath, index) {\n            return _checkFileExistance(filePath, index, encoding);\n        }, false)\n            .always(function () {\n                PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n            });\n    });\n\n    AppInit.htmlReady(_init);\n    AppInit.appReady(function () {\n        // Populate language switcher with all languages after startup; update it later if this set changes\n        _populateLanguageDropdown();\n        _populateEncodingDropdown();\n        LanguageManager.on(\"languageAdded languageModified\", _populateLanguageDropdown);\n        _onActiveEditorChange(null, EditorManager.getActiveEditor(), null);\n        StatusBar.show();\n    });\n});\n"],"file":"EditorStatusBar.js"}