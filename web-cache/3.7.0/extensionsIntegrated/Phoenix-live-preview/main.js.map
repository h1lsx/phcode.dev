{"version":3,"sources":["extensionsIntegrated/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","EditorManager","FileViewController","DocumentManager","ExtensionInterface","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ModalBar","PreferencesManager","ProjectManager","MainViewManager","Strings","Mustache","Metrics","LiveDevelopment","LiveDevServerManager","NativeApp","StringUtils","FileSystem","BrowserStaticServer","NodeStaticServer","LivePreviewSettings","NodeUtils","TrustProjectHTML","panelHTML","Dialogs","DefaultDialogs","utils","StateManager","stateManager","STATE_CUSTOM_SERVER_BANNER_ACK","customServerModalBar","isBrowser","Phoenix","isNativeApp","StaticServer","EVENT_EMBEDDED_IFRAME_WHO_AM_I","EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR","PREVIEW_TRUSTED_PROJECT_KEY","PREVIEW_PROJECT_README_KEY","LIVE_PREVIEW_PANEL_ID","LIVE_PREVIEW_IFRAME_ID","LIVE_PREVIEW_IFRAME_HTML","$icon","$settingsIcon","$iframe","$panel","$pinUrlBtn","$highlightBtn","$livePreviewPopBtn","$reloadBtn","$chromeButton","$safariButton","$edgeButton","$firefoxButton","$chromeButtonBallast","$safariButtonBallast","$edgeButtonBallast","$firefoxButtonBallast","$panelTitle","isTestWindow","window","_livePreviewIntegTest","urlLoadCount","customLivePreviewBannerShown","_isLiveHighlightEnabled","get","FILE_LIVE_HIGHLIGHT","getChecked","_getTrustProjectPage","trustProjectMessage","format","TRUST_PROJECT","path","basename","getProjectRoot","fullPath","templateVars","render","_isProjectPreviewTrusted","projectPath","getWelcomeProjectPath","getExploreProjectPath","isTrustedProject","PhStore","getItem","_setProjectReadmePreviewdOnce","previewReadmeKey","setItem","_isProjectReadmePreviewdOnce","_createStaticServer","config","pathResolver","makeProjectRelativeIfPossible","root","on","iframeDom","contentWindow","postMessage","type","isTauri","editor","getActiveEditor","focus","_trustCurrentProjectForLivePreview","attr","isTrustedProjectKey","_loadPreview","registerExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","loadStyleSheet","panel","urlPinned","currentLivePreviewURL","currentPreviewFile","panelShownAtStartup","_blankIframe","newIframe","$","insertAfter","remove","_setPanelVisibility","isVisible","toggleClass","show","hide","_startOrStopLivePreviewIfRequired","explicitClickOnLPIcon","visible","isInactive","openLivePreview","isActive","hasActiveLivePreviews","closeLivePreview","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_updateLiveHighlightToggleStatus","isHighlightEnabled","_toggleLiveHighlights","togglePreviewHighlight","ALLOWED_BROWSERS_NAMES","_popoutLivePreview","browserName","openURL","getTabPopoutURL","includes","openUrlInBrowser","then","catch","err","console","error","showModalDialog","DIALOG_ID_ERROR","LIVE_DEV_OPEN_ERROR_TITLE","LIVE_DEV_OPEN_ERROR_MESSAGE","openURLInDefaultBrowser","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","LIVE_DEV_TOOLTIP_SHOW_IN_EDITOR","text","_showOpenBrowserIcons","brackets","platform","async","_createExtensionPanel","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","toggleLiveHighlight","LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT","livePreviewSettings","LIVE_DEV_SETTINGS","clickToPopout","LIVE_DEV_CLICK_POPOUT","openInChrome","LIVE_DEV_OPEN_CHROME","openInSafari","LIVE_DEV_OPEN_SAFARI","openInEdge","LIVE_DEV_OPEN_EDGE","openInFirefox","LIVE_DEV_OPEN_FIREFOX","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","document","body","clientWidth","click","find","execute","FILE_LIVE_FILE_PREVIEW_SETTINGS","onload","openPanes","findInAllWorkingSets","paneToUse","ACTIVE_PANE","length","paneId","openFileAndAddToWorkingSet","popoutSupported","browser","desktop","isChromeBased","isFirefox","createPluginPanel","recomputeLayout","force","isReload","isPreviewLoadable","previewDetails","getPreviewDetails","newSrc","encodeURI","URL","existingPreviewFile","existingPreviewURL","isNoPreview","isWithinProject","relativeOrFullPath","app","getDisplayPath","isCustomServer","isUsingCustomServer","LIVE_PREVIEW_CUSTOM_SERVER_BANNER","getCustomServeBaseURL","getExtension","redirectAllTabs","redirectURL","redirectURLforce","_projectFileChanges","evt","changedFile","isPreviewableFile","isServerRenderedFile","shouldReload","serverSupportsHotReload","isHTMLFile","_openReadmeMDIfFirstTime","readmePath","fileEntry","getFileForPath","exists","CMD_ADD_TO_WORKINGSET_AND_OPEN","_projectOpened","_evt","_customServerMetrics","getNoPreviewURL","currentDocument","getCurrentDocument","currentFile","file","getSelectedItem","isPreviewable","_projectClosed","close","_activeDocChanged","_openLivePreviewURL","_event","currentPreviewDetails","_currentFileChanged","_shouldShowCustomServerBar","_showCustomServerBar","shouldUseInbuiltPreview","isMarkdownFile","isSVG","getCustomServerConfig","_showSettingsDialog","Promise","resolve","showSettingsDialog","getCustomServerFramework","isBannerAck","PROJECT_CONTEXT","searchBarHTML","LIVE_DEV_SETTINGS_BANNER","CLOSE","$modal","getRoot","set","appReady","isSpecRunnerWindow","shouldShowLivePreviewAtStartup","init","registerServer","create","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","CMD_LIVE_FILE_PREVIEW_SETTINGS","fileMenu","getMenu","AppMenuBar","FILE_MENU","refreshPreview","addMenuItem","AFTER","FILE_EXTENSION_MANAGER","addMenuDivider","BEFORE","EVENT_OPEN_PREVIEW_URL","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED","EVENT_LIVE_PREVIEW_RELOAD","customServerRefreshedOnce","_handleNewCustomServer","EVENT_SERVER_READY","event","EVENT_SERVER_CHANGED","EVENT_CUSTOM_SERVER_ENABLED_CHANGED","enabled","consecutiveEmptyClientsCount","setInterval"],"mappings":"AAyCAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAAmBH,QAAQ,wBAC7BI,cAAqBJ,QAAQ,wBAC7BK,mBAAsBL,QAAQ,8BAC9BM,gBAAkBN,QAAQ,4BAC1BO,mBAAqBP,QAAQ,4BAC7BQ,eAAqBR,QAAQ,0BAC7BS,SAAqBT,QAAQ,oBAC7BU,MAAqBV,QAAQ,iBAC7BW,iBAAqBX,QAAQ,yBAC7BY,QAAqBZ,QAAQ,iBAC7Ba,SAAqBb,QAAQ,oBAAoBa,SACjDC,mBAAqBd,QAAQ,kCAC7Be,eAAqBf,QAAQ,0BAC7BgB,gBAAqBhB,QAAQ,wBAC7BiB,QAAqBjB,QAAQ,WAC7BkB,SAAqBlB,QAAQ,gCAC7BmB,QAAqBnB,QAAQ,iBAC7BoB,gBAAqBpB,QAAQ,wBAC7BqB,qBAAuBrB,QAAQ,wCAC/BsB,UAAsBtB,QAAQ,mBAC9BuB,YAAsBvB,QAAQ,qBAC9BwB,WAAsBxB,QAAQ,yBAC9ByB,oBAAuBzB,QAAQ,yBAC/B0B,iBAAoB1B,QAAQ,sBAC5B2B,oBAAuB3B,QAAQ,yBAC/B4B,UAAY5B,QAAQ,mBACpB6B,iBAAsB7B,QAAQ,6BAC9B8B,UAAkB9B,QAAQ,qBAC1B+B,QAAU/B,QAAQ,mBAClBgC,eAAiBhC,QAAQ,0BACzBiC,MAAQjC,QAAQ,WAEdkC,aAAepB,mBAAmBqB,aAClCC,+BAAiC,yBACvC,IAAIC,qBAEJ,MAAMC,WAAaC,QAAQC,YACrBC,aAAeF,QAAQC,YAAad,iBAAmBD,oBAEvDiB,+BAAiC,qBACjCC,mCAAqC,4BAErCC,4BAA8B,kBAC9BC,2BAA6B,iBAE7BC,sBAAwB,qBACxBC,uBAAyB,2BACzBC,yBAA2B,yVAiBjC,IAAIC,MACAC,cACAC,QACAC,OACAC,WACAC,cACAC,mBACAC,WACAC,cACAC,cACAC,YACAC,eACAC,qBACAC,qBACAC,mBACAC,sBACAC,YAzBD1B,QAAQ2B,eAEPC,OAAOC,sBAAwB,CAC3BC,aAAc,EACdjC,+BAAAA,iCAuBR,IAAIkC,8BAA+B,EAgBnC,SAASC,0BACL,OAAO/D,eAAegE,IAAI/D,SAASgE,qBAAqBC,aAG5D,SAASC,uBACL,MAAMC,oBAAsBrD,YAAYsD,OAAO5D,QAAQ6D,cACnDC,KAAKC,SAASjE,eAAekE,iBAAiBC,WAC5CC,aAAe,CACjBP,oBAAAA,oBACA3D,QAASA,SAEb,OAAOC,SAASkE,OAAOvD,iBAAkBsD,cAG7C,SAASE,2BAgBL,GAAG9C,QAAQ2B,cAAgB3B,QAAQC,YAC/B,OAAO,EAWX,MAAM8C,YAAcvE,eAAekE,iBAAiBC,SACpD,GAAGI,cAAgBvE,eAAewE,yBAC9BD,cAAgBvE,eAAeyE,wBAC/B,OAAO,EAEX,MAAMC,oBAAsB7C,+BAA+B0C,cAC3D,QAASI,QAAQC,QAAQF,kBAW7B,SAASG,gCACL,MAAMN,YAAcvE,eAAekE,iBAAiBC,SAC9CW,oBAAsBhD,8BAA8ByC,cAC1DI,QAAQI,QAAQD,kBAAkB,GAGtC,SAASE,+BACL,MAAMT,YAAcvE,eAAekE,iBAAiBC,SAC9CW,oBAAsBhD,8BAA8ByC,cAC1D,QAASI,QAAQC,QAAQE,kBAW7B,SAASG,sBACL,IAAIC,OAAS,CACTC,aAAcnF,eAAeoF,8BAC7BC,KAAMrF,eAAekE,iBAAiBC,UAG1C,OAAO,IAAIzC,aAAaA,aAAawD,QAnGzCxD,aAAa4D,GA7C0B,qBA6CS,WAC5C,GAAGlD,SAAWA,QAAQ,GAAI,CACtB,MAAMmD,UAAYnD,QAAQ,GAC1BmD,UAAUC,cAAcC,YAAY,CAChCC,KAAM,oBACNC,QAASnE,QAAQC,aAClB,QAGXC,aAAa4D,GArD8B,4BAqDS,WAChD,MAAMM,OAAUvG,cAAcwG,kBAC9BD,OAAOE,UAsDX1C,OAAO2C,mCAAqC,WACxC3D,QAAQ4D,KAAK,SAAU,MACvB,MAAMzB,YAAcvE,eAAekE,iBAAiBC,SAC9C8B,uBAAyBpE,+BAA+B0C,cAC9DI,QAAQI,QAAQkB,qBAAqB,GACrCC,cAAa,IAejB1G,mBAAmB2G,2BACf3G,mBAAmB4G,oCAAoCC,qBAAsBnH,SAiBjFE,eAAekH,eAAenH,OAAQ,oBAEtC,IAAIoH,MACAC,UACAC,sBAAwB,GACxBC,mBAAqB,GAWrBC,oBATJ,SAASC,eAGL,IAAIC,UAAYC,EAAE7E,0BAClB4E,UAAUE,YAAY3E,SACtBA,QAAQ4E,SACR5E,QAAUyE,UAId,SAASI,oBAAoBC,WACrBA,WACAP,qBAAsB,EACtBzE,MAAMiF,YAAY,UAClBZ,MAAMa,OACNlB,cAAa,KAEbhE,MAAMiF,YAAY,UAClBP,eACAL,MAAMc,QAId,SAASC,kCAAkCC,uBACvC,IAAIC,QAAUjB,OAASA,MAAMW,YAC1BM,UAAYnH,gBAAgBoH,cAAgBF,uBAC3ClH,gBAAgBqH,kBACTF,UAAWnH,gBAAgBsH,YAC9BjG,aAAakG,yBACjBvH,gBAAgBwH,mBAGxB,SAASC,2BACL,IAAIN,QACJP,qBADeV,MAAMW,aAErBI,mCAAkC,GAGtC,SAASS,gBACL,IAAIC,UAAY1F,WAAW2F,SAAS,YACjCD,UACC1F,WAAW4F,YAAY,YAAYC,SAAS,cAE5C7F,WAAW4F,YAAY,cAAcC,SAAS,YAElD3B,WAAawB,UACb3H,gBAAgB+H,qBAAqB5B,UAAWE,oBAChDR,cAAa,GACb9F,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,YAAa,SAGrE,SAASC,mCACL,IAAIC,mBAAqBjF,0BAErBjB,cAAc2F,YAAY,gBAAgBC,SAAS,qBAEnD5F,cAAc2F,YAAY,qBAAqBC,SAAS,gBAIhE,SAASO,wBACLrI,gBAAgBsI,yBAChBvI,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,eAAgB,SAGxE,MAAMK,uBAAyB,CAAC,SAAU,UAAW,SAAU,OAAQ,UAAW,kBAClF,SAASC,mBAAmBC,aAExB,MAAMC,QAAUrH,aAAasH,gBAAgBvC,uBAC1CqC,aAAeF,uBAAuBK,SAASH,cAC9C1I,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,SAAUO,aAC9DjI,UAAUqI,iBAAiBH,QAASD,aAC/BK,KAAK,KACFjD,cAAa,GACbe,qBAAoB,KAEvBmC,MAAMC,MACHC,QAAQC,MAAM,iCAAkCT,YAAaO,KAC7DjJ,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,UAAWO,aAC/D9H,QAAQwI,gBACJvI,eAAewI,gBACfjJ,YAAYsD,OAAO5D,QAAQwJ,0BAA2BZ,aACtDtI,YAAYsD,OAAO5D,QAAQyJ,4BAA6Bb,kBAIpEvI,UAAUqJ,wBAAwBb,QAAS,eAC3C3I,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,YAAa,SACjErC,cAAa,GACbe,qBAAoB,IAI5B,SAAS4C,UAAUC,SAAU3F,SAAUsC,uBACnC,IAAIsD,QAAU7J,QAAQ8J,gCAClBC,QAAUF,QACXD,WACCC,WAAaD,cAAc5J,QAAQgK,kCACnCD,QAAUzJ,YAAYsD,OAAO5D,QAAQiK,gCAAiCL,WAEvErD,wBACCwD,WAAaA,YAAYxD,yBAE7BvD,YAAYkH,KAAK3D,uBAAyBsD,SAC1C7G,YAAY8C,KAAK,QAASiE,SAC1B/G,YAAY8C,KAAK,gBAAiB7B,UAGtC,SAASkG,wBACD7I,QAAQC,cAIZiB,cAAcwF,YAAY,iBAC1BpF,qBAAqBoF,YAAY,iBACjCpF,qBAAqBqF,SAAS,oBAE9BvF,YAAYsF,YAAY,iBACxBlF,mBAAmBkF,YAAY,iBAC/BlF,mBAAmBmF,SAAS,oBAE5BtF,eAAeqF,YAAY,iBAC3BjF,sBAAsBiF,YAAY,iBAClCjF,sBAAsBkF,SAAS,oBACL,QAAtBmC,SAASC,WACT5H,cAAcuF,YAAY,iBAC1BnF,qBAAqBmF,YAAY,iBACjCnF,qBAAqBoF,SAAS,sBAItCqC,eAAeC,wBACX,IAAIrG,aAAe,CACflE,QAASA,QACTwK,YAAaxK,QAAQgK,gCACrBS,cAAezK,QAAQ0K,8BACvBC,oBAAqB3K,QAAQ4K,+BAC7BC,oBAAqB7K,QAAQ8K,kBAC7BC,cAAe/K,QAAQgL,sBACvBC,aAAcjL,QAAQkL,qBACtBC,aAAcnL,QAAQoL,qBACtBC,WAAYrL,QAAQsL,mBACpBC,cAAevL,QAAQwL,sBACvBC,gBAAiBzL,QAAQ0L,6BAE7B,MAAMC,eAAiB,GACjBC,mBAAqBC,SAASC,KAAKC,YAAY,KACrD/J,MAAQ4E,EAAE,qBACJoF,MAAMpE,0BACZzF,OAASyE,EAAE3G,SAASkE,OAAOtD,UAAWqD,eACtChC,QAAUC,OAAO8J,KAAK,6BACtB7J,WAAaD,OAAO8J,KAAK,iBACzB5J,cAAgBF,OAAO8J,KAAK,sBAC5B1J,WAAaJ,OAAO8J,KAAK,4BACzB3J,mBAAqBH,OAAO8J,KAAK,4BACjCzJ,cAAgBL,OAAO8J,KAAK,iBAC5BxJ,cAAgBN,OAAO8J,KAAK,iBAC5BvJ,YAAcP,OAAO8J,KAAK,eAC1BtJ,eAAiBR,OAAO8J,KAAK,kBAE7BrJ,qBAAuBT,OAAO8J,KAAK,wBACnCpJ,qBAAuBV,OAAO8J,KAAK,wBACnCnJ,mBAAqBX,OAAO8J,KAAK,sBACjClJ,sBAAwBZ,OAAO8J,KAAK,yBACpCjJ,YAAcb,OAAO8J,KAAK,6BAC1BhK,cAAgBE,OAAO8J,KAAK,2BAE5B9J,OAAO8J,KAAK,qCAAqC7G,GAAG,QAAS,KACzD7F,eAAe2M,QAAQ1M,SAAS2M,iCAChCjM,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,oBAAqB,WAE7ElG,OAAO8J,KAAK,oCAAoC7G,GAAG,QAAS,KACxDjD,OAAO8J,KAAK,+BAA+BhE,SAAS,mBAExD/F,QAAQ,GAAGkK,OAAS,WAChBlK,QAAQ4D,KAAK,SAAU,OAE3B9C,YAAYoC,GAAG,QAAS,KACpB,MAAMnB,SAAWjB,YAAY8C,KAAK,iBAC5BuG,UAAYtM,gBAAgBuM,qBAAqBrI,UACvD,IAAIsI,UAAYxM,gBAAgByM,YAC7BH,UAAUI,SACTF,UAAYF,UAAU,GAAGK,QAE7BtN,mBAAmBuN,2BAA2B1I,SAAUsI,aAE5D/J,cAAc4C,GAAG,QAAS,KACtBuD,mBAAmB,YAEvBlG,cAAc2C,GAAG,QAAS,KACtBuD,mBAAmB,YAEvBjG,YAAY0C,GAAG,QAAS,KACpBuD,mBAAmB,UAEvBhG,eAAeyC,GAAG,QAAS,KACvBuD,mBAAmB,aAEvBwB,wBACAlI,cAAc+J,MAAM,KAChBzM,eAAe2M,QAAQ1M,SAAS2M,iCAChCjM,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,cAAe,WAGvE,MAAMuE,gBAAkBtL,QAAQC,aACzBD,QAAQuL,QAAQC,QAAQC,eAAiBzL,QAAQuL,QAAQC,QAAQE,UACpEJ,iBAOAtK,mBAAmB2F,SAAS,iBAGhC5B,MAAQ3G,iBAAiBuN,kBAAkBpL,sBAAuBM,OAvE3C,GAwEHH,MAAO4J,oBAE3BlM,iBAAiBwN,iBAAgB,GACjC5E,mCACAlG,WAAW4J,MAAMnE,eACjBxF,cAAc2J,MAAMxD,uBACpBlG,mBAAmB0J,MAAMrD,oBACzBpG,WAAWyJ,MAAM,KACbhG,cAAa,GAAM,GACnB9F,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,YAAa,WAIzEiC,eAAetE,aAAamH,MAAOC,UAG/B,MAAMC,kBAAoBhH,MAAMW,aAAexF,aAAakG,wBAC5D,IAAI2F,kBACA,OAGJ,IAAIC,qBAAuB9L,aAAa+L,oBACxC,GAAGjH,YAAc6G,MACb,OAEJ,IAAIK,OAASC,UAAUH,eAAeI,KACtC,GAAGxL,QAAQ4D,KAAK,SAAW0H,SAAWL,MAElC,OAKA7G,YACAC,sBAAwBiH,OACxBhH,mBAAqB8G,eAAerJ,UAExC,MAAM0J,oBAAsBzL,SAAWA,QAAQ4D,KAAK,sBAC9C8H,mBAAqB1L,SAAWA,QAAQ4D,KAAK,qBAChDsH,UAAYE,eAAeO,aAAeD,oBACzCD,qBAAuB7N,eAAegO,gBAAgBH,sBACtDpH,sBAAwBqH,mBACxBpH,mBAAqBmH,qBACfP,UACNjN,gBAAgBqH,kBAEpB,IAAIuG,mBAAoBjO,eAAeoF,8BAA8BsB,oBAIrE,GAFAmD,UADAoE,mBAAqBzM,QAAQ0M,IAAIC,eAAeF,oBAClBvH,mBAC1B8G,eAAeY,eAAiB3H,sBAAwB,IACzDF,MAAMW,YAAa,EACd3D,8BAAgC3C,oBAAoByN,uBACjDb,eAAeY,iBAClB7K,8BAA+B,EAC/BlB,OAAO8J,KAAK,+BAA+BjE,YAAY,iBACvD7F,OAAO8J,KAAK,gCAAgC/B,KACxC5J,YAAYsD,OAAO5D,QAAQoO,kCACvB1N,oBAAoB2N,2BAGhC,IAAI1H,UAAYC,EAAE7E,0BAClB4E,UAAUE,YAAY3E,SACtBA,QAAQ4E,SACR5E,QAAUyE,UACPvC,4BACClC,QAAQ4D,KAAK,MAAOS,uBAGpBrE,QAAQ4D,KAAK,oBAAqBS,uBAClCrE,QAAQ4D,KAAK,qBAAsBU,oBAChClF,QAAQ2B,eACPC,OAAOC,sBAAsBoD,sBAAwBA,sBACrDrD,OAAOC,sBAAsBC,iBAGjClB,QAAQ4D,KAAK,SAAUpC,wBAG/BxD,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,SAChDrH,MAAMsN,aAAahB,eAAerJ,WACtCzC,aAAa+M,gBAAgBhI,sBAAuB4G,OACjD7L,QAAQ2B,eAEPC,OAAOC,sBAAsBqL,YAAcjI,sBAC3CrD,OAAOC,sBAAsBsL,iBAAmBtB,OAIxD7C,eAAeoE,oBAAoBC,IAAKC,aACpC,GAAGA,cAAgB5N,MAAM6N,kBAAkBD,YAAY3K,WACnDjD,MAAM8N,qBAAqBF,YAAY3K,WAAW,CAGlD,MAAMqJ,qBAAuB9L,aAAa+L,oBAC1C,IAAIwB,cAAe,EAChBzB,eAAeY,iBAAmBZ,eAAe0B,0BAChDD,cAAe,GAEfzB,eAAeY,gBAAoB/N,gBAAgBsH,YAAc6F,eAAe2B,aAGhFF,cAAe,GAEhBA,cACC/I,cAAa,IAKzB,SAASkJ,2BACL,IAAIpK,iCAAmCxD,QAAQ2B,aAAa,CACxD,MAAMkM,cAAgBrP,eAAekE,iBAAiBC,oBAChDmL,UAAY7O,WAAW8O,eAAeF,YAC5CC,UAAUE,OAAO,SAAUnG,IAAKmG,SACvBnG,KAAOmG,SACRvI,qBAAoB,GACpBxH,eAAe2M,QAAQ1M,SAAS+P,+BAAgC,CAACtL,SAAUkL,aAC3ExK,oCAMhB2F,eAAekF,eAAeC,MAc1B,GAbApM,8BAA+B,EAC/BlB,OAAO8J,KAAK,+BAA+BhE,SAAS,iBACpDiH,2BACAQ,uBACIvP,gBAAgBsH,aACZpB,MAAMW,cAAexF,aAAakG,yBAEtCvH,gBAAgBqH,kBAEjBlB,WACCuB,gBAEJ3F,QAAQ4D,KAAK,MAAOtE,aAAamO,oBAC7BlJ,sBAAwBpF,UAAU,CAGlC,MAAMuO,gBAAkBvQ,gBAAgBwQ,qBAClCC,YAAcF,gBAAiBA,gBAAgBG,KAAOjQ,eAAekQ,kBACrEC,gBAAgBH,aAAc9O,MAAM6N,kBAAkBiB,YAAY7L,UACrEgM,eACClJ,qBAAoB,GAGxBV,MAAMW,aAGVhB,cAAa,GAGjB,SAASkK,iBACF5J,WACCuB,gBAEJ1H,gBAAgBwH,mBACbvG,uBACCA,qBAAqB+O,QACrB/O,qBAAuB,MAI/B,SAASgP,oBACD1P,oBAAoByN,uBAA0BhO,gBAAgBsH,aAC1DpB,MAAMW,cAAexF,aAAakG,yBAEtCvH,gBAAgBqH,kBAcxB8C,eAAe+F,oBAAoBC,OAAQhD,gBACvC,GAAG5M,oBAAoByN,sBACnB,OAEJnI,cAAa,GACb,MAAMuK,4BAA8B/O,aAAa+L,oBAC9CgD,sBAAsBtB,YAAcsB,sBAAsBtM,WAAaqJ,eAAerJ,UACrFmF,QAAQC,MAAM,wFACVkH,sBAAuBjD,gBAInChD,eAAekG,oBAAoBF,OAAQ1B,aACvC,IAAIA,cAAgBA,YAAY3K,SAC5B,OAEJ,MAAMA,SAAW2K,YAAY3K,SAC1B2K,aAAe6B,2BAA2BxM,WACzCyM,uBAEJ,MAAMC,wBAA0B3P,MAAM4P,eAAe3M,WAAajD,MAAM6P,MAAM5M,UAC3EqC,WAAc5F,oBAAoByN,wBAChCzN,oBAAoBoQ,sBAAsB7M,YAAc0M,yBAG1D/B,cAAgB5N,MAAM6N,kBAAkB5K,WACvCjD,MAAM8N,qBAAqB7K,aACvBwC,qBACAM,qBAAoB,GAExBf,gBAIR,SAAS+K,sBACL,OAAO,IAAIC,QAAQC,UACfvQ,oBAAoBwQ,qBACfjI,KAAK,KACFjD,eACAiL,cAKhB,SAASvB,uBACFhP,oBAAoByN,wBACnBjO,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,aAAc,OAClEnI,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,YAChD3H,oBAAoByQ,4BAA8B,WACnDzQ,oBAAoBsO,2BACnB9O,QAAQiI,WAAWjI,QAAQkI,WAAWC,aAAc,YAAa,QAK7E,SAASoI,2BAA2BxM,UAChC,MAAMmN,YAAcnQ,aAAasC,IAAIpC,+BAAgCF,aAAaoQ,iBAClF,OAAGD,cAAe1Q,oBAAoByN,uBAG/BnN,MAAM8N,qBAAqB7K,UAGtC,SAASyM,uBACL,GAAGtP,qBACC,OAGJ,MAAMkQ,wJAEItR,QAAQuR,6JAGRvR,QAAQ8K,yLAGD9K,QAAQwR,iGAKnBC,QADNrQ,qBAAuB,IAAIxB,SAAS0R,gBACAI,UACpCD,OAAOxF,KAAK,0BACPD,MAAM,KACH+E,sBACK9H,KAAK,KACCvI,oBAAoByN,wBACnB/M,sBAAwBA,qBAAqB+O,QAC7C/O,qBAAuB,KACvBH,aAAa0Q,IAAIxQ,gCAAgC,EAAMF,aAAaoQ,sBAIxFI,OAAOxF,KAAK,eAAeD,MAAM,KAC7B5K,sBAAwBA,qBAAqB+O,QAC7C/O,qBAAuB,KACvBH,aAAa0Q,IAAIxQ,gCAAgC,EAAMF,aAAaoQ,mBAI5E1R,QAAQiS,SAAS,WACb,GAAGtQ,QAAQuQ,mBACP,OAEJpL,qBAAuB/F,oBAAoBoR,iCAC3CvH,wBACA/I,aAAauQ,OACb3R,qBAAqB4R,eAAe,CAAEC,OAAQlN,qBAAuB,GACrEjF,eAAesF,GAAGtF,eAAeoS,2BAA4BxD,qBAC7D3O,gBAAgBqF,GAAG,oBAAqBoL,qBACxC1Q,eAAesF,GAAGtF,eAAeqS,mBAAoB3C,gBACrD1P,eAAesF,GAAGtF,eAAesS,oBAAqBlC,gBACtD/Q,cAAciG,GAAG,qBAAsBgL,mBACvC7Q,eAAe8S,SAASrS,QAAQsS,sBAAwB9S,SAAS+S,uBAAwB,WACrF3K,6BAEJrI,eAAe8S,SAASrS,QAAQwS,+BAC5BhT,SAAS2M,gCAAiC4E,qBAC9C,IAAI0B,SAAWhT,MAAMiT,QAAQjT,MAAMkT,WAAWC,WAiB9C,SAASC,iBACLrR,aAAa+L,oBAAoBtE,KAAMqE,iBACnC4B,2BACIxO,oBAAoBoR,oCAMrBxE,eAAeI,MAAQrM,WAAciM,eAAeO,aAAiBpH,qBAEpEM,qBAAoB,GAExBf,cAAa,MA7BrByM,SAASK,YAAYtT,SAAS+S,uBAAwB,GAAI9S,MAAMsT,MAAOvT,SAASwT,wBAChFP,SAASK,YAAYtT,SAAS2M,gCAAiC,GAC3D1M,MAAMsT,MAAOvT,SAAS+S,wBAC1BE,SAASQ,eAAexT,MAAMyT,OAAQ1T,SAAS+S,wBAC/CpS,gBAAgBqH,kBAChBrH,gBAAgBiF,GAAGjF,gBAAgBgT,uBAAwB9C,qBAC3DlQ,gBAAgBiF,GAAGjF,gBAAgBiT,kCAAmC9K,kCACtEnI,gBAAgBiF,GAAGjF,gBAAgBkT,0BAA2B,KAM1DrN,cAAa,KAoBjB,IAAIsN,2BAA4B,EAQhC,SAASC,yBACLlQ,8BAA+B,EAC/BwP,iBACAnD,uBAVJlO,aAAa4D,GAAG5D,aAAagS,mBAAoB,SAAU/D,KAAMgE,OAC1D/S,oBAAoByN,uBAAyBmF,4BAGhDA,2BAA4B,EAC5BT,oBAQJnS,oBAAoB0E,GAAG1E,oBAAoBgT,qBAAsBH,wBACjE7S,oBAAoB0E,GAAG1E,oBAAoBiT,oCAAqC,CAAClE,KAAMmE,WAC/EA,QAGAL,yBAFApR,OAAO8J,KAAK,+BAA+BhE,SAAS,mBAM5D,IAAI4L,6BAA+B,EACnCC,YAAY,KACJtS,aAAakG,wBAGbmM,6BAA+B,EAF/BA,+BAIDA,6BAA+B,GAC9BzM,qCAEL,KACHoI,mBAIJxQ,QAAQ6C,sBAAwBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global path, jsPromise*/\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = require(\"utils/ExtensionUtils\"),\n        EditorManager      = require(\"editor/EditorManager\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        DocumentManager = require(\"document/DocumentManager\"),\n        ExtensionInterface = require(\"utils/ExtensionInterface\"),\n        CommandManager     = require(\"command/CommandManager\"),\n        Commands           = require(\"command/Commands\"),\n        Menus              = require(\"command/Menus\"),\n        WorkspaceManager   = require(\"view/WorkspaceManager\"),\n        AppInit            = require(\"utils/AppInit\"),\n        ModalBar           = require(\"widgets/ModalBar\").ModalBar,\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        ProjectManager     = require(\"project/ProjectManager\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        Strings            = require(\"strings\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        Metrics            = require(\"utils/Metrics\"),\n        LiveDevelopment    = require(\"LiveDevelopment/main\"),\n        LiveDevServerManager = require(\"LiveDevelopment/LiveDevServerManager\"),\n        NativeApp           = require(\"utils/NativeApp\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        BrowserStaticServer  = require(\"./BrowserStaticServer\"),\n        NodeStaticServer  = require(\"./NodeStaticServer\"),\n        LivePreviewSettings  = require(\"./LivePreviewSettings\"),\n        NodeUtils = require(\"utils/NodeUtils\"),\n        TrustProjectHTML    = require(\"text!./trust-project.html\"),\n        panelHTML       = require(\"text!./panel.html\"),\n        Dialogs = require(\"widgets/Dialogs\"),\n        DefaultDialogs = require(\"widgets/DefaultDialogs\"),\n        utils = require('./utils');\n\n    const StateManager = PreferencesManager.stateManager;\n    const STATE_CUSTOM_SERVER_BANNER_ACK = \"customServerBannerDone\";\n    let customServerModalBar;\n\n    const isBrowser = !Phoenix.isNativeApp;\n    const StaticServer = Phoenix.isNativeApp? NodeStaticServer : BrowserStaticServer;\n\n    const EVENT_EMBEDDED_IFRAME_WHO_AM_I = 'whoAmIframePhoenix';\n    const EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR = 'embeddedIframeFocusEditor';\n\n    const PREVIEW_TRUSTED_PROJECT_KEY = \"preview_trusted\";\n    const PREVIEW_PROJECT_README_KEY = \"preview_readme\";\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\";\n    const LIVE_PREVIEW_IFRAME_ID = \"panel-live-preview-frame\";\n    const LIVE_PREVIEW_IFRAME_HTML = `\n    <iframe id=\"${LIVE_PREVIEW_IFRAME_ID}\" title=\"Live Preview\" style=\"border: none\"\n             width=\"100%\" height=\"100%\" seamless=\"true\"\n             src='about:blank'\n             sandbox=\"allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-scripts allow-forms allow-modals allow-pointer-lock\">\n    </iframe>\n    `;\n\n    if(Phoenix.isTestWindow) {\n        // for integ tests\n        window._livePreviewIntegTest = {\n            urlLoadCount: 0,\n            STATE_CUSTOM_SERVER_BANNER_ACK\n        };\n    }\n\n    // jQuery objects\n    let $icon,\n        $settingsIcon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $highlightBtn,\n        $livePreviewPopBtn,\n        $reloadBtn,\n        $chromeButton,\n        $safariButton,\n        $edgeButton,\n        $firefoxButton,\n        $chromeButtonBallast,\n        $safariButtonBallast,\n        $edgeButtonBallast,\n        $firefoxButtonBallast,\n        $panelTitle;\n\n    let customLivePreviewBannerShown = false;\n\n    StaticServer.on(EVENT_EMBEDDED_IFRAME_WHO_AM_I, function () {\n        if($iframe && $iframe[0]) {\n            const iframeDom = $iframe[0];\n            iframeDom.contentWindow.postMessage({\n                type: \"WHO_AM_I_RESPONSE\",\n                isTauri: Phoenix.isNativeApp\n            }, \"*\"); // this is not sensitive info, and is only dispatched if requested by the iframe\n        }\n    });\n    StaticServer.on(EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR, function () {\n        const editor  = EditorManager.getActiveEditor();\n        editor.focus();\n    });\n\n    function _isLiveHighlightEnabled() {\n        return CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).getChecked();\n    }\n\n    function _getTrustProjectPage() {\n        const trustProjectMessage = StringUtils.format(Strings.TRUST_PROJECT,\n            path.basename(ProjectManager.getProjectRoot().fullPath));\n        const templateVars = {\n            trustProjectMessage,\n            Strings: Strings\n        };\n        return Mustache.render(TrustProjectHTML, templateVars);\n    }\n\n    function _isProjectPreviewTrusted() {\n        // We Do not show a trust project window before executing a live preview in desktop builds as in\n        // desktop, each project will have its on live preview `server:port` domain isolation.\n        // Live preview is almost the same as opening a url in the browser. The user opening a project by going though\n        // a lot of selection folder picker dialogs should be regarded as enough confirmation that the user\n        // intents to open that file for preview via a browser url. The browser security sandbox should\n        // take care of most of the security issues as much as any other normal browsing in a browser.\n        // Showing a trust window is UI friction for 99% of users. The user confirm dialog also relies on the user\n        // taking the decision that an anti-virus/firewall would make- which is not going to end well; and a lot of\n        // our users are school students or new devs, who we should assist. Phoenix trust model will heavily rely on\n        // us doing the necessary sand boxing whenever possible.\n        // A compromised project can have special html that can instruct phoenix to change editor selections and\n        // edit only the project files. We will have safeguards in place to detect anomalous large change requests\n        // to mitigate DOS attacks coming from the live preview in the future. A malicious project changing its on\n        // text only using its own code should be an acceptable risk for now as it cant affect anything else in the\n        // system.\n        if(Phoenix.isTestWindow || Phoenix.isNativeApp){ // for test windows, we trust all test files\n            return true;\n        }\n        // In browsers, The url bar will show up as phcode.dev for live previews and there is a chance that\n        // a malicious project can appear as `phcode.dev` when user live previews. So for every live preview\n        // popout tab which shows `phcode.dev` in browser address bar, we will show a trust live preview\n        // confirm dialog every single time when user opens live preivew project.\n        // Further, since all live previews for all projects uses the same phcode.live domain,\n        // untrusted projects can access data of past opened projects. Future plans for browser versions\n        // include adopting a similar approach to desktop to dynamically generate URLs in the format\n        // `project-name.phcode.live` preventing the past data access problem in browser. This will also let us drop the\n        // trust project screen an work the same as desktop apps.\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        if(projectPath === ProjectManager.getWelcomeProjectPath() ||\n            projectPath === ProjectManager.getExploreProjectPath()){\n            return true;\n        }\n        const isTrustedProject = `${PREVIEW_TRUSTED_PROJECT_KEY}-${projectPath}`;\n        return !!PhStore.getItem(isTrustedProject);\n    }\n\n    window._trustCurrentProjectForLivePreview = function () {\n        $iframe.attr('srcdoc', null);\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const isTrustedProjectKey = `${PREVIEW_TRUSTED_PROJECT_KEY}-${projectPath}`;\n        PhStore.setItem(isTrustedProjectKey, true);\n        _loadPreview(true);\n    };\n\n    function _setProjectReadmePreviewdOnce() {\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const previewReadmeKey = `${PREVIEW_PROJECT_README_KEY}-${projectPath}`;\n        PhStore.setItem(previewReadmeKey, true);\n    }\n\n    function _isProjectReadmePreviewdOnce() {\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const previewReadmeKey = `${PREVIEW_PROJECT_README_KEY}-${projectPath}`;\n        return !!PhStore.getItem(previewReadmeKey);\n    }\n\n    ExtensionInterface.registerExtensionInterface(\n        ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW, exports);\n\n    /**\n     * @private\n     * @return {StaticServerProvider} The singleton StaticServerProvider initialized\n     * on app ready.\n     */\n    function _createStaticServer() {\n        var config = {\n            pathResolver: ProjectManager.makeProjectRelativeIfPossible,\n            root: ProjectManager.getProjectRoot().fullPath\n        };\n\n        return new StaticServer.StaticServer(config);\n    }\n\n    // Templates\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n    // Other vars\n    let panel,\n        urlPinned,\n        currentLivePreviewURL = \"\",\n        currentPreviewFile = '';\n\n    function _blankIframe() {\n        // we have to remove the dom node altog as at time chrome fails to clear workers if we just change\n        // src. so we delete the node itself to eb thorough.\n        let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n        newIframe.insertAfter($iframe);\n        $iframe.remove();\n        $iframe = newIframe;\n    }\n\n    let panelShownAtStartup;\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            panelShownAtStartup = true;\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            _blankIframe();\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel && panel.isVisible();\n        if(visible && (LiveDevelopment.isInactive() || explicitClickOnLPIcon)) {\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && LiveDevelopment.isActive()\n            && !StaticServer.hasActiveLivePreviews()) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned, currentPreviewFile);\n        _loadPreview(true);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _updateLiveHighlightToggleStatus() {\n        let isHighlightEnabled = _isLiveHighlightEnabled();\n        if(isHighlightEnabled){\n            $highlightBtn.removeClass('pointer-icon').addClass('pointer-fill-icon');\n        } else {\n            $highlightBtn.removeClass('pointer-fill-icon').addClass('pointer-icon');\n        }\n    }\n\n    function _toggleLiveHighlights() {\n        LiveDevelopment.togglePreviewHighlight();\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"HighlightBtn\", \"click\");\n    }\n\n    const ALLOWED_BROWSERS_NAMES = [`chrome`, `firefox`, `safari`, `edge`, `browser`, `browserPrivate`];\n    function _popoutLivePreview(browserName) {\n        // We cannot use $iframe.src here if panel is hidden\n        const openURL = StaticServer.getTabPopoutURL(currentLivePreviewURL);\n        if(browserName && ALLOWED_BROWSERS_NAMES.includes(browserName)){\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popout\", browserName);\n            NodeUtils.openUrlInBrowser(openURL, browserName)\n                .then(()=>{\n                    _loadPreview(true);\n                    _setPanelVisibility(false);\n                })\n                .catch(err=>{\n                    console.error(\"Error opening url in browser: \", browserName, err);\n                    Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popFail\", browserName);\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        StringUtils.format(Strings.LIVE_DEV_OPEN_ERROR_TITLE, browserName),\n                        StringUtils.format(Strings.LIVE_DEV_OPEN_ERROR_MESSAGE, browserName)\n                    );\n                });\n        } else {\n            NativeApp.openURLInDefaultBrowser(openURL, \"livePreview\");\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n            _loadPreview(true);\n            _setPanelVisibility(false);\n        }\n    }\n\n    function _setTitle(fileName, fullPath, currentLivePreviewURL) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = StringUtils.format(Strings.LIVE_DEV_TOOLTIP_SHOW_IN_EDITOR, fileName);\n        }\n        if(currentLivePreviewURL){\n            tooltip = `${tooltip}\\n${currentLivePreviewURL}`;\n        }\n        $panelTitle.text(currentLivePreviewURL || message);\n        $panelTitle.attr(\"title\", tooltip);\n        $panelTitle.attr(\"data-fullPath\", fullPath);\n    }\n\n    function _showOpenBrowserIcons() {\n        if(!Phoenix.isNativeApp) {\n            return;\n        }\n        // only in desktop builds we show open with browser icons\n        $chromeButton.removeClass(\"forced-hidden\");\n        $chromeButtonBallast.removeClass(\"forced-hidden\");\n        $chromeButtonBallast.addClass(\"forced-inVisible\");\n\n        $edgeButton.removeClass(\"forced-hidden\");\n        $edgeButtonBallast.removeClass(\"forced-hidden\");\n        $edgeButtonBallast.addClass(\"forced-inVisible\");\n\n        $firefoxButton.removeClass(\"forced-hidden\");\n        $firefoxButtonBallast.removeClass(\"forced-hidden\");\n        $firefoxButtonBallast.addClass(\"forced-inVisible\");\n        if (brackets.platform === \"mac\") {\n            $safariButton.removeClass(\"forced-hidden\");\n            $safariButtonBallast.removeClass(\"forced-hidden\");\n            $safariButtonBallast.addClass(\"forced-inVisible\");\n        }\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            toggleLiveHighlight: Strings.LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT,\n            livePreviewSettings: Strings.LIVE_DEV_SETTINGS,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            openInChrome: Strings.LIVE_DEV_OPEN_CHROME,\n            openInSafari: Strings.LIVE_DEV_OPEN_SAFARI,\n            openInEdge: Strings.LIVE_DEV_OPEN_EDGE,\n            openInFirefox: Strings.LIVE_DEV_OPEN_FIREFOX,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $highlightBtn = $panel.find(\"#highlightLPButton\");\n        $reloadBtn = $panel.find(\"#reloadLivePreviewButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $chromeButton = $panel.find(\"#chromeButton\");\n        $safariButton = $panel.find(\"#safariButton\");\n        $edgeButton = $panel.find(\"#edgeButton\");\n        $firefoxButton = $panel.find(\"#firefoxButton\");\n        // ok i dont know enough CSS to do this without these Ballast/ this works for the limited dev time I have.\n        $chromeButtonBallast = $panel.find(\"#chromeButtonBallast\");\n        $safariButtonBallast = $panel.find(\"#safariButtonBallast\");\n        $edgeButtonBallast = $panel.find(\"#edgeButtonBallast\");\n        $firefoxButtonBallast = $panel.find(\"#firefoxButtonBallast\");\n        $panelTitle = $panel.find(\"#panel-live-preview-title\");\n        $settingsIcon = $panel.find(\"#livePreviewSettingsBtn\");\n\n        $panel.find(\".live-preview-settings-banner-btn\").on(\"click\", ()=>{\n            CommandManager.execute(Commands.FILE_LIVE_FILE_PREVIEW_SETTINGS);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"settingsBtnBanner\", \"click\");\n        });\n        $panel.find(\".custom-server-banner-close-icon\").on(\"click\", ()=>{\n            $panel.find(\".live-preview-custom-banner\").addClass(\"forced-hidden\");\n        });\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n        $panelTitle.on(\"click\", ()=>{\n            const fullPath = $panelTitle.attr(\"data-fullPath\");\n            const openPanes = MainViewManager.findInAllWorkingSets(fullPath);\n            let paneToUse = MainViewManager.ACTIVE_PANE;\n            if(openPanes.length) {\n                paneToUse = openPanes[0].paneId;\n            }\n            FileViewController.openFileAndAddToWorkingSet(fullPath, paneToUse);\n        });\n        $chromeButton.on(\"click\", ()=>{\n            _popoutLivePreview(\"chrome\");\n        });\n        $safariButton.on(\"click\", ()=>{\n            _popoutLivePreview(\"safari\");\n        });\n        $edgeButton.on(\"click\", ()=>{\n            _popoutLivePreview(\"edge\");\n        });\n        $firefoxButton.on(\"click\", ()=>{\n            _popoutLivePreview(\"firefox\");\n        });\n        _showOpenBrowserIcons();\n        $settingsIcon.click(()=>{\n            CommandManager.execute(Commands.FILE_LIVE_FILE_PREVIEW_SETTINGS);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"settingsBtn\", \"click\");\n        });\n\n        const popoutSupported = Phoenix.isNativeApp\n            || Phoenix.browser.desktop.isChromeBased || Phoenix.browser.desktop.isFirefox;\n        if(!popoutSupported){\n            // live preview can be popped out currently in only chrome based browsers. The cross domain iframe\n            // that serves the live preview(phcode.live) is sandboxed to the tab in which phcode.dev resides.\n            // all iframes in the tab can communicate between each other, but when you popout another tab, it forms\n            // its own sandbox and firefox/safari prevents communication from iframe in one tab to another. chrome\n            // doesn't seem to enforce this restriction. Since this is a core usecase, we will try to enable this\n            // workflow whenever possible.\n            $livePreviewPopBtn.addClass(\"forced-hidden\");\n        }\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        _updateLiveHighlightToggleStatus();\n        $pinUrlBtn.click(_togglePinUrl);\n        $highlightBtn.click(_toggleLiveHighlights);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            _loadPreview(true, true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    async function _loadPreview(force, isReload) {\n        // we wait till the first server ready event is received till we render anything. else a 404-page may\n        // briefly flash on first load of phoenix as we try to load the page before the server is available.\n        const isPreviewLoadable = panel.isVisible() || StaticServer.hasActiveLivePreviews();\n        if(!isPreviewLoadable){\n            return;\n        }\n        // panel-live-preview-title\n        let previewDetails = await StaticServer.getPreviewDetails();\n        if(urlPinned && !force) {\n            return;\n        }\n        let newSrc = encodeURI(previewDetails.URL);\n        if($iframe.attr('src') === newSrc && !force){\n            // we already have this url loaded in previews!\n            return;\n        }\n        // we have to create a new iframe on every switch as we use cross domain iframes for phcode.live which\n        // the browser sandboxes strictly and sometimes it wont allow a src change on our iframe causing live\n        // preview breaks sporadically. to alleviate this, we create a new iframe every time.\n        if(!urlPinned) {\n            currentLivePreviewURL = newSrc;\n            currentPreviewFile = previewDetails.fullPath;\n        }\n        const existingPreviewFile = $iframe && $iframe.attr('data-original-path');\n        const existingPreviewURL = $iframe && $iframe.attr('data-original-src');\n        if(isReload && previewDetails.isNoPreview && existingPreviewURL &&\n            existingPreviewFile && ProjectManager.isWithinProject(existingPreviewFile)) {\n            currentLivePreviewURL = existingPreviewURL;\n            currentPreviewFile = existingPreviewFile;\n        } else if(isReload){\n            LiveDevelopment.openLivePreview();\n        }\n        let relativeOrFullPath= ProjectManager.makeProjectRelativeIfPossible(currentPreviewFile);\n        relativeOrFullPath = Phoenix.app.getDisplayPath(relativeOrFullPath);\n        _setTitle(relativeOrFullPath, currentPreviewFile,\n            previewDetails.isCustomServer ? currentLivePreviewURL : \"\");\n        if(panel.isVisible()) {\n            if(!customLivePreviewBannerShown && LivePreviewSettings.isUsingCustomServer()\n                && previewDetails.isCustomServer) {\n                customLivePreviewBannerShown = true;\n                $panel.find(\".live-preview-custom-banner\").removeClass(\"forced-hidden\");\n                $panel.find(\".live-preview-banner-message\").text(\n                    StringUtils.format(Strings.LIVE_PREVIEW_CUSTOM_SERVER_BANNER,\n                        LivePreviewSettings.getCustomServeBaseURL())\n                );\n            }\n            let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n            newIframe.insertAfter($iframe);\n            $iframe.remove();\n            $iframe = newIframe;\n            if(_isProjectPreviewTrusted()){\n                $iframe.attr('src', currentLivePreviewURL);\n                // we have to save src as the iframe src attribute may have redirected, and we cannot read it as its\n                // a third party domain once its redirected.\n                $iframe.attr('data-original-src', currentLivePreviewURL);\n                $iframe.attr('data-original-path', currentPreviewFile);\n                if(Phoenix.isTestWindow) {\n                    window._livePreviewIntegTest.currentLivePreviewURL = currentLivePreviewURL;\n                    window._livePreviewIntegTest.urlLoadCount++;\n                }\n            } else {\n                $iframe.attr('srcdoc', _getTrustProjectPage());\n            }\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\",\n            utils.getExtension(previewDetails.fullPath));\n        StaticServer.redirectAllTabs(currentLivePreviewURL, force);\n        if(Phoenix.isTestWindow) {\n            // for integ tests\n            window._livePreviewIntegTest.redirectURL = currentLivePreviewURL;\n            window._livePreviewIntegTest.redirectURLforce = force;\n        }\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && (utils.isPreviewableFile(changedFile.fullPath) ||\n            utils.isServerRenderedFile(changedFile.fullPath))){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await StaticServer.getPreviewDetails();\n            let shouldReload = false;\n            if(previewDetails.isCustomServer && !previewDetails.serverSupportsHotReload){\n                shouldReload = true;\n            }\n            if(!previewDetails.isCustomServer && !(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                shouldReload = true;\n            }\n            if(shouldReload) {\n                _loadPreview(true);\n            }\n        }\n    }\n\n    function _openReadmeMDIfFirstTime() {\n        if(!_isProjectReadmePreviewdOnce() && !Phoenix.isTestWindow){\n            const readmePath = `${ProjectManager.getProjectRoot().fullPath}README.md`;\n            const fileEntry = FileSystem.getFileForPath(readmePath);\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    _setPanelVisibility(true);\n                    CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, {fullPath: readmePath});\n                    _setProjectReadmePreviewdOnce();\n                }\n            });\n        }\n    }\n\n    async function _projectOpened(_evt) {\n        customLivePreviewBannerShown = false;\n        $panel.find(\".live-preview-custom-banner\").addClass(\"forced-hidden\");\n        _openReadmeMDIfFirstTime();\n        _customServerMetrics();\n        if(!LiveDevelopment.isActive()\n            && (panel.isVisible() || StaticServer.hasActiveLivePreviews())) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.openLivePreview();\n        }\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe.attr('src', StaticServer.getNoPreviewURL());\n        if(!panelShownAtStartup && !isBrowser){\n            // we dont do this in browser as the virtual server may not yet be started on app start\n            // project open and a 404 page will briefly flash in the browser!\n            const currentDocument = DocumentManager.getCurrentDocument();\n            const currentFile = currentDocument? currentDocument.file : ProjectManager.getSelectedItem();\n            const isPreviewable = currentFile ? utils.isPreviewableFile(currentFile.fullPath) : false;\n            if(isPreviewable){\n                _setPanelVisibility(true);\n            }\n        }\n        if(!panel.isVisible()){\n            return;\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        if(urlPinned) {\n            _togglePinUrl();\n        }\n        LiveDevelopment.closeLivePreview();\n        if(customServerModalBar){\n            customServerModalBar.close();\n            customServerModalBar = null;\n        }\n    }\n\n    function _activeDocChanged() {\n        if(!LivePreviewSettings.isUsingCustomServer() && !LiveDevelopment.isActive()\n            && (panel.isVisible() || StaticServer.hasActiveLivePreviews())) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.openLivePreview();\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        if(LivePreviewSettings.isUsingCustomServer()){\n            return;\n        }\n        _loadPreview(true);\n        const currentPreviewDetails = await StaticServer.getPreviewDetails();\n        if(currentPreviewDetails.isHTMLFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    async function _currentFileChanged(_event, changedFile) {\n        if(!changedFile || !changedFile.fullPath){\n            return;\n        }\n        const fullPath = changedFile.fullPath;\n        if(changedFile && _shouldShowCustomServerBar(fullPath)){\n            _showCustomServerBar();\n        }\n        const shouldUseInbuiltPreview = utils.isMarkdownFile(fullPath) || utils.isSVG(fullPath);\n        if(urlPinned || (LivePreviewSettings.isUsingCustomServer() &&\n            !LivePreviewSettings.getCustomServerConfig(fullPath) && !shouldUseInbuiltPreview)){\n            return;\n        }\n        if(changedFile && (utils.isPreviewableFile(fullPath) ||\n            utils.isServerRenderedFile(fullPath))){\n            if(!panelShownAtStartup){\n                _setPanelVisibility(true);\n            }\n            _loadPreview();\n        }\n    }\n\n    function _showSettingsDialog() {\n        return new Promise(resolve=>{\n            LivePreviewSettings.showSettingsDialog()\n                .then(()=>{\n                    _loadPreview();\n                    resolve();\n                });\n        });\n    }\n\n    function _customServerMetrics() {\n        if(LivePreviewSettings.isUsingCustomServer()){\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"customServ\", \"yes\");\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"framework\",\n                LivePreviewSettings.getCustomServerFramework() || \"unknown\");\n            if(LivePreviewSettings.serverSupportsHotReload()) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"hotReload\", \"yes\");\n            }\n        }\n    }\n\n    function _shouldShowCustomServerBar(fullPath) {\n        const isBannerAck = StateManager.get(STATE_CUSTOM_SERVER_BANNER_ACK, StateManager.PROJECT_CONTEXT);\n        if(isBannerAck || LivePreviewSettings.isUsingCustomServer()){\n            return false;\n        }\n        return utils.isServerRenderedFile(fullPath);\n    }\n\n    function _showCustomServerBar() {\n        if(customServerModalBar){\n            return;\n        }\n        // Show the search bar\n        const searchBarHTML =`<div style=\"display: flex;justify-content: end;align-items: baseline;\">\n            <div style=\"margin-right: 5px;\">\n                ${Strings.LIVE_DEV_SETTINGS_BANNER}\n            </div>\n            <button class=\"btn btn-mini live-preview-settings\" style=\"margin-right: 5px;\">\n                ${Strings.LIVE_DEV_SETTINGS}\n            </button>\n            <div class=\"close-icon\" style=\"align-self: center;margin-left: 10px;margin-right: 5px;cursor: pointer;\"\n                title=\"${Strings.CLOSE}\">\n                <i class=\"fa-solid fa-xmark\"></i>\n            </div>\n        </div>`;\n        customServerModalBar = new ModalBar(searchBarHTML);\n        const $modal = customServerModalBar.getRoot();\n        $modal.find(\".live-preview-settings\")\n            .click(()=>{\n                _showSettingsDialog()\n                    .then(()=>{\n                        if(LivePreviewSettings.isUsingCustomServer()){\n                            customServerModalBar && customServerModalBar.close();\n                            customServerModalBar = null;\n                            StateManager.set(STATE_CUSTOM_SERVER_BANNER_ACK, true, StateManager.PROJECT_CONTEXT);\n                        }\n                    });\n            });\n        $modal.find(\".close-icon\").click(()=>{\n            customServerModalBar && customServerModalBar.close();\n            customServerModalBar = null;\n            StateManager.set(STATE_CUSTOM_SERVER_BANNER_ACK, true, StateManager.PROJECT_CONTEXT);\n        });\n    }\n\n    AppInit.appReady(function () {\n        if(Phoenix.isSpecRunnerWindow){\n            return;\n        }\n        panelShownAtStartup = !LivePreviewSettings.shouldShowLivePreviewAtStartup();\n        _createExtensionPanel();\n        StaticServer.init();\n        LiveDevServerManager.registerServer({ create: _createStaticServer }, 5);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _currentFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW_SETTINGS,\n            Commands.FILE_LIVE_FILE_PREVIEW_SETTINGS, _showSettingsDialog);\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\", Menus.AFTER, Commands.FILE_EXTENSION_MANAGER);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW_SETTINGS, \"\",\n            Menus.AFTER, Commands.FILE_LIVE_FILE_PREVIEW);\n        fileMenu.addMenuDivider(Menus.BEFORE, Commands.FILE_LIVE_FILE_PREVIEW);\n        LiveDevelopment.openLivePreview();\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, _updateLiveHighlightToggleStatus);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_PREVIEW_RELOAD, ()=>{\n            // Usually, this event is listened by live preview iframes/tabs and they initiate a location.reload.\n            // But in firefox, the embedded iframe will throw a 404 when we try to reload from within the iframe as\n            // in firefox security posture, the third party live preview iframe phcode.live itself cannot activate\n            // the service worker. So we have to reload the iframe from its parent- ie. phcode.dev. This is not\n            // required in chrome, but we just keep it just for all platforms behaving the same.\n            _loadPreview(true);\n        });\n\n        function refreshPreview() {\n            StaticServer.getPreviewDetails().then((previewDetails)=>{\n                _openReadmeMDIfFirstTime();\n                if(!LivePreviewSettings.shouldShowLivePreviewAtStartup()){\n                    return;\n                }\n                // we show the live preview\n                // in browser, we always show the live preview on startup even if its a no preview page\n                // Eg. in mac safari browser we show mac doesnt support live preview page in live preview.\n                if(previewDetails.URL && (isBrowser || !previewDetails.isNoPreview) && !panelShownAtStartup){\n                    // only show if there is some file to preview and not the default no-preview preview on startup\n                    _setPanelVisibility(true);\n                }\n                _loadPreview(true);\n            });\n        }\n\n        let customServerRefreshedOnce = false;\n        StaticServer.on(StaticServer.EVENT_SERVER_READY, function (_evt, event) {\n            if(LivePreviewSettings.isUsingCustomServer() && customServerRefreshedOnce){\n                return;\n            }\n            customServerRefreshedOnce = true;\n            refreshPreview();\n        });\n        function _handleNewCustomServer() {\n            customLivePreviewBannerShown = false;\n            refreshPreview();\n            _customServerMetrics();\n        }\n\n        LivePreviewSettings.on(LivePreviewSettings.EVENT_SERVER_CHANGED, _handleNewCustomServer);\n        LivePreviewSettings.on(LivePreviewSettings.EVENT_CUSTOM_SERVER_ENABLED_CHANGED, (_evt, enabled)=>{\n            if(!enabled) {\n                $panel.find(\".live-preview-custom-banner\").addClass(\"forced-hidden\");\n            } else {\n                _handleNewCustomServer();\n            }\n        });\n\n        let consecutiveEmptyClientsCount = 0;\n        setInterval(()=>{\n            if(!StaticServer.hasActiveLivePreviews()){\n                consecutiveEmptyClientsCount ++;\n            } else {\n                consecutiveEmptyClientsCount = 0;\n            }\n            if(consecutiveEmptyClientsCount > 5){\n                _startOrStopLivePreviewIfRequired();\n            }\n        }, 1000);\n        _projectOpened();\n    });\n\n    // private API to be used inside phoenix codebase only\n    exports.LIVE_PREVIEW_PANEL_ID = LIVE_PREVIEW_PANEL_ID;\n});\n\n\n"],"file":"main.js"}