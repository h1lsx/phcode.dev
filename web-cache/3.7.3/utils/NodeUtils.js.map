{"version":3,"sources":["utils/NodeUtils.js"],"names":["define","require","exports","module","Strings","NodeConnector","UTILS_NODE_CONNECTOR","utilsConnector","async","fetchURLText","url","encoding","Phoenix","isNativeApp","Error","buffer","execPeer","iconv","decode","Buffer","from","_updateNodeLocaleStrings","getPhoenixBinaryVersion","cliArgs","window","__TAURI__","invoke","phoenixBinPath","getLinuxOSFlavorName","platform","openUrlInBrowser","browserName","_loadNodeExtensionModule","moduleNativeDir","_npmInstallInFolder","createNodeConnector","isNodeAvailable","isNodeReady","NodeUtils"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,QAAsBH,QAAQ,WAChCI,cAAgBJ,QAAQ,iBACtBK,qBAAuB,WAE7B,IAAIC,eAMJC,eAAeC,aAAaC,IAAKC,UAC7B,IAAIC,QAAQC,YACR,MAAM,IAAIC,MAAM,iCAEpB,MAAMC,OAACA,cAAgBR,eAAeS,SAAS,gBAAiB,CAACN,IAAAA,MACjE,OAAOO,MAAMC,OAAOC,OAAOC,KAAKL,QAASJ,UAO7CH,eAAea,2BACX,QAAIT,QAAQC,oBAINN,eAAeS,SAAS,mBAAoBZ,UAC3C,GAGXI,eAAec,0BACX,IAAIV,QAAQC,YACR,MAAM,IAAIC,MAAM,oDAEpB,MAAMS,cAAgBC,OAAOC,UAAUC,OAAO,yBACxCC,eAAiBJ,QAAQ,GAC/B,OAAOhB,eAAeS,SAAS,0BAA2BW,gBAG9DnB,eAAeoB,uBACX,MAAwB,UAArBhB,QAAQiB,UAAyBjB,QAAQC,YAGrCN,eAAeS,SAAS,wBAFpB,KAKfR,eAAesB,iBAAiBpB,IAAKqB,aACjC,IAAInB,QAAQC,YACR,MAAM,IAAIC,MAAM,6CAEpB,OAAOP,eAAeS,SAAS,mBAAoB,CAACN,IAAAA,IAAKqB,YAAAA,cAG7DvB,eAAewB,yBAAyBC,iBACpC,IAAIrB,QAAQC,YACR,MAAM,IAAIC,MAAM,qDAEpB,OAAOP,eAAeS,SAAS,2BAA4B,CAACiB,gBAAAA,kBAGhEzB,eAAe0B,oBAAoBD,iBAC/B,IAAIrB,QAAQC,YACR,MAAM,IAAIC,MAAM,gDAEpB,OAAOP,eAAeS,SAAS,sBAAuB,CAACiB,gBAAAA,kBA5DxDrB,QAAQC,cAEPN,eAAiBF,cAAc8B,oBALN,WAKgDjC,UA6D1EG,cAAc+B,mBAGbf,2BAIJnB,QAAQ8B,yBAA2BA,yBACnC9B,QAAQgC,oBAAsBA,oBAG9BhC,QAAQO,aAAeA,aACvBP,QAAQoB,wBAA0BA,wBAClCpB,QAAQ0B,qBAAuBA,qBAC/B1B,QAAQ4B,iBAAmBA,iBAC3B5B,QAAQmC,YAAchC,cAAcgC,YAEpCb,OAAOc,UAAYpC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Generic node util APIs connector. see `src-node/utils.js` for node peer\n */\n\ndefine(function (require, exports, module) {\n    const Strings             = require(\"strings\"),\n        NodeConnector = require('NodeConnector');\n    const UTILS_NODE_CONNECTOR = \"ph_utils\";\n\n    let utilsConnector;\n    if(Phoenix.isNativeApp) {\n        // node not available in browser builds!\n        utilsConnector = NodeConnector.createNodeConnector(UTILS_NODE_CONNECTOR, exports);\n    }\n\n    async function fetchURLText(url, encoding) {\n        if(!Phoenix.isNativeApp) {\n            throw new Error(\"node not available in browser\");\n        }\n        const {buffer} = await utilsConnector.execPeer(\"getURLContent\", {url});\n        return iconv.decode(Buffer.from(buffer), encoding);\n    }\n\n    /**\n     * updates the localized strings in brackets `Strings` to node.\n     * @return {Promise<boolean>} Promise resolves to true if strings was updated in node, else false(in browser.)\n     */\n    async function _updateNodeLocaleStrings() {\n        if(!Phoenix.isNativeApp) {\n            // this does nothing in browser builds.\n            return false;\n        }\n        await utilsConnector.execPeer(\"setLocaleStrings\", Strings);\n        return true;\n    }\n\n    async function getPhoenixBinaryVersion() {\n        if(!Phoenix.isNativeApp) {\n            throw new Error(\"getPhoenixBinaryVersion not available in browser\");\n        }\n        const cliArgs = await window.__TAURI__.invoke('_get_commandline_args');\n        const phoenixBinPath = cliArgs[0];\n        return utilsConnector.execPeer(\"getPhoenixBinaryVersion\", phoenixBinPath);\n    }\n\n    async function getLinuxOSFlavorName() {\n        if(Phoenix.platform !== \"linux\" || !Phoenix.isNativeApp) {\n            return null;\n        }\n        return utilsConnector.execPeer(\"getLinuxOSFlavorName\");\n    }\n\n    async function openUrlInBrowser(url, browserName) {\n        if(!Phoenix.isNativeApp) {\n            throw new Error(\"openUrlInBrowser not available in browser\");\n        }\n        return utilsConnector.execPeer(\"openUrlInBrowser\", {url, browserName});\n    }\n\n    async function _loadNodeExtensionModule(moduleNativeDir) {\n        if(!Phoenix.isNativeApp) {\n            throw new Error(\"_loadNodeExtensionModule not available in browser\");\n        }\n        return utilsConnector.execPeer(\"_loadNodeExtensionModule\", {moduleNativeDir});\n    }\n\n    async function _npmInstallInFolder(moduleNativeDir) {\n        if(!Phoenix.isNativeApp) {\n            throw new Error(\"_npmInstallInFolder not available in browser\");\n        }\n        return utilsConnector.execPeer(\"_npmInstallInFolder\", {moduleNativeDir});\n    }\n\n    if(NodeConnector.isNodeAvailable()) {\n        // todo we need to update the strings if a user extension adds its translations. Since we dont support\n        // node extensions for now, should consider when we support node extensions.\n        _updateNodeLocaleStrings();\n    }\n\n    // private apis\n    exports._loadNodeExtensionModule = _loadNodeExtensionModule;\n    exports._npmInstallInFolder = _npmInstallInFolder;\n\n    // public apis\n    exports.fetchURLText = fetchURLText;\n    exports.getPhoenixBinaryVersion = getPhoenixBinaryVersion;\n    exports.getLinuxOSFlavorName = getLinuxOSFlavorName;\n    exports.openUrlInBrowser = openUrlInBrowser;\n    exports.isNodeReady = NodeConnector.isNodeReady;\n\n    window.NodeUtils = exports;\n});\n"],"file":"NodeUtils.js"}