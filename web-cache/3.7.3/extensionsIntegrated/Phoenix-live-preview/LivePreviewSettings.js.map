{"version":3,"sources":["extensionsIntegrated/Phoenix-live-preview/LivePreviewSettings.js"],"names":["define","require","exports","module","livePreviewSettings","Dialogs","ProjectManager","Strings","utils","Metrics","FileSystem","PreferencesManager","EventDispatcher","Mustache","makeEventDispatcher","FRAMEWORK_CUSTOM","FRAMEWORK_DOCUSAURUS","EVENT_SERVER_CHANGED","EVENT_CUSTOM_SERVER_ENABLED_CHANGED","SUPPORTED_FRAMEWORKS","configFile","hotReloadSupported","PREFERENCE_SHOW_LIVE_PREVIEW_PANEL","PREFERENCE_PROJECT_SERVER_ENABLED","PREFERENCE_PROJECT_SERVER_URL","PREFERENCE_PROJECT_SERVER_PATH","PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED","PREFERENCE_PROJECT_PREVIEW_FRAMEWORK","async","detectFramework","$frameworkSelect","$hotReloadChk","framework","Object","keys","filePath","path","join","getProjectRoot","fullPath","exists","existsAsync","val","prop","_saveProjectPreferences","useCustomServer","liveServerURL","serveRoot","set","PROJECT_SCOPE","get","showSettingsDialog","Promise","resolve","currentSettings","$template","$","render","settings","$livePreviewServerURL","find","$enableCustomServerChk","$showLivePreviewAtStartup","$serveRoot","$serveRootLabel","$hotReloadLabel","$frameworkLabel","refreshValues","is","removeClass","addClass","on","countEvent","EVENT_TYPE","LIVE_PREVIEW","showModalDialogUsingTemplate","done","id","DIALOG_BTN_OK","shouldShowLivePreviewAtStartup","_resolveServer","url","endsWith","startsWith","substring","serverURL","pathInProject","getCustomServeRoot","getCustomServeBaseURL","getCustomServerConfig","customServer","isWithinProject","projectRoot","relativePath","relative","pathRelativeToServeRoot","replace","isServerRenderedURL","isPreviewableFile","isServerRenderedFile","isMarkdownFile","isSVG","getCustomServerFramework","isUsingCustomServer","serverSupportsHotReload","_serverChanged","trigger","definePreference","description","LIVE_DEV_SETTINGS_SERVER_PREFERENCE","LIVE_DEV_SETTINGS_STARTUP_PREFERENCE","LIVE_DEV_SETTINGS_HOT_RELOAD_PREFERENCE","LIVE_DEV_SETTINGS_SERVE_PREFERENCE","LIVE_DEV_SETTINGS_SERVER_ROOT_PREF","LIVE_DEV_SETTINGS_FRAMEWORK_PREFERENCES","values"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global path, jsPromise*/\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const livePreviewSettings    = require(\"text!./livePreviewSettings.html\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        ProjectManager        = require(\"project/ProjectManager\"),\n        Strings = require(\"strings\"),\n        utils = require('./utils'),\n        Metrics            = require(\"utils/Metrics\"),\n        FileSystem         = require(\"filesystem/FileSystem\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\");\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    const FRAMEWORK_CUSTOM = \"Custom\",\n        FRAMEWORK_DOCUSAURUS = \"Docusaurus\";\n\n    const EVENT_SERVER_CHANGED = \"customServerChanged\",\n        EVENT_CUSTOM_SERVER_ENABLED_CHANGED = \"customServerEnabledChanged\";\n\n    const SUPPORTED_FRAMEWORKS = {};\n    SUPPORTED_FRAMEWORKS[FRAMEWORK_DOCUSAURUS] = {configFile: \"docusaurus.config.js\", hotReloadSupported: true};\n\n    const PREFERENCE_SHOW_LIVE_PREVIEW_PANEL = \"livePreviewShowAtStartup\",\n        PREFERENCE_PROJECT_SERVER_ENABLED = \"livePreviewUseDevServer\",\n        PREFERENCE_PROJECT_SERVER_URL = \"livePreviewServerURL\",\n        PREFERENCE_PROJECT_SERVER_PATH = \"livePreviewServerProjectPath\",\n        PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED = \"livePreviewHotReloadSupported\",\n        PREFERENCE_PROJECT_PREVIEW_FRAMEWORK = \"livePreviewFramework\";\n    PreferencesManager.definePreference(PREFERENCE_PROJECT_SERVER_ENABLED, \"boolean\", false, {\n        description: Strings.LIVE_DEV_SETTINGS_SERVER_PREFERENCE\n    });\n    PreferencesManager.definePreference(PREFERENCE_SHOW_LIVE_PREVIEW_PANEL, \"boolean\", true, {\n        description: Strings.LIVE_DEV_SETTINGS_STARTUP_PREFERENCE\n    });\n    PreferencesManager.definePreference(PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED, \"boolean\", null, {\n        description: Strings.LIVE_DEV_SETTINGS_HOT_RELOAD_PREFERENCE\n    });\n    PreferencesManager.definePreference(PREFERENCE_PROJECT_SERVER_URL, \"string\", \"\", {\n        description: Strings.LIVE_DEV_SETTINGS_SERVE_PREFERENCE\n    });\n    PreferencesManager.definePreference(PREFERENCE_PROJECT_SERVER_PATH, \"string\", \"/\", {\n        description: Strings.LIVE_DEV_SETTINGS_SERVER_ROOT_PREF\n    });\n    PreferencesManager.definePreference(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK, \"string\", null, {\n        description: Strings.LIVE_DEV_SETTINGS_FRAMEWORK_PREFERENCES,\n        values: Object.keys(SUPPORTED_FRAMEWORKS)\n    });\n    \n    async function detectFramework($frameworkSelect, $hotReloadChk) {\n        for(let framework of Object.keys(SUPPORTED_FRAMEWORKS)){\n            const configFile = SUPPORTED_FRAMEWORKS[framework].configFile,\n                hotReloadSupported = SUPPORTED_FRAMEWORKS[framework].hotReloadSupported;\n            let filePath   = path.join(ProjectManager.getProjectRoot().fullPath, configFile);\n            const exists = await FileSystem.existsAsync(filePath);\n            if(exists){\n                $frameworkSelect.val(framework);\n                $hotReloadChk.prop('checked', hotReloadSupported);\n                return;\n            }\n        }\n        $frameworkSelect.val(FRAMEWORK_CUSTOM);\n        $hotReloadChk.prop('checked', false);\n    }\n\n    function _saveProjectPreferences(useCustomServer, liveServerURL, serveRoot, hotReloadSupported, framework) {\n        PreferencesManager.set(PREFERENCE_PROJECT_SERVER_ENABLED, useCustomServer, PreferencesManager.PROJECT_SCOPE);\n        if(PreferencesManager.get(PREFERENCE_PROJECT_SERVER_URL, PreferencesManager.PROJECT_SCOPE) !== liveServerURL){\n            // we check for change as a change event handler is attached to this property\n            PreferencesManager.set(PREFERENCE_PROJECT_SERVER_URL, liveServerURL, PreferencesManager.PROJECT_SCOPE);\n        }\n        PreferencesManager.set(PREFERENCE_PROJECT_SERVER_PATH, serveRoot, PreferencesManager.PROJECT_SCOPE);\n        PreferencesManager.set(PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED, hotReloadSupported, PreferencesManager.PROJECT_SCOPE);\n        PreferencesManager.set(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK, framework, PreferencesManager.PROJECT_SCOPE);\n    }\n\n    function showSettingsDialog() {\n        return new Promise(resolve=>{\n            const currentSettings = {};\n            const $template       = $(Mustache.render(`${livePreviewSettings}`,\n                {\"settings\": currentSettings, \"Strings\": Strings}));\n\n            // Select the correct theme.\n            const $livePreviewServerURL = $template.find(\"#livePreviewServerURL\"),\n                $enableCustomServerChk = $template.find(\"#enableCustomServerChk\"),\n                $showLivePreviewAtStartup = $template.find(\"#showLivePreviewAtStartupChk\"),\n                $serveRoot = $template.find(\"#serveRoot\"),\n                $serveRootLabel = $template.find(\"#serveRootLabel\"),\n                $hotReloadChk = $template.find(\"#hotReloadChk\"),\n                $hotReloadLabel = $template.find(\"#hotReloadLabel\"),\n                $frameworkLabel = $template.find(\"#frameworkLabel\"),\n                $frameworkSelect = $template.find(\"#frameworkSelect\");\n            $enableCustomServerChk.prop('checked', PreferencesManager.get(PREFERENCE_PROJECT_SERVER_ENABLED));\n            $showLivePreviewAtStartup.prop('checked', PreferencesManager.get(PREFERENCE_SHOW_LIVE_PREVIEW_PANEL));\n            $hotReloadChk.prop('checked', !!PreferencesManager.get(PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED));\n            // figure out the framework\n\n            if(PreferencesManager.get(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK) === null) {\n                detectFramework($frameworkSelect, $hotReloadChk);\n            } else {\n                $frameworkSelect.val(PreferencesManager.get(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK));\n            }\n\n            function refreshValues() {\n                if($enableCustomServerChk.is(\":checked\")){\n                    $livePreviewServerURL.prop(\"disabled\", false);\n                } else {\n                    $livePreviewServerURL.prop(\"disabled\", true);\n                }\n                if($enableCustomServerChk.is(\":checked\") && $livePreviewServerURL.val()){\n                    $serveRoot.removeClass(\"forced-hidden\");\n                    $serveRootLabel.removeClass(\"forced-hidden\");\n                    $hotReloadChk.removeClass(\"forced-hidden\");\n                    $hotReloadLabel.removeClass(\"forced-hidden\");\n                    $frameworkSelect.removeClass(\"forced-hidden\");\n                    $frameworkLabel.removeClass(\"forced-hidden\");\n                } else {\n                    $serveRoot.addClass(\"forced-hidden\");\n                    $serveRootLabel.addClass(\"forced-hidden\");\n                    $hotReloadChk.addClass(\"forced-hidden\");\n                    $hotReloadLabel.addClass(\"forced-hidden\");\n                    $frameworkSelect.addClass(\"forced-hidden\");\n                    $frameworkLabel.addClass(\"forced-hidden\");\n                }\n            }\n\n            $livePreviewServerURL.on(\"input\", refreshValues);\n            $enableCustomServerChk.on(\"change\", refreshValues);\n            $livePreviewServerURL.val(PreferencesManager.get(PREFERENCE_PROJECT_SERVER_URL));\n            $serveRoot.val(PreferencesManager.get(PREFERENCE_PROJECT_SERVER_PATH));\n            refreshValues();\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"settings\", \"dialog\");\n            Dialogs.showModalDialogUsingTemplate($template).done(function (id) {\n                if (id === Dialogs.DIALOG_BTN_OK) {\n                    PreferencesManager.set(PREFERENCE_SHOW_LIVE_PREVIEW_PANEL, $showLivePreviewAtStartup.is(\":checked\"));\n                    _saveProjectPreferences($enableCustomServerChk.is(\":checked\"), $livePreviewServerURL.val(),\n                        $serveRoot.val(), $hotReloadChk.is(\":checked\"), $frameworkSelect.val());\n                }\n                resolve();\n            });\n        });\n    }\n\n    function shouldShowLivePreviewAtStartup() {\n        return PreferencesManager.get(PREFERENCE_SHOW_LIVE_PREVIEW_PANEL);\n    }\n\n    function _resolveServer() {\n        if(!PreferencesManager.get(PREFERENCE_PROJECT_SERVER_ENABLED) ||\n            !PreferencesManager.get(PREFERENCE_PROJECT_SERVER_URL)){\n            return null;\n        }\n        let url = PreferencesManager.get(PREFERENCE_PROJECT_SERVER_URL);\n        if(!url.endsWith(\"/\")){\n            url = `${url}/`;\n        }\n        let path = PreferencesManager.get(PREFERENCE_PROJECT_SERVER_PATH) || \"/\";\n        if(!path){\n            path = \"/\";\n        }\n        if(!path.endsWith(\"/\")){\n            path = `${path}/`; // www -> www/ and /www -> /www/\n        }\n        if(path.startsWith(\"/\")){\n            path = path.substring(1); // / -> \"\" , www/ -> www/ and /www -> www/\n        }\n        return {\n            serverURL: url, // guaranteed to end with a slash\n            pathInProject: path // guaranteed to not start with a /, but always ends with a / if there\n        };\n    }\n\n    function getCustomServeRoot() {\n        return PreferencesManager.get(PREFERENCE_PROJECT_SERVER_PATH) || \"/\";\n    }\n\n    function getCustomServeBaseURL() {\n        return PreferencesManager.get(PREFERENCE_PROJECT_SERVER_URL) || \"\";\n    }\n\n    function getCustomServerConfig(fullPath) {\n        const customServer = _resolveServer();\n        if(!customServer || !ProjectManager.isWithinProject(fullPath)) {\n            return null;\n        }\n        const projectRoot = ProjectManager.getProjectRoot().fullPath;\n        const relativePath = path.relative(projectRoot, fullPath);\n        const framework = PreferencesManager.get(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK);\n        let pathRelativeToServeRoot = relativePath;\n        if(customServer.pathInProject !== \"\" &&\n            relativePath.startsWith(customServer.pathInProject)){ // eg www/\n            // www/design/index.html -> design/index.html\n            pathRelativeToServeRoot = relativePath.replace(customServer.pathInProject, \"\");\n        }\n        const isServerRenderedURL = (utils.isPreviewableFile(fullPath) || utils.isServerRenderedFile(fullPath))\n            && !utils.isMarkdownFile(fullPath) && !utils.isSVG(fullPath);\n        if(framework === FRAMEWORK_DOCUSAURUS && utils.isMarkdownFile(fullPath)) {\n            // for docusaurus, we do not have a reliable way to parse the config file and deduce paths, so we always\n            // return the root url for now.\n            pathRelativeToServeRoot = \"\";\n        } else if(!isServerRenderedURL || (customServer.pathInProject !== \"\" &&\n            !relativePath.startsWith(customServer.pathInProject))){ // someNonServePath/design/index.html -> cannot serve this!\n            return null;\n        }\n        // www/design/index.html -> http://localhost:8000/design/index.html\n        return `${customServer.serverURL}${pathRelativeToServeRoot}`;\n    }\n\n    function getCustomServerFramework() {\n        return PreferencesManager.get(PREFERENCE_PROJECT_PREVIEW_FRAMEWORK);\n    }\n\n    function isUsingCustomServer() {\n        return !!_resolveServer();\n    }\n\n    function serverSupportsHotReload() {\n        const customServer = _resolveServer();\n        return customServer && !!PreferencesManager.get(PREFERENCE_PROJECT_SERVER_HOT_RELOAD_SUPPORTED);\n    }\n\n    function _serverChanged() {\n        exports.trigger(EVENT_SERVER_CHANGED);\n    }\n\n    PreferencesManager.on(\"change\", PREFERENCE_PROJECT_SERVER_URL, _serverChanged);\n    PreferencesManager.on(\"change\", PREFERENCE_PROJECT_SERVER_ENABLED, ()=>{\n        exports.trigger(EVENT_CUSTOM_SERVER_ENABLED_CHANGED,\n            PreferencesManager.get(PREFERENCE_PROJECT_SERVER_ENABLED));\n    });\n\n    exports.showSettingsDialog = showSettingsDialog;\n    exports.getCustomServerConfig = getCustomServerConfig;\n    exports.getCustomServeBaseURL = getCustomServeBaseURL;\n    exports.getCustomServeRoot = getCustomServeRoot;\n    exports.isUsingCustomServer = isUsingCustomServer;\n    exports.getCustomServerFramework = getCustomServerFramework;\n    exports.serverSupportsHotReload = serverSupportsHotReload;\n    exports.shouldShowLivePreviewAtStartup = shouldShowLivePreviewAtStartup;\n    // events\n    exports.EVENT_SERVER_CHANGED = EVENT_SERVER_CHANGED;\n    exports.EVENT_CUSTOM_SERVER_ENABLED_CHANGED = EVENT_CUSTOM_SERVER_ENABLED_CHANGED;\n});\n"],"file":"LivePreviewSettings.js"}