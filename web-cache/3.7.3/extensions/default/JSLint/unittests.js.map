{"version":3,"sources":["extensions/default/JSLint/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","describe","testProjectsFolder","getTestPath","testWindow","$","CodeInspection","toggleJSLintResults","triggerHandler","beforeAll","async","createTestWindowAndRun","test","toggleEnabled","awaitsFor","_JsHintExtensionReadyToIntegTest","afterAll","closeTestWindow","it","loadProjectInTestWindow","awaitsForDone","openProjectFiles","is","awaits"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBC,SAASC,UAAU,wBAEzCC,SAAS,qBAAsB,WAC3B,IAAIC,mBAAqBJ,gBAAgBK,YAAY,oCACjDC,WACAC,EACAC,eAEJ,IAAIC,oBAAsB,WACtBF,EAAE,sBAAsBG,eAAe,UAG3CC,UAAUC,iBACNN,iBAAmBN,gBAAgBa,yBAEnCN,EAAID,WAAWC,GACfC,eAAiBF,WAAWL,SAASa,KAAKN,gBAC3BO,eAAc,SACvBC,UAAU,IAAIV,WAAWW,iCAC3B,gCAAiC,MACtC,KAEHC,SAASN,iBACLN,WAAgB,KAChBC,EAAgB,WACVP,gBAAgBmB,mBACvB,KAEHC,GAAG,6DAA8DR,uBACvDZ,gBAAgBqB,wBAAwBjB,mBAAqB,4BAC7DkB,cAActB,gBAAgBuB,iBAAiB,CAAC,WAAY,mCAC5DP,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC,gCAEHf,4BACMO,UAAU,KACJT,EAAE,mBAAmBiB,GAAG,YACjC,+BAEHf,4BACMO,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC,kCAGPJ,GAAG,mDAAoDR,uBAC7CZ,gBAAgBqB,wBAAwBjB,mBAAqB,wBAC7DkB,cAActB,gBAAgBuB,iBAAiB,CAAC,iBAAkB,wBAClEP,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC,kCAGPJ,GAAG,6CAA8CR,uBACvCZ,gBAAgBqB,wBAAwBjB,mBAAqB,0BAE7DkB,cAActB,gBAAgBuB,iBAAiB,CAAC,WAAY,+BAE5DE,OAAO,WACPT,UAAU,KACJT,EAAE,mBAAmBiB,GAAG,YACjC,qCAGGF,cAActB,gBAAgBuB,iBAAiB,CAAC,WAAY,+BAC5DP,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC,kCAGPJ,GAAG,+CAAgDR,uBACzCZ,gBAAgBqB,wBAAwBjB,mBAAqB,iCAE7DkB,cAActB,gBAAgBuB,iBAAiB,CAAC,WAAY,+BAE5DE,OAAO,WACPT,UAAU,KACJT,EAAE,mBAAmBiB,GAAG,YACjC,qCAGGF,cAActB,gBAAgBuB,iBAAiB,CAAC,WAAY,+BAC5DP,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC,kCAGPJ,GAAG,+DAAgER,uBACzDZ,gBAAgBqB,wBAAwBjB,mBAAqB,+BAC7DkB,cAActB,gBAAgBuB,iBAAiB,CAAC,iBAAkB,wBAClEP,UAAU,IACLT,EAAE,mBAAmBiB,GAAG,YAChC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeAll, afterAll, awaitsForDone, awaits, awaitsFor */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\");\n\n    describe(\"integration:JSHint\", function () {\n        let testProjectsFolder = SpecRunnerUtils.getTestPath(\"/spec/JSHintExtensionTest-files/\"),\n            testWindow,\n            $,\n            CodeInspection;\n\n        var toggleJSLintResults = function () {\n            $(\"#status-inspection\").triggerHandler(\"click\");\n        };\n\n        beforeAll(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n            // Load module instances from brackets.test\n            $ = testWindow.$;\n            CodeInspection = testWindow.brackets.test.CodeInspection;\n            CodeInspection.toggleEnabled(true);\n            await awaitsFor(()=>testWindow._JsHintExtensionReadyToIntegTest,\n                \"JsHint extension to be loaded\", 10000);\n        }, 30000);\n\n        afterAll(async function () {\n            testWindow    = null;\n            $             = null;\n            await SpecRunnerUtils.closeTestWindow();\n        }, 30000);\n\n        it(\"status icon should toggle Errors panel when errors present\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"valid-config-error\");\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es8.js\"]), \"open test file with error\");\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n\n            toggleJSLintResults();\n            await awaitsFor(()=>{\n                return !$(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be hidden\");\n\n            toggleJSLintResults();\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n        });\n\n        it(\"should show errors if invalid .jshintrc detected\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"invalid-config\");\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"no-errors.js\"]), \"open test file\");\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n        });\n\n        it(\"should load valid es6 .jshintrc in project\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"valid-config-es6\");\n            // es6 file should have no errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es6.js\"]), \"open test file es6.js\");\n\n            await awaits(100);\n            await awaitsFor(()=>{\n                return !$(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be hidden\");\n\n            // using es8 async feature in es6 jshint mode should have errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es8.js\"]), \"open test file es8.js\");\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n        });\n\n        it(\"should extend valid es6 .jshintrc in project\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"valid-config-es6-extend\");\n            // es6 file should have no errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es6.js\"]), \"open test file es6.js\");\n\n            await awaits(100);\n            await awaitsFor(()=>{\n                return !$(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be hidden\");\n\n            // using es8 async feature in es6 jshint mode should have errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es8.js\"]), \"open test file es8.js\");\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n        });\n\n        it(\"should show errors if invalid .jshintrc extend file detected\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"invalid-config-extend\");\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"no-errors.js\"]), \"open test file\");\n            await awaitsFor(()=>{\n                return $(\"#problems-panel\").is(\":visible\");\n            }, \"Problems panel to be visible\");\n        });\n    });\n});\n"],"file":"unittests.js"}