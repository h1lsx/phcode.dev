{"version":3,"sources":["extensions/default/CSSCodeHints/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","CodeHintManager","CSSUtils","PreferencesManager","TokenUtils","StringMatch","ColorUtils","Strings","KeyEvent","LiveDevelopment","Metrics","CSSProperties","properties","JSON","parse","BOOSTED_PROPERTIES","MAX_CSS_HINTS","cssWideKeywords","computedProperties","computedPropertyKeys","lastContext","CssPropHints","this","primaryTriggerKeys","secondaryTriggerKeys","exclusion","vendorPrefixesAndGenericToEnd","hints","nonDashHints","dashHints","forEach","hint","label","startsWith","includes","push","concat","formatHints","isColorSwatch","length","splice","map","token","$hintObj","$","value","text","addClass","stringRanges","item","matched","append","formatColorHint","color","MDN_URL","$mdn","DOCS_MORE_LINK_MDN_TITLE","attr","uniqueMerge","arr1","arr2","_computeProperties","blacklistedValues","none","auto","propertyKey","Object","keys","property","type","values","definePreference","description","DESCRIPTION_CSS_PROP_HINTS","prototype","updateExclusion","propNameOnly","textAfterCursor","info","context","PROP_NAME","name","substr","offset","PROP_VALUE","hasValidExclusion","hasHints","editor","implicitChar","cursor","getCursorPos","getInfoAtPos","indexOf","getHints","needle","valueNeedle","valueArray","result","selectInitial","isNewItem","index","trim","injectedCSSDefaults","COLOR_NAMES","pvalue","codeHintsSort","limit","onlyContiguous","match","boostPrefixList","resultItem","sourceIndex","handleWideResults","HISTORY_PREFIX","hintSessionId","isInLiveHighlightSession","onClose","restoreHistoryPoint","onHighlight","$highlightedEl","_$descriptionElem","reason","console","error","currentLivePreviewDetails","getLivePreviewDetails","liveDocument","currentlyEditedFile","document","file","fullPath","livePreviewedFile","doc","isRelatedFile","isRelated","source","SELECTION_REASON","SESSION_START","createHistoryRestorePoint","KEYBOARD_NAV","event","keyCode","DOM_VK_UP","DOM_VK_DOWN","DOM_VK_PAGE_UP","DOM_VK_PAGE_DOWN","countEvent","EVENT_TYPE","LIVE_PREVIEW","$hintItem","find","highligtedValue","data","is","_dontDismissPopupOnScroll","insertHint","isLiveHighlight","start","line","ch","end","keepHints","adjustCursor","newCursor","ctx","jquery","getInitialContext","_codeMirror","string","test","moveNextToken","moveSkippingWhitespace","endsWith","parenMatch","hasSelection","setSelection","replaceSelection","replaceRange","setCursorPos","appReady","cssPropHints","registerHintProvider","cssPropHintProvider"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    var AppInit             = brackets.getModule(\"utils/AppInit\"),\n        CodeHintManager     = brackets.getModule(\"editor/CodeHintManager\"),\n        CSSUtils            = brackets.getModule(\"language/CSSUtils\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        TokenUtils          = brackets.getModule(\"utils/TokenUtils\"),\n        StringMatch         = brackets.getModule(\"utils/StringMatch\"),\n        ColorUtils          = brackets.getModule(\"utils/ColorUtils\"),\n        Strings             = brackets.getModule(\"strings\"),\n        KeyEvent            = brackets.getModule(\"utils/KeyEvent\"),\n        LiveDevelopment     = brackets.getModule(\"LiveDevelopment/main\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        CSSProperties       = require(\"text!CSSProperties.json\"),\n        properties          = JSON.parse(CSSProperties);\n\n    require(\"./css-lint\");\n\n    const BOOSTED_PROPERTIES = [\n        \"display\", \"position\",\n        \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",\n        \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\",\n        \"width\", \"height\",\n        \"background-color\", \"background\", \"color\",\n        \"font-size\", \"font-family\",\n        \"text-align\",\n        \"line-height\",\n        \"border\", \"border-radius\", \"box-shadow\",\n        \"transition\", \"animation\", \"transform\",\n        \"overflow\",\n        \"cursor\",\n        \"z-index\",\n        \"flex\", \"grid\"\n    ];\n    const MAX_CSS_HINTS = 50;\n    const cssWideKeywords = ['initial', 'inherit', 'unset', 'var()', 'calc()'];\n    let computedProperties, computedPropertyKeys;\n\n    PreferencesManager.definePreference(\"codehint.CssPropHints\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_CSS_PROP_HINTS\n    });\n\n    // Context of the last request for hints: either CSSUtils.PROP_NAME,\n    // CSSUtils.PROP_VALUE or null.\n    var lastContext;\n\n    /**\n     * @constructor\n     */\n    function CssPropHints() {\n        this.primaryTriggerKeys = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-()\";\n        this.secondaryTriggerKeys = \":\";\n        this.exclusion = null;\n    }\n\n    /**\n     * Check whether the exclusion is still the same as text after the cursor.\n     * If not, reset it to null.\n     *\n     * @param {boolean} propNameOnly\n     * true to indicate that we update the exclusion only if the cursor is inside property name context.\n     * Otherwise, we also update exclusion for property value context.\n     */\n    CssPropHints.prototype.updateExclusion = function (propNameOnly) {\n        var textAfterCursor;\n        if (this.exclusion && this.info) {\n            if (this.info.context === CSSUtils.PROP_NAME) {\n                textAfterCursor = this.info.name.substr(this.info.offset);\n            } else if (!propNameOnly && this.info.context === CSSUtils.PROP_VALUE) {\n                textAfterCursor = this.info.value.substr(this.info.offset);\n            }\n            if (!CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\n                this.exclusion = null;\n            }\n        }\n    };\n\n    /**\n     * Determines whether CSS propertyname or -name hints are available in the current editor\n     * context.\n     *\n     * @param {Editor} editor\n     * A non-null editor object for the active window.\n     *\n     * @param {String} implicitChar\n     * Either null, if the hinting request was explicit, or a single character\n     * that represents the last insertion and that indicates an implicit\n     * hinting request.\n     *\n     * @return {Boolean}\n     * Determines whether the current provider is able to provide hints for\n     * the given editor context and, in case implicitChar is non- null,\n     * whether it is appropriate to do so.\n     */\n    CssPropHints.prototype.hasHints = function (editor, implicitChar) {\n        this.editor = editor;\n        var cursor = this.editor.getCursorPos();\n\n        lastContext = null;\n        this.info = CSSUtils.getInfoAtPos(editor, cursor);\n\n        if (this.info.context !== CSSUtils.PROP_NAME && this.info.context !== CSSUtils.PROP_VALUE) {\n            return false;\n        }\n\n        if (implicitChar) {\n            this.updateExclusion(false);\n            if (this.info.context === CSSUtils.PROP_NAME) {\n                // Check if implicitChar is the first character typed before an existing property name.\n                if (!this.exclusion && this.info.offset === 1 && implicitChar === this.info.name[0]) {\n                    this.exclusion = this.info.name.substr(this.info.offset);\n                }\n            }\n\n            return (this.primaryTriggerKeys.indexOf(implicitChar) !== -1) ||\n                   (this.secondaryTriggerKeys.indexOf(implicitChar) !== -1);\n        } else if (this.info.context === CSSUtils.PROP_NAME) {\n            if (this.info.offset === 0) {\n                this.exclusion = this.info.name;\n            } else {\n                this.updateExclusion(true);\n            }\n        }\n\n        return true;\n    };\n\n    function vendorPrefixesAndGenericToEnd(hints) {\n        // Two arrays to hold strings: one for non-dash strings, one for dash-starting strings\n        const nonDashHints = [];\n        const dashHints = [];\n\n        // Iterate through the array and partition the strings into the two arrays based on the starting character\n        hints.forEach(hint => {\n            if (hint.label.startsWith('-') || cssWideKeywords.includes(hint.label)) {\n                dashHints.push(hint);\n            } else {\n                nonDashHints.push(hint);\n            }\n        });\n\n        // Concatenate the non-dash array with the dash array to form the final sorted array\n        return nonDashHints.concat(dashHints);\n    }\n\n\n    /**\n     * Returns a sorted and formatted list of hints with the query substring\n     * highlighted.\n     *\n     * @param {Array.<Object>} hints - the list of hints to format\n     * @param isColorSwatch\n     * @return {Array.jQuery} sorted Array of jQuery DOM elements to insert\n     */\n    function formatHints(hints, isColorSwatch) {\n        hints = vendorPrefixesAndGenericToEnd(hints);\n        if(hints.length > MAX_CSS_HINTS) {\n            hints = hints.splice(0, MAX_CSS_HINTS);\n        }\n        return hints.map(function (token) {\n            var $hintObj = $(`<span data-val='${token.label || token.value || token.text}'></span>`).addClass(\"brackets-css-hints brackets-hints\");\n\n            // highlight the matched portion of each hint\n            if (token.stringRanges) {\n                token.stringRanges.forEach(function (item) {\n                    if (item.matched) {\n                        $hintObj.append($(`<span>`)\n                            .text(item.text)\n                            .addClass(\"matched-hint\"));\n                    } else {\n                        $hintObj.append(item.text);\n                    }\n                });\n            } else {\n                $hintObj.text(token.label || token.value);\n            }\n\n            if (isColorSwatch) {\n                $hintObj = ColorUtils.formatColorHint($hintObj, token.color || token.label || token.value);\n            }\n            if(token.MDN_URL) {\n                const $mdn = $(`<a class=\"css-code-hint-info\" style=\"text-decoration: none;\"\n                href=\"${token.MDN_URL}\" title=\"${Strings.DOCS_MORE_LINK_MDN_TITLE}\">\n                <i class=\"fa-solid fa-circle-info\"></i></a>`);\n                $hintObj = $(`<span data-val='${token.label || token.value}'></span>`).append($hintObj).append($mdn);\n            }\n\n            $hintObj.attr(\"data-val\", token.value);\n\n            return $hintObj;\n        });\n    }\n\n    function uniqueMerge(arr1, arr2) {\n        arr2.forEach(item => {\n            if (!arr1.includes(item)) {\n                arr1.push(item);\n            }\n        });\n        return arr1;\n    }\n\n    function _computeProperties() {\n        const blacklistedValues = {\n            none: true,\n            auto: true\n        };\n        computedProperties = {};\n        for(let propertyKey of Object.keys(properties)) {\n            const property = properties[propertyKey];\n            if(property.type === \"color\" || !property.values || !property.values.length\n                || propertyKey === \"font-family\") {\n                computedProperties[propertyKey] = propertyKey;\n                continue;\n            }\n            computedProperties[propertyKey] = propertyKey;\n            for(let value of property.values) {\n                if(!blacklistedValues[value]){\n                    computedProperties[`${propertyKey}: ${value};`] = propertyKey;\n                }\n            }\n        }\n        computedPropertyKeys = Object.keys(computedProperties);\n    }\n\n    /**\n     * Returns a list of availble CSS propertyname or -value hints if possible for the current\n     * editor context.\n     *\n     * @param {Editor} implicitChar\n     * Either null, if the hinting request was explicit, or a single character\n     * that represents the last insertion and that indicates an implicit\n     * hinting request.\n     *\n     * @return {jQuery.Deferred|{\n     *              hints: Array.<string|jQueryObject>,\n     *              match: string,\n     *              selectInitial: boolean,\n     *              handleWideResults: boolean}}\n     * Null if the provider wishes to end the hinting session. Otherwise, a\n     * response object that provides:\n     * 1. a sorted array hints that consists of strings\n     * 2. a string match that is used by the manager to emphasize matching\n     *    substrings when rendering the hint list\n     * 3. a boolean that indicates whether the first result, if one exists,\n     *    should be selected by default in the hint list window.\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\n     *    to allow result string to stretch width of display.\n     */\n    CssPropHints.prototype.getHints = function (implicitChar) {\n        this.cursor = this.editor.getCursorPos();\n        this.info = CSSUtils.getInfoAtPos(this.editor, this.cursor);\n\n        let needle = this.info.name,\n            valueNeedle = \"\",\n            context = this.info.context,\n            valueArray,\n            type,\n            result,\n            selectInitial = false;\n\n        // Clear the exclusion if the user moves the cursor with left/right arrow key.\n        this.updateExclusion(true);\n\n        if (context === CSSUtils.PROP_VALUE) {\n\n            // Always select initial value\n            selectInitial = true;\n\n            // We need to end the session and begin a new session if the ( char is typed to\n            // get arguments into the list when typing too fast\n            if (implicitChar === \"(\") {\n                return true;\n            }\n\n            // When switching from a NAME to a VALUE context, restart the session\n            // to give other more specialized providers a chance to intervene.\n            if (lastContext === CSSUtils.PROP_NAME) {\n                return true;\n            }\n            lastContext = CSSUtils.PROP_VALUE;\n\n\n            if (!properties[needle]) {\n                return null;\n            }\n\n            // Cursor is in an existing property value or partially typed value\n            if (!this.info.isNewItem && this.info.index !== -1) {\n                valueNeedle = this.info.values[this.info.index].trim();\n                valueNeedle = valueNeedle.substr(0, this.info.offset);\n            }\n\n            if(!properties[needle].injectedCSSDefaults){\n                uniqueMerge(properties[needle].values, cssWideKeywords);\n                properties[needle].injectedCSSDefaults = true;\n            }\n            valueArray = properties[needle].values;\n            type = properties[needle].type;\n            let isColorSwatch = false;\n            if (type === \"color\") {\n                isColorSwatch = true;\n                valueArray = valueArray.concat(ColorUtils.COLOR_NAMES.map(function (color) {\n                    return { text: color, color: color };\n                }));\n                valueArray.push(\"transparent\", \"currentColor\");\n            }\n\n            valueArray = $.map(valueArray, function (pvalue) {\n                return pvalue.text || pvalue;\n            });\n\n            result = StringMatch.codeHintsSort(valueNeedle, valueArray, {\n                limit: MAX_CSS_HINTS,\n                onlyContiguous: isColorSwatch // for color swatches, when searching for `ora` we should\n                // only hint <ora>nge and not <o>lived<ra>b (green shade)\n            });\n\n            return {\n                hints: formatHints(result, isColorSwatch),\n                match: null, // the CodeHintManager should not format the results\n                selectInitial: selectInitial\n            };\n        } else if (context === CSSUtils.PROP_NAME) {\n\n            // Select initial property if anything has been typed\n            if (this.primaryTriggerKeys.indexOf(implicitChar) !== -1 || needle !== \"\") {\n                selectInitial = true;\n            }\n\n            if (lastContext === CSSUtils.PROP_VALUE) {\n                // close the session if we're coming from a property value\n                // see https://github.com/adobe/brackets/issues/9496\n                return null;\n            }\n\n            lastContext = CSSUtils.PROP_NAME;\n            needle = needle.substr(0, this.info.offset);\n            if(!computedProperties){\n                _computeProperties();\n            }\n\n\n            result = StringMatch.codeHintsSort(needle, computedPropertyKeys, {\n                limit: MAX_CSS_HINTS,\n                boostPrefixList: BOOSTED_PROPERTIES\n            });\n\n            for(let resultItem of result) {\n                const propertyKey = computedPropertyKeys[resultItem.sourceIndex];\n                if(properties[propertyKey] && properties[propertyKey].MDN_URL){\n                    resultItem.MDN_URL = properties[propertyKey].MDN_URL;\n                }\n            }\n\n            return {\n                hints: formatHints(result),\n                match: null, // the CodeHintManager should not format the results\n                selectInitial: selectInitial,\n                handleWideResults: false\n            };\n        }\n        return null;\n    };\n\n    const HISTORY_PREFIX = \"Live_hint_\";\n    let hintSessionId = 0, isInLiveHighlightSession = false;\n\n    CssPropHints.prototype.onClose = function () {\n        if(isInLiveHighlightSession) {\n            this.editor.restoreHistoryPoint(`${HISTORY_PREFIX}${hintSessionId}`);\n            isInLiveHighlightSession = false;\n        }\n        hintSessionId++;\n    };\n\n    CssPropHints.prototype.onHighlight = function ($highlightedEl, _$descriptionElem, reason) {\n        if(!reason){\n            console.error(\"OnHighlight called without reason, should never happen!\");\n            hintSessionId++;\n            return;\n        }\n        const currentLivePreviewDetails = LiveDevelopment.getLivePreviewDetails();\n        if(!(currentLivePreviewDetails && currentLivePreviewDetails.liveDocument)) {\n            // css live hints only for live previewed page and related files\n            return;\n        }\n        const currentlyEditedFile = this.editor.document.file.fullPath;\n        const livePreviewedFile = currentLivePreviewDetails.liveDocument.doc.file.fullPath;\n        if(currentlyEditedFile !== livePreviewedFile) {\n            const isRelatedFile = currentLivePreviewDetails.liveDocument.isRelated &&\n                currentLivePreviewDetails.liveDocument.isRelated(currentlyEditedFile);\n            if(!isRelatedFile) {\n                // file is neither current html file being live previewed, or any of its\n                // related file. we dont show hints in the case\n                return;\n            }\n        }\n        if(reason.source === CodeHintManager.SELECTION_REASON.SESSION_START){\n            hintSessionId++;\n            this.editor.createHistoryRestorePoint(`${HISTORY_PREFIX}${hintSessionId}`);\n            return;\n        }\n        if(reason.source !== CodeHintManager.SELECTION_REASON.KEYBOARD_NAV){\n            return;\n        }\n        const event = reason.event;\n        if(!(event.keyCode === KeyEvent.DOM_VK_UP ||\n            event.keyCode === KeyEvent.DOM_VK_DOWN ||\n            event.keyCode === KeyEvent.DOM_VK_PAGE_UP ||\n            event.keyCode === KeyEvent.DOM_VK_PAGE_DOWN)){\n            return;\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"cssHint\", \"preview\");\n        const $hintItem = $highlightedEl.find(\".brackets-css-hints\");\n        const highligtedValue = $highlightedEl.find(\".brackets-css-hints\").data(\"val\");\n        if(!highligtedValue || !$hintItem.is(\":visible\")){\n            return;\n        }\n        isInLiveHighlightSession = true;\n        this.editor._dontDismissPopupOnScroll();\n        this.editor.restoreHistoryPoint(`${HISTORY_PREFIX}${hintSessionId}`);\n        this.insertHint($highlightedEl.find(\".brackets-css-hints\"), true);\n    };\n\n    /**\n     * Inserts a given CSS protertyname or -value hint into the current editor context.\n     *\n     * @param {String} hint\n     * The hint to be inserted into the editor context.\n     *\n     * @return {Boolean}\n     * Indicates whether the manager should follow hint insertion with an\n     * additional explicit hint request.\n     */\n    CssPropHints.prototype.insertHint = function (hint, isLiveHighlight) {\n        var offset = this.info.offset,\n            cursor = this.editor.getCursorPos(),\n            start = {line: -1, ch: -1},\n            end = {line: -1, ch: -1},\n            keepHints = false,\n            adjustCursor = false,\n            newCursor,\n            ctx;\n\n        if (hint.jquery) {\n            hint = hint.data(\"val\") + \"\"; // font-weight: 400, 400 is returned as number so,\n        }\n\n        if (this.info.context !== CSSUtils.PROP_NAME && this.info.context !== CSSUtils.PROP_VALUE) {\n            return false;\n        }\n\n        start.line = end.line = cursor.line;\n        start.ch = cursor.ch - offset;\n\n        if (this.info.context === CSSUtils.PROP_NAME) {\n            keepHints = true;\n            var textAfterCursor = this.info.name.substr(this.info.offset);\n            if (this.info.name.length === 0 || CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\n                // It's a new insertion, so append a colon and set keepHints\n                // to show property value hints.\n                hint += \": \";\n                end.ch = start.ch;\n                end.ch += offset;\n\n                if (this.exclusion) {\n                    // Append a space to the end of hint to insert and then adjust\n                    // the cursor before that space.\n                    hint += \" \";\n                    adjustCursor = true;\n                    newCursor = { line: cursor.line,\n                        ch: start.ch + hint.length - 1 };\n                    this.exclusion = null;\n                }\n            } else {\n                // It's a replacement of an existing one or just typed in property.\n                // So we need to check whether there is an existing colon following\n                // the current property name. If a colon already exists, then we also\n                // adjust the cursor position and show code hints for property values.\n                end.ch = start.ch + this.info.name.length;\n                ctx = TokenUtils.getInitialContext(this.editor._codeMirror, cursor);\n                if (ctx.token.string.length > 0 && !/\\S/.test(ctx.token.string)) {\n                    // We're at the very beginning of a property name. So skip it\n                    // before we locate the colon following it.\n                    TokenUtils.moveNextToken(ctx);\n                }\n                if (TokenUtils.moveSkippingWhitespace(TokenUtils.moveNextToken, ctx) && ctx.token.string === \":\") {\n                    adjustCursor = true;\n                    newCursor = { line: cursor.line,\n                        ch: cursor.ch + (hint.length - this.info.name.length) };\n                    // Adjust cursor to the position after any whitespace that follows the colon, if there is any.\n                    if (TokenUtils.moveNextToken(ctx) && ctx.token.string.length > 0 && !/\\S/.test(ctx.token.string)) {\n                        newCursor.ch += ctx.token.string.length;\n                    }\n                } else if(!hint.endsWith(\";\")){\n                    hint += \": \";\n                }\n            }\n        } else {\n            if (!this.info.isNewItem && this.info.index !== -1) {\n                // Replacing an existing property value or partially typed value\n                end.ch = start.ch + this.info.values[this.info.index].length;\n            } else {\n                // Inserting a new property value\n                end.ch = start.ch;\n            }\n\n            var parenMatch = hint.match(/\\(.*?\\)/);\n            if (parenMatch) {\n                // value has (...), so place cursor inside opening paren\n                // and keep hints open\n                adjustCursor = true;\n                newCursor = { line: cursor.line,\n                    ch: start.ch + parenMatch.index + 1 };\n                keepHints = true;\n            }\n        }\n\n        if(isLiveHighlight) {\n            // this is via user press up and down arrows when code hints is visible\n            if(this.info.context !== CSSUtils.PROP_VALUE && !hint.endsWith(\";\")) {\n                // we only do live hints for css property values. else UX is jarring.\n                // property full statements hints like \"display: flex;\" will be live previewed tho\n                return keepHints;\n            }\n            if(!this.editor.hasSelection()){\n                this.editor.setSelection(start, end);\n            }\n            this.editor.replaceSelection(hint, 'around', \"liveHints\");\n            return keepHints;\n        }\n\n        // this is commit flow\n        if(isInLiveHighlightSession) {\n            // end previous highlight session.\n            isInLiveHighlightSession = false;\n            hintSessionId++;\n        }\n\n        if(this.editor.hasSelection()){\n            // this is when user commits\n            this.editor.replaceSelection(hint, 'end');\n            return keepHints;\n        }\n\n        // HACK (tracking adobe/brackets#1688): We talk to the private CodeMirror instance\n        // directly to replace the range instead of using the Document, as we should. The\n        // reason is due to a flaw in our current document synchronization architecture when\n        // inline editors are open.\n        this.editor._codeMirror.replaceRange(hint, start, end);\n\n        if (adjustCursor) {\n            this.editor.setCursorPos(newCursor);\n        }\n\n        return keepHints;\n    };\n\n    AppInit.appReady(function () {\n        var cssPropHints = new CssPropHints();\n        CodeHintManager.registerHintProvider(cssPropHints, [\"css\", \"scss\", \"less\"], 1);\n\n        // For unit testing\n        exports.cssPropHintProvider = cssPropHints;\n    });\n});\n"],"file":"main.js"}