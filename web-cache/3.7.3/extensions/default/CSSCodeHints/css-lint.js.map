{"version":3,"sources":["extensions/default/CSSCodeHints/css-lint.js"],"names":["define","require","exports","module","CodeInspection","brackets","getModule","Strings","LanguageManager","StringUtils","IndexingWorker","getTypeFromSeverity","sev","Type","ERROR","WARNING","META","loadScriptInWorker","uri","cssMode","css","less","scss","async","lintOneFile","text","fullPath","Promise","resolve","reject","languageId","getLanguageForPath","getId","console","error","Error","execPeer","filePath","then","lintResult","length","map","lintError","pos","line","range","start","ch","character","endPos","end","message","code","type","severity","errors","supportedLanguages","language","register","name","format","CSS_LINT_NAME","scanFileAsync","canInspect","endsWith"],"mappings":"AA0BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,eAAqBC,SAASC,UAAU,2BAC1CC,QAAqBF,SAASC,UAAU,WACxCE,gBAAkBH,SAASC,UAAU,4BACrCG,YAAwBJ,SAASC,UAAU,qBAC3CI,eAAqBL,SAASC,UAAU,yBAI5C,SAASK,oBAAoBC,KACzB,OAAQA,KACR,KAAK,EAAI,OAAOR,eAAeS,KAAKC,MACpC,KAAK,EAAI,OAAOV,eAAeS,KAAKE,QACpC,QAAS,OAAOX,eAAeS,KAAKG,MANxCN,eAAeO,sBAAsBd,OAAOe,+BAU5C,MAAMC,QAAU,CACZC,IAAK,MACLC,KAAM,OACNC,KAAM,QAOVC,eAAeC,YAAYC,KAAMC,UAC7B,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzB,MAAMC,WAAatB,gBAAgBuB,mBAAmBL,UAAUM,QAChE,IAAIb,QAAQW,YAGR,OAFAG,QAAQC,MAAM,gCAAiCJ,WAAYJ,eAC3DG,OAAO,IAAIM,MAAM,oCAAqCT,WAG1DhB,eAAe0B,SAAS,UAAW,CAC/BX,KAAAA,KACAN,QAASA,QAAQW,YACjBO,SAAUX,WACXY,KAAKC,aACAA,YAAcA,WAAWC,SACzBD,WAAaA,WAAWE,IAAI,SAAUC,WAClC,MAAO,CACHC,IAAK,CAAEC,KAAMF,UAAUG,MAAMC,MAAMF,KAAMG,GAAIL,UAAUG,MAAMC,MAAME,WACnEC,OAAQ,CAAEL,KAAMF,UAAUG,MAAMK,IAAIN,KAAMG,GAAIL,UAAUG,MAAMK,IAAIF,WAClEG,WAAYT,UAAUS,YAAYT,UAAUU,QAC5CC,KAAM1C,oBAAoB+B,UAAUY,aAI5C1B,QAAQ,CAAE2B,OAAQhB,cAEtBX,cAMZ,MAAM4B,mBAAqB,CAAC,MAAO,OAAQ,QAC3C,IAAI,IAAIC,YAAYD,mBAChBpD,eAAesD,SAASD,SAAU,CAC9BE,KAAMlD,YAAYmD,OAAOrD,QAAQsD,cAAe1C,QAAQsC,WACxDK,cAAetC,YACfuC,WAAY,SAAUrC,UAClB,OAAOA,WAAaA,SAASsC,SAAS","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// Parts of this file is adapted from https://github.com/cfjedimaster/brackets-jshint\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const CodeInspection     = brackets.getModule(\"language/CodeInspection\"),\n        Strings            = brackets.getModule(\"strings\"),\n        LanguageManager = brackets.getModule(\"language/LanguageManager\"),\n        StringUtils           = brackets.getModule(\"utils/StringUtils\"),\n        IndexingWorker     = brackets.getModule(\"worker/IndexingWorker\");\n\n    IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/css-worker.js`);\n\n    function getTypeFromSeverity(sev) {\n        switch (sev) {\n        case 1:  return CodeInspection.Type.ERROR;\n        case 2:  return CodeInspection.Type.WARNING;\n        default: return CodeInspection.Type.META;\n        }\n    }\n\n    const cssMode = {\n        css: \"CSS\",\n        less: \"LESS\",\n        scss: \"SCSS\"\n    };\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, fullPath) {\n        return new Promise((resolve, reject)=>{\n            const languageId = LanguageManager.getLanguageForPath(fullPath).getId();\n            if(!cssMode[languageId]){\n                console.error(\"Unknown language id to lint: \", languageId, fullPath);\n                reject(new Error(\"Unknown CSS language to lint for \"+ fullPath));\n                return;\n            }\n            IndexingWorker.execPeer(\"cssLint\", {\n                text,\n                cssMode: cssMode[languageId],\n                filePath: fullPath\n            }).then(lintResult =>{\n                if (lintResult && lintResult.length) {\n                    lintResult = lintResult.map(function (lintError) {\n                        return {\n                            pos: { line: lintError.range.start.line, ch: lintError.range.start.character },\n                            endPos: { line: lintError.range.end.line, ch: lintError.range.end.character },\n                            message: `${lintError.message} (${lintError.code})`,\n                            type: getTypeFromSeverity(lintError.severity)\n                        };\n                    });\n\n                    resolve({ errors: lintResult });\n                }\n                resolve();\n            });\n        });\n    }\n\n    // Register for JS files\n    const supportedLanguages = [\"css\", \"less\", \"scss\"];\n    for(let language of supportedLanguages){\n        CodeInspection.register(language, {\n            name: StringUtils.format(Strings.CSS_LINT_NAME, cssMode[language]),\n            scanFileAsync: lintOneFile,\n            canInspect: function (fullPath) {\n                return fullPath && !fullPath.endsWith(\".min.css\");\n            }\n        });\n    }\n});\n"],"file":"css-lint.js"}