{"version":3,"sources":["extensions/default/JSLint/ESLint.js"],"names":["define","require","exports","module","CodeInspection","brackets","getModule","FileSystemError","AppInit","PreferencesManager","DocumentManager","Strings","StringUtils","ProjectManager","LanguageManager","NodeUtils","Metrics","prefs","getExtensionPrefs","useESLintFromProject","ESLINT_ERROR_MODULE_LOAD_FAILED","ESLINT_ERROR_MODULE_NOT_FOUND","ESLINT_ERROR_LINT_FAILED","ESLINT_ONLY_IN_NATIVE_APP","PREFS_ESLINT_DISABLED","esLintServiceFailed","_getLintError","errorCode","message","errorMessage","DESCRIPTION_ESLINT_FAILED","format","DESCRIPTION_ESLINT_USE_NATIVE_APP","DESCRIPTION_ESLINT_DO_NPM_INSTALL","DESCRIPTION_ESLINT_LOAD_FAILED","pos","line","ch","htmlMessage","type","Type","ERROR","_getErrorClass","severity","WARNING","console","error","META","_0Based","index","defaultVal","_getErrors","resultArray","map","lintError","fix","range","text","replaceText","rangeOffset","start","end","column","endPos","endLine","endColumn","ruleId","_isEslintSupportsJSX","config","parserOptions","languageOptions","ecmaFeatures","jsx","async","lintOneFile","fullPath","Promise","resolve","Phoenix","isNativeApp","errors","startTime","Date","now","ESLintFile","getProjectRoot","then","esLintResult","logPerformanceTime","language","getLanguageForPath","getId","result","messages","length","isError","isPathIgnored","isIgnored","definePreference","description","DESCRIPTION_ESLINT_DISABLE","on","requestRun","ESLINT_NAME","PACKAGE_JSON","_isESLintProject","reject","configFilePath","path","join","getDocumentForPath","done","configDoc","isWithinProject","content","getText","JSON","parse","devDependencies","eslint","dependencies","err","fail","NOT_FOUND","_reloadOptions","scanningProjectPath","shouldESLintEnable","countEvent","EVENT_TYPE","LINT","catch","_projectFileChanged","_evt","changedPath","addedSet","removedSet","configPath","has","appReady","EVENT_PROJECT_CHANGED_OR_RENAMED_PATH","EVENT_PROJECT_OPEN","e","esLintProvider","name","scanFileAsync","canInspect","get","endsWith","isESLintActive","register"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// Parts of this file is adapted from https://github.com/cfjedimaster/brackets-jshint\n\n/*global path*/\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const CodeInspection   = brackets.getModule(\"language/CodeInspection\"),\n        FileSystemError    = brackets.getModule(\"filesystem/FileSystemError\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        StringUtils        = brackets.getModule(\"utils/StringUtils\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        LanguageManager    = brackets.getModule(\"language/LanguageManager\"),\n        NodeUtils          = brackets.getModule(\"utils/NodeUtils\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\");\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"ESLint\"),\n        useESLintFromProject = false;\n\n    const ESLINT_ERROR_MODULE_LOAD_FAILED = \"ESLINT_MODULE_LOAD_FAILED\",\n        ESLINT_ERROR_MODULE_NOT_FOUND = \"ESLINT_MODULE_NOT_FOUND\",\n        ESLINT_ERROR_LINT_FAILED = \"ESLINT_LINT_FAILED\";\n\n    const ESLINT_ONLY_IN_NATIVE_APP = \"ESLINT_ERROR_ONLY_IN_NATIVE_APP\";\n\n    const PREFS_ESLINT_DISABLED = \"disabled\";\n\n    // this is set to true if the service itself is not active/failed to start.\n    let esLintServiceFailed = false;\n\n    prefs.definePreference(PREFS_ESLINT_DISABLED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_ESLINT_DISABLE\n    }).on(\"change\", function () {\n        CodeInspection.requestRun(Strings.ESLINT_NAME);\n    });\n\n    function _getLintError(errorCode, message) {\n        let errorMessage = Strings.DESCRIPTION_ESLINT_FAILED;\n        switch (errorCode) {\n        case ESLINT_ERROR_LINT_FAILED:\n            errorMessage = StringUtils.format(Strings.DESCRIPTION_ESLINT_FAILED, message || \"Unknown\"); break;\n        case ESLINT_ONLY_IN_NATIVE_APP:\n            errorMessage = Strings.DESCRIPTION_ESLINT_USE_NATIVE_APP; break;\n        case ESLINT_ERROR_MODULE_NOT_FOUND:\n            errorMessage = Strings.DESCRIPTION_ESLINT_DO_NPM_INSTALL; break;\n        case ESLINT_ERROR_MODULE_LOAD_FAILED:\n            errorMessage = Strings.DESCRIPTION_ESLINT_LOAD_FAILED; break;\n        }\n        return [{\n            // JSLint returns 1-based line/col numbers\n            pos: { line: -1, ch: 0 },\n            htmlMessage: errorMessage,\n            type: CodeInspection.Type.ERROR\n        }];\n    }\n\n    function _getErrorClass(severity) {\n        switch(severity) {\n        case 1: return CodeInspection.Type.WARNING;\n        case 2: return CodeInspection.Type.ERROR;\n        default:\n            console.error(\"Unknown ESLint severity!!!\", severity);\n            return CodeInspection.Type.META;\n        }\n    }\n\n    function _0Based(index, defaultVal) {\n        if(index === 0){\n            return 0;\n        }\n        if(!index) {\n            return defaultVal;\n        }\n        return index - 1;\n    }\n\n    function _getErrors(resultArray) {\n        return resultArray.map(function (lintError) {\n            let fix = null;\n            if(lintError.fix && lintError.fix.range && typeof lintError.fix.text === \"string\") {\n                fix = {\n                    replaceText: lintError.fix.text,\n                    rangeOffset: {\n                        start: lintError.fix.range[0],\n                        end: lintError.fix.range[1]\n                    }\n                };\n            }\n            // todo , the results have a set of suggestion suggestions which we can display to user as a set of\n            //  suggestions for a line.\n            return {\n                pos: { line: _0Based(lintError.line), ch: _0Based(lintError.column)},\n                endPos: {\n                    line: _0Based(lintError.endLine, lintError.line),\n                    ch: _0Based(lintError.endColumn, lintError.column)\n                },\n                message: `${lintError.message} ESLint (${lintError.ruleId})`,\n                type: _getErrorClass(lintError.severity),\n                fix: fix\n            };\n        });\n    }\n\n    function _isEslintSupportsJSX(config) {\n        if(!config){\n            return false;\n        }\n        let parserOptions = config.parserOptions; // es 7, 8\n        if(!parserOptions && config.languageOptions && config.languageOptions.parserOptions){\n            // this is for es9 and later\n            parserOptions = config.languageOptions.parserOptions;\n        }\n        return parserOptions && parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.jsx;\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, fullPath) {\n        return new Promise((resolve)=>{\n            if(!Phoenix.isNativeApp) {\n                resolve({ errors: _getLintError(ESLINT_ONLY_IN_NATIVE_APP) });\n                return;\n            }\n            const startTime = Date.now();\n            NodeUtils.ESLintFile(text, fullPath, ProjectManager.getProjectRoot().fullPath).then(esLintResult =>{\n                Metrics.logPerformanceTime(\"ESLint\", Date.now() - startTime);\n                const language = LanguageManager.getLanguageForPath(fullPath).getId();\n                if(language === \"jsx\" && !_isEslintSupportsJSX(esLintResult.config)){\n                    resolve({isIgnored: true});\n                } else if (esLintResult.result && esLintResult.result.messages && esLintResult.result.messages.length) {\n                    esLintServiceFailed = false;\n                    resolve({ errors: _getErrors(esLintResult.result.messages) });\n                } else if(esLintResult.isError) {\n                    esLintServiceFailed = true;\n                    resolve({ errors: _getLintError(esLintResult.errorCode, esLintResult.errorMessage) });\n                } else if(esLintResult.isPathIgnored) {\n                    resolve({isIgnored: true});\n                } else {\n                    esLintServiceFailed = false;\n                    if(!esLintResult.result){\n                        console.error(\"ESLint Unknown result\", esLintResult);\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    const PACKAGE_JSON = \"package.json\";\n\n    /**\n     * Reads package.json and see if eslint is in dependencies or dev dependencies\n     *\n     * @returns {Promise} a promise to return configuration object.\n     */\n    function _isESLintProject() {\n        return new Promise((resolve, reject)=>{\n            const configFilePath = path.join(ProjectManager.getProjectRoot().fullPath, PACKAGE_JSON);\n            DocumentManager.getDocumentForPath(configFilePath).done(function (configDoc) {\n                if (!ProjectManager.isWithinProject(configFilePath)) {\n                    // this is a rare race condition where the user switches project between the get document call.\n                    // Eg. in integ tests.\n                    reject(`ESLint Project changed while scanning ${configFilePath}`);\n                    return;\n                }\n                const content = configDoc.getText();\n                try {\n                    const config = JSON.parse(content);\n                    resolve(config && (\n                        (config.devDependencies && config.devDependencies.eslint) ||\n                        (config.dependencies && config.dependencies.eslint)\n                    ));\n                } catch (err) {\n                    console.error(`ESLint Error parsing ${PACKAGE_JSON}`, configFilePath, err);\n                    resolve(false);\n                }\n            }).fail((err)=>{\n                if(err !== FileSystemError.NOT_FOUND){\n                    console.error(`ESLint Error reading ${PACKAGE_JSON}`, configFilePath, err);\n                }\n                resolve(false);\n            });\n        });\n    }\n\n    function _reloadOptions() {\n        esLintServiceFailed = false;\n        const scanningProjectPath = ProjectManager.getProjectRoot().fullPath;\n        _isESLintProject().then((shouldESLintEnable)=>{\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                // this is a rare race condition where the user switches project between the get document call.\n                // Eg. in integ tests. do nothing as another scan for the new project will be in progress.\n                return;\n            }\n            if(shouldESLintEnable) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"eslint\", \"config\");\n            }\n            useESLintFromProject = shouldESLintEnable;\n            CodeInspection.requestRun(Strings.ESLINT_NAME);\n        }).catch((err)=>{\n            console.error(`ESLint reload options error: ${err}`);\n            if(scanningProjectPath !== ProjectManager.getProjectRoot().fullPath){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LINT, \"eslintConfig\", \"error\");\n            useESLintFromProject = false;\n            CodeInspection.requestRun(Strings.ESLINT_NAME);\n        });\n    }\n\n    function _projectFileChanged(_evt, changedPath, addedSet, removedSet) {\n        let configPath = path.join(ProjectManager.getProjectRoot().fullPath, PACKAGE_JSON);\n        if(changedPath=== configPath || addedSet.has(configPath) || removedSet.has(configPath)){\n            _reloadOptions();\n        }\n    }\n\n    AppInit.appReady(function () {\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CHANGED_OR_RENAMED_PATH, _projectFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, function () {\n            _reloadOptions();\n            if(!Phoenix.isNativeApp) {\n                return;\n            }\n            // just do a dummy eslint to warm up/load the eslint runner service for the project and dispose old service\n            // on project switch.\n            NodeUtils.ESLintFile(\"console.log();\", \"a.js\", ProjectManager.getProjectRoot().fullPath)\n                .catch(e=>{\n                    console.error(`Error warming up ESLint service`, e);\n                });\n        });\n        _reloadOptions();\n    });\n\n    const esLintProvider = {\n        name: Strings.ESLINT_NAME,\n        scanFileAsync: lintOneFile,\n        canInspect: function (fullPath) {\n            return !prefs.get(PREFS_ESLINT_DISABLED) && fullPath && !fullPath.endsWith(\".min.js\")\n                && useESLintFromProject;\n        }\n    };\n\n    // Register for JS files\n    CodeInspection.register(\"javascript\", esLintProvider);\n    CodeInspection.register(\"jsx\", esLintProvider);\n\n    function isESLintActive() {\n        return useESLintFromProject && Phoenix.isNativeApp && !esLintServiceFailed;\n    }\n\n    exports.isESLintActive = isESLintActive;\n});\n"],"file":"ESLint.js"}