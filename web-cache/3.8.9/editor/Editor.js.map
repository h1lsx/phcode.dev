{"version":3,"sources":["editor/Editor.js"],"names":["define","require","exports","module","CommandManager","Commands","CodeMirror","LanguageManager","EventDispatcher","PerfUtils","PreferencesManager","TextRange","TokenUtils","HTMLUtils","MainViewManager","Metrics","_","IndentHelper","EditorPreferences","ChangeHelper","ErrorPopupHelper","InlineWidgetHelper","registeredGutters","cmOptions","init","CLOSE_BRACKETS","CLOSE_TAGS","DRAG_DROP","HIGHLIGHT_MATCHES","LINEWISE_COPY_CUT","SCROLL_PAST_END","SHOW_CURSOR_SELECT","SHOW_LINE_NUMBERS","SMART_INDENT","SPACE_UNITS","STYLE_ACTIVE_LINE","TAB_SIZE","USE_TAB_CHAR","WORD_WRAP","INDENT_LINE_COMMENT","INPUT_STYLE","LINE_NUMBER_GUTTER","LINE_NUMBER_GUTTER_PRIORITY","CODE_FOLDING_GUTTER_PRIORITY","editorOptions","Object","keys","_duringFocus","BOUNDARY_CHECK_NORMAL","BOUNDARY_IGNORE_TOP","BOUNDARY_BULLSEYE","_copyPos","pos","Pos","line","ch","_checkTopBoundary","options","_checkBottomBoundary","_buildPreferencesContext","fullPath","_buildContext","getLanguageForPath","getId","undefined","_instances","Editor","document","makeMasterEditor","container","range","self","this","isReadOnly","editable","push","addRef","jquery","get","$container","$","addClass","_visibleRange","startLine","endLine","_handleDocumentChange","bind","_handleDocumentDeleted","_handleDocumentLanguageChanged","_doWorkingSetSync","on","mode","_getModeFromDocument","_inlineWidgets","_inlineWidgetQueues","_hideMarks","_lastEditorWidth","_markTypesMap","_$messagePopover","_paneId","_hostEditor","codeMirrorKeyMap","Tab","_handleTabKey","Shift-Tab","Left","instance","_handleSoftTabNavigation","Right","Backspace","Delete","Esc","_instance","canConsumeEscapeKeyEvent","getSelections","length","clearSelection","hasSelection","removeAllInlineWidgets","Home","Cmd-Left","End","Cmd-Right","currentOptions","_currentOptions","zipObject","map","prefName","_getOption","_mouseHandlerOverride","_cm","_repeat","event","ctrlKey","metaKey","setTimeout","execute","NAVIGATE_JUMPTO_DEFINITION","countEvent","EVENT_TYPE","EDITOR","getMode","name","addNew","altKey","toggleClass","Boolean","_codeMirror","autoCloseBrackets","autoCloseTags","coverGutterNextToScrollbar","continueComments","cursorScrollMargin","dragDrop","electricChars","configureMouse","extraKeys","highlightSelectionMatches","indentUnit","indentWithTabs","inputStyle","lineNumbers","lineWiseCopyCut","lineWrapping","matchBrackets","maxScanLineLength","maxScanLines","matchTags","bothTags","scrollPastEnd","showCursorWhenSelecting","smartIndent","styleActiveLine","tabSize","readOnly","_focused","_installEditorListeners","_renderGutters","editor","_handleCursorActivity","domEvent","_handleKeypressEvents","changeList","_handleEditorChange","_toggleMasterEditor","setOption","_duringSync","_resetText","getText","_updateHiddenLines","setCursorPos","_makeEditable","defineProperty","getScrollInfo","top","getRootElement","makeEventDispatcher","prototype","markDeprecated","addHelpers","markPaneId","paneId","_associateEditor","getInlineWidgetsBelowCursor","cursor","getCursorPos","getAllInlineWidgetsForLine","getFocusedInlineWidget","doc","isDirty","addToWorkingSet","file","destroy","trigger","remove","splice","indexOf","releaseRef","off","dispose","_masterEditor","_makeNonEditable","_disassociateEditor","forEach","inlineWidget","_removeInlineWidgetInternal","_updateStyleActiveLine","_handleWhitespaceForElectricChars","selections","lineStr","sel","getLine","end","test","setSelections","keyStr","String","fromCharCode","which","keyCode","getLanguage","selectAllNoScroll","cm","info","operation","scrollTo","left","execCommand","isTextSubset","mark","clear","_hideLines","lineCount","text","currentText","getValue","textLF","currentTextLF","replace","perfTimerName","markStart","cursorPos","scrollPos","getScrollPos","setValue","refresh","clearHistory","markClean","setScrollPos","x","y","addMeasurement","getFile","expandTabs","getCursor","getColOffset","getEndingCursorPos","lastLine","getRange","column","i","getTabSize","getCharIndexForColumn","lineNum","iCol","center","setCursor","centerOnCursor","setSize","width","height","getViewport","CENTERING_MARGIN","_normalizeRange","anchorPos","headPos","start","reversed","getMarkOptionUnderlineError","className","getMarkOptionUnderlineWarn","getMarkOptionUnderlineInfo","getMarkOptionUnderlineSpellcheck","getMarkOptionHyperlinkText","getMarkOptionMatchingRefs","getMarkOptionRenameOutline","startStyle","endStyle","clearWhenEmpty","inclusiveLeft","inclusiveRight","centerOptions","$scrollerElement","editorHeight","getScrollerElement","statusBarHeight","documentCursorPosition","cursorCoords","bottom","screenCursorPosition","Math","min","max","clientHeight","indexFromPos","posFromIndex","index","posWithinRange","endInclusive","somethingSelected","getSelection","primarySel","listSelections","result","anchor","head","primary","convertToLineSelections","defaults","expandEndAtStartOfLine","mergeAdjacent","combinedSelections","prevSel","each","newSel","cloneDeep","selectionForEdit","selectionsToTrack","getSelectedText","allSelections","coordsChar","coordinates","charCoords","getToken","precise","assign","token","getTokenAt","getNextToken","skipWhitespace","next","string","getPreviousToken","prev","execFn","markText","markType","cursorFrom","cursorTo","newMark","metadata","markToken","setBookmark","findMarks","marks","filter","findMarksAt","getAllMarks","clearAllMarks","isSamePosition","position1","position2","getHistory","setHistory","createHistoryRestorePoint","restorePointName","history","done","changeGeneration","restoreHistoryPoint","canRestore","historyEntry","newHistory","historyLength","lastHistoryItem","undoSelection","undo","console","error","setSelection","origin","replaceSelection","replacement","select","replaceSelections","replaceRange","from","to","replaceMultipleRanges","ranges","sort","a","b","primIndex","toggleOverwrite","state","selectWordAt","word","findWordAt","getTextBetween","startPos","endPos","getWordAt","wordRange","getNumberAt","maxDigits","maxDigitsOverflow","type","str","right","decimalAlreadyFound","digitCount","substring","isLineVisible","coords","scrollInfo","getFirstVisibleLine","getLastVisibleLine","value","collapsed","totalHeight","scrollHeight","getWrapperElement","_getLineSpaceElement","children","adjustScrollPos","heightDelta","getTextHeight","defaultTextHeight","addInlineWidget","removeInlineWidget","removeAllInlineWidgetsForLine","getInlineWidgets","setInlineWidgetHeight","displayErrorMessageAtCursor","getVirtualScrollAreaTop","topPadding","offsetTop","scroller","offset","scrollTop","focus","hasFocus","getViewState","restoreViewState","viewState","selection","handleResize","focusedItem","window","activeElement","restoreFocus","contains","refreshAll","redo","notifyVisibilityChange","show","onParentShown","setVisible","$el","css","isFullyVisible","is","getModeForRange","knownMixed","outerMode","startMode","getModeAt","endMode","getOption","getModeForSelection","sels","isMixed","tagInfo","getTagInfo","tokenType","position","ATTR_VALUE","attr","toLowerCase","hasMixedSel","some","rangeMode","getLanguageForSelection","getLanguageForMode","getLanguageForPosition","getModeForDocument","_updateOption","oldValue","newValue","_toggleLinePadding","registerGutter","unregisterGutter","updateLayout","forceRefresh","curRoot","curWidth","$editorHolder","editorAreaHt","parent","style","languageId","_filterByLanguages","gutter","languages","_sortByPriority","priority","_getName","gutters","rootElement","removeClass","setGutterMarker","lineNumber","gutterName","marker","isGutterRegistered","warn","getGutterMarker","lineInfo","gutterMarkers","clearGutterMarker","clearGutter","_toggleComment","indentLineComment","getIndentLineComment","toggleComment","indent","getRegisteredGutters","languageIds","isNaN","gutterExists","forEveryEditor","setUseTabChar","context","set","getUseTabChar","setTabSize","setSpaceUnits","getSpaceUnits","setCloseBrackets","getCloseBrackets","setShowLineNumbers","getShowLineNumbers","setShowActiveLine","getShowActiveLine","setWordWrap","getWordWrap","setIndentLineComment","callback","showLinePadding","$holders","$holder","EVENT_BEFORE_CHANGE","EVENT_CHANGE","EVENT_BEFORE_SELECTION_CHANGE","EVENT_CURSOR_ACTIVITY","EVENT_KEY_PRESS","EVENT_KEY_DOWN","EVENT_KEY_UP","EVENT_FOCUS","EVENT_BLUR","EVENT_UPDATE","EVENT_SCROLL","EVENT_VIEW_PORT_CHANGE","EVENT_LOST_CONTENT","EVENT_OPTION_CHANGE"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Editor is a 1-to-1 wrapper for a CodeMirror editor instance. It layers on Brackets-specific\n * functionality and provides APIs that cleanly pass through the bits of CodeMirror that the rest\n * of our codebase may want to interact with. An Editor is always backed by a Document, and stays\n * in sync with its content; because Editor keeps the Document alive, it's important to always\n * destroy() an Editor that's going away so it can release its Document ref.\n *\n * For now, there's a distinction between the \"master\" Editor for a Document - which secretly acts\n * as the Document's internal model of the text state - and the multitude of secondary Editors\n * which, via Document, sync their changes to and from that master.\n *\n * For now, direct access to the underlying CodeMirror object is still possible via `_codeMirror` --\n * but this is considered deprecated and may go away.\n *\n * The Editor object dispatches the following events: (available as `Editor.EVENT_*` constants. see below)\n *    - keydown, keypress, keyup -- When any key event happens in the editor (whether it changes the\n *      text or not). Handlers are passed `(BracketsEvent, Editor, KeyboardEvent)`. The 3nd arg is the\n *      raw DOM event. Note: most listeners will only want to listen for \"keypress\".\n *    - change - Triggered with an array of change objects. Parameters: (editor, changeList)\n *    - beforeChange - (self, changeObj)\n *    - beforeSelectionChange - (selectionObj)\n *    - focus - Fired when an editor is focused\n *    - blur - Fired when an editor loses focused\n *    - update - Will be fired whenever Editor updates its DOM display.\n *    - cursorActivity -- When the user moves the cursor or changes the selection, or an edit occurs.\n *      Note: do not listen to this in order to be generally informed of edits--listen to the\n *      \"change\" event on Document instead.\n *    - scroll -- When the editor is scrolled, either by user action or programmatically.\n *    - viewportChange - (from: number, to: number) Fires whenever the view port of the editor changes\n *      (due to scrolling, editing, or any other factor). The from and to arguments give the new start\n *      and end of the viewport. This is combination with `editorInstance.getViewPort()` can be used to\n *      selectively redraw visual elements in code like syntax analyze only parts of code instead\n *      of the full code everytime.\n *    - lostContent -- When the backing Document changes in such a way that this Editor is no longer\n *      able to display accurate text. This occurs if the Document's file is deleted, or in certain\n *      Document->editor syncing edge cases that we do not yet support (the latter cause will\n *      eventually go away).\n *    - optionChange -- Triggered when an option for the editor is changed. The 2nd arg to the listener\n *      is a string containing the editor option that is changing. The 3rd arg, which can be any\n *      data type, is the new value for the editor option.\n *    - beforeDestroy - Triggered before the object is about to dispose of all its internal state data\n *      so that listeners can cache things like scroll pos, etc...\n *\n * The Editor also dispatches \"change\" events internally, but you should listen for those on\n * Documents, not Editors.\n *\n * To listen for events, do something like this: (see EventDispatcher for details on this pattern)\n *     `editorInstance.on(\"eventname\", handler);`\n */\ndefine(function (require, exports, module) {\n\n\n    let CommandManager     = require(\"command/CommandManager\"),\n        Commands           = require(\"command/Commands\"),\n        CodeMirror         = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        LanguageManager    = require(\"language/LanguageManager\"),\n        EventDispatcher    = require(\"utils/EventDispatcher\"),\n        PerfUtils          = require(\"utils/PerfUtils\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        TextRange          = require(\"document/TextRange\").TextRange,\n        TokenUtils         = require(\"utils/TokenUtils\"),\n        HTMLUtils          = require(\"language/HTMLUtils\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        Metrics            = require(\"utils/Metrics\"),\n        _                  = require(\"thirdparty/lodash\");\n\n    /** Editor helpers */\n\n    let IndentHelper = require(\"./EditorHelper/IndentHelper\"),\n        EditorPreferences = require(\"./EditorHelper/EditorPreferences\"),\n        ChangeHelper = require(\"./EditorHelper/ChangeHelper\"),\n        ErrorPopupHelper = require(\"./EditorHelper/ErrorPopupHelper\"),\n        InlineWidgetHelper = require(\"./EditorHelper/InlineWidgetHelper\");\n\n    /** Editor preferences */\n\n    /**\n     * A list of gutter name and priorities currently registered for editors.\n     * The line number gutter is defined as { name: LINE_NUMBER_GUTTER, priority: 100 }\n     * @type {Array.<{name: string, priority: number, languageIds: Array}}\n     */\n    let registeredGutters = [];\n\n    let cmOptions         = {};\n\n    EditorPreferences.init(cmOptions);\n\n    const CLOSE_BRACKETS    = EditorPreferences.CLOSE_BRACKETS,\n        CLOSE_TAGS          = EditorPreferences.CLOSE_TAGS,\n        DRAG_DROP           = EditorPreferences.DRAG_DROP,\n        HIGHLIGHT_MATCHES   = EditorPreferences.HIGHLIGHT_MATCHES,\n        LINEWISE_COPY_CUT   = EditorPreferences.LINEWISE_COPY_CUT,\n        SCROLL_PAST_END     = EditorPreferences.SCROLL_PAST_END,\n        SHOW_CURSOR_SELECT  = EditorPreferences.SHOW_CURSOR_SELECT,\n        SHOW_LINE_NUMBERS   = EditorPreferences.SHOW_LINE_NUMBERS,\n        SMART_INDENT        = EditorPreferences.SMART_INDENT,\n        SPACE_UNITS         = EditorPreferences.SPACE_UNITS,\n        STYLE_ACTIVE_LINE   = EditorPreferences.STYLE_ACTIVE_LINE,\n        TAB_SIZE            = EditorPreferences.TAB_SIZE,\n        USE_TAB_CHAR        = EditorPreferences.USE_TAB_CHAR,\n        WORD_WRAP           = EditorPreferences.WORD_WRAP,\n        INDENT_LINE_COMMENT = EditorPreferences.INDENT_LINE_COMMENT,\n        INPUT_STYLE         = EditorPreferences.INPUT_STYLE;\n\n    const LINE_NUMBER_GUTTER = EditorPreferences.LINE_NUMBER_GUTTER,\n        LINE_NUMBER_GUTTER_PRIORITY     = EditorPreferences.LINE_NUMBER_GUTTER_PRIORITY,\n        CODE_FOLDING_GUTTER_PRIORITY    = EditorPreferences.CODE_FOLDING_GUTTER_PRIORITY;\n\n    let editorOptions = Object.keys(cmOptions);\n\n    /** Editor preferences */\n\n    /**\n     * Guard flag to prevent focus() reentrancy (via blur handlers), even across Editors\n     * @type {boolean}\n     */\n    var _duringFocus = false;\n\n    /**\n     * Constant: ignore upper boundary when centering text\n     * Constant: bulls-eye = strictly centre always\n     * @type {number}\n     */\n    var BOUNDARY_CHECK_NORMAL   = 0,\n        BOUNDARY_IGNORE_TOP     = 1,\n        BOUNDARY_BULLSEYE      = 2;\n\n    /**\n     * @private\n     * Create a copy of the given CodeMirror position\n     * @param {!CodeMirror.Pos} pos\n     * @return {CodeMirror.Pos}\n     */\n    function _copyPos(pos) {\n        return new CodeMirror.Pos(pos.line, pos.ch);\n    }\n\n    /**\n     * Helper functions to check options.\n     * @param {number} options BOUNDARY_CHECK_NORMAL or BOUNDARY_IGNORE_TOP\n     */\n    function _checkTopBoundary(options) {\n        return (options !== BOUNDARY_IGNORE_TOP);\n    }\n\n    function _checkBottomBoundary(options) {\n        return true;\n    }\n\n    /**\n     * Helper function to build preferences context based on the full path of\n     * the file.\n     *\n     * @param {string} fullPath Full path of the file\n     *\n     * @return {*} A context for the specified file name\n     */\n    function _buildPreferencesContext(fullPath) {\n        return PreferencesManager._buildContext(fullPath,\n            fullPath ? LanguageManager.getLanguageForPath(fullPath).getId() : undefined);\n    }\n\n    /**\n     * List of all current (non-destroy()ed) Editor instances. Needed when changing global preferences\n     * that affect all editors, e.g. tabbing or color scheme settings.\n     * @type {Array.<Editor>}\n     */\n    var _instances = [];\n\n    /**\n     * Creates a new CodeMirror editor instance bound to the given Document. The Document need not have\n     * a \"master\" Editor realized yet, even if makeMasterEditor is false; in that case, the first time\n     * an edit occurs we will automatically ask EditorManager to create a \"master\" editor to render the\n     * Document modifiable.\n     *\n     * ALWAYS call destroy() when you are done with an Editor - otherwise it will leak a Document ref.\n     *\n     * @constructor\n     *\n     * @param {!Document} document\n     * @param {!boolean} makeMasterEditor  If true, this Editor will set itself as the (secret) \"master\"\n     *          Editor for the Document. If false, this Editor will attach to the Document as a \"slave\"/\n     *          secondary editor.\n     * @param {!jQueryObject|DomNode} container  Container to add the editor to.\n     * @param {{startLine: number, endLine: number}=} range If specified, range of lines within the document\n     *          to display in this editor. Inclusive.\n     * @param {!Object} options If specified, contains editor options that can be passed to CodeMirror\n     */\n    function Editor(document, makeMasterEditor, container, range, options) {\n        var self = this;\n\n        var isReadOnly = (options && options.isReadOnly) || !document.editable;\n\n        _instances.push(this);\n\n        // Attach to document: add ref & handlers\n        this.document = document;\n        document.addRef();\n\n        if (container.jquery) {\n            // CodeMirror wants a DOM element, not a jQuery wrapper\n            container = container.get(0);\n        }\n\n        let $container = $(container);\n        $container.addClass(\"editor-holder\");\n\n        if (range) {    // attach this first: want range updated before we process a change\n            this._visibleRange = new TextRange(document, range.startLine, range.endLine);\n        }\n\n        // store this-bound version of listeners so we can remove them later\n        this._handleDocumentChange = this._handleDocumentChange.bind(this);\n        this._handleDocumentDeleted = this._handleDocumentDeleted.bind(this);\n        this._handleDocumentLanguageChanged = this._handleDocumentLanguageChanged.bind(this);\n        this._doWorkingSetSync = this._doWorkingSetSync.bind(this);\n        document.on(\"change\", this._handleDocumentChange);\n        document.on(\"deleted\", this._handleDocumentDeleted);\n        document.on(\"languageChanged\", this._handleDocumentLanguageChanged);\n        // To sync working sets if the view is for same doc across panes\n        document.on(\"_dirtyFlagChange\", this._doWorkingSetSync);\n\n        var mode = this._getModeFromDocument();\n\n        // (if makeMasterEditor, we attach the Doc back to ourselves below once we're fully initialized)\n\n        this._inlineWidgets = [];\n        this._inlineWidgetQueues = {};\n        this._hideMarks = [];\n        this._lastEditorWidth = null;\n\n        this._markTypesMap = {};\n\n        this._$messagePopover = null;\n\n        // To track which pane the editor is being attached to if it's a full editor\n        this._paneId = null;\n\n        // To track the parent editor ( host editor at that time of creation) of an inline editor\n        this._hostEditor = null;\n\n        // Editor supplies some standard keyboard behavior extensions of its own\n        var codeMirrorKeyMap = {\n            \"Tab\": function () { self._handleTabKey(); },\n            \"Shift-Tab\": \"indentLess\",\n\n            \"Left\": function (instance) {\n                self._handleSoftTabNavigation(-1, \"moveH\");\n            },\n            \"Right\": function (instance) {\n                self._handleSoftTabNavigation(1, \"moveH\");\n            },\n            \"Backspace\": function (instance) {\n                self._handleSoftTabNavigation(-1, \"deleteH\");\n            },\n            \"Delete\": function (instance) {\n                self._handleSoftTabNavigation(1, \"deleteH\");\n            },\n            \"Esc\": function (_instance) {\n                if(!self.canConsumeEscapeKeyEvent()){\n                    return;\n                }\n                if (self.getSelections().length > 1) { // multi cursor\n                    self.clearSelection();\n                } else if(self.hasSelection()){\n                    self.clearSelection();\n                }else {\n                    self.removeAllInlineWidgets();\n                }\n            },\n            \"Home\": \"goLineLeftSmart\",\n            \"Cmd-Left\": \"goLineLeftSmart\",\n            \"End\": \"goLineRight\",\n            \"Cmd-Right\": \"goLineRight\"\n        };\n\n        var currentOptions = this._currentOptions = _.zipObject(\n            editorOptions,\n            _.map(editorOptions, function (prefName) {\n                return self._getOption(prefName);\n            })\n        );\n\n        //cm: CodeMirror, repeat: \"single\" | \"double\" | \"triple\", event: Event\n        // The function is called when the left mouse button is pressed in codemirror\n        function _mouseHandlerOverride(_cm, _repeat, event) {\n            if(event.ctrlKey || event.metaKey){\n                setTimeout(()=>{\n                    CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION);\n                    Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"ctrlClick\", _cm.getMode().name);\n                }, 100);\n            }\n            return {\n                addNew: event.altKey // alt key will init multi cursor instead of ctrl-key\n            };\n        }\n\n        // When panes are created *after* the showLineNumbers option has been turned off\n        //  we need to apply the show-line-padding class or the text will be juxtaposed\n        //  to the edge of the editor which makes it not easy to read.  The code below to handle\n        //  that the option change only applies the class to panes that have already been created\n        // This line ensures that the class is applied to any editor created after the fact\n        $container.toggleClass(\"show-line-padding\", Boolean(!this._getOption(\"showLineNumbers\")));\n\n        // Create the CodeMirror instance\n        // (note: CodeMirror doesn't actually require using 'new', but jslint complains without it)\n        this._codeMirror = new CodeMirror(container, {\n            autoCloseBrackets: currentOptions[CLOSE_BRACKETS],\n            autoCloseTags: currentOptions[CLOSE_TAGS],\n            coverGutterNextToScrollbar: true,\n            continueComments: true,\n            cursorScrollMargin: 3,\n            dragDrop: currentOptions[DRAG_DROP],\n            electricChars: true,\n            configureMouse: _mouseHandlerOverride,\n            extraKeys: codeMirrorKeyMap,\n            highlightSelectionMatches: currentOptions[HIGHLIGHT_MATCHES],\n            indentUnit: currentOptions[USE_TAB_CHAR] ? currentOptions[TAB_SIZE] : currentOptions[SPACE_UNITS],\n            indentWithTabs: currentOptions[USE_TAB_CHAR],\n            inputStyle: currentOptions[INPUT_STYLE],\n            lineNumbers: currentOptions[SHOW_LINE_NUMBERS],\n            lineWiseCopyCut: currentOptions[LINEWISE_COPY_CUT],\n            lineWrapping: currentOptions[WORD_WRAP],\n            matchBrackets: { maxScanLineLength: 50000, maxScanLines: 1000 },\n            matchTags: { bothTags: true },\n            scrollPastEnd: !range && currentOptions[SCROLL_PAST_END],\n            showCursorWhenSelecting: currentOptions[SHOW_CURSOR_SELECT],\n            smartIndent: currentOptions[SMART_INDENT],\n            styleActiveLine: currentOptions[STYLE_ACTIVE_LINE],\n            tabSize: currentOptions[TAB_SIZE],\n            readOnly: isReadOnly\n        });\n\n        // Can't get CodeMirror's focused state without searching for\n        // CodeMirror-focused. Instead, track focus via onFocus and onBlur\n        // options and track state with this._focused\n        this._focused = false;\n\n        this._installEditorListeners();\n\n        this._renderGutters();\n\n        this.on(\"cursorActivity\", function (event, editor) {\n            self._handleCursorActivity(event);\n        });\n        this.on(\"keypress\", function (event, editor, domEvent) {\n            self._handleKeypressEvents(domEvent);\n        });\n        this.on(\"change\", function (event, editor, changeList) {\n            self._handleEditorChange(changeList);\n        });\n        this.on(\"focus\", function (event, editor) {\n            if (self._hostEditor) {\n                // Mark the host editor as the master editor for the hosting document\n                self._hostEditor.document._toggleMasterEditor(self._hostEditor);\n            } else {\n                // Set this full editor as master editor for the document\n                self.document._toggleMasterEditor(self);\n            }\n        });\n\n        // Set code-coloring mode BEFORE populating with text, to avoid a flash of uncolored text\n        this._codeMirror.setOption(\"mode\", mode);\n\n        // Initially populate with text. This will send a spurious change event, so need to make\n        // sure this is understood as a 'sync from document' case, not a genuine edit\n        this._duringSync = true;\n        this._resetText(document.getText());\n        this._duringSync = false;\n\n        if (range) {\n            this._updateHiddenLines();\n            this.setCursorPos(range.startLine, 0);\n        }\n\n        // Now that we're fully initialized, we can point the document back at us if needed\n        if (makeMasterEditor) {\n            document._makeEditable(this);\n        }\n\n        // Add scrollTop property to this object for the scroll shadow code to use\n        Object.defineProperty(this, \"scrollTop\", {\n            get: function () {\n                return this._codeMirror.getScrollInfo().top;\n            }\n        });\n\n        // Add an $el getter for Pane Views\n        Object.defineProperty(this,  \"$el\", {\n            get: function () {\n                return $(this.getRootElement());\n            }\n        });\n    }\n\n    EventDispatcher.makeEventDispatcher(Editor.prototype);\n    EventDispatcher.markDeprecated(Editor.prototype, \"keyEvent\", \"'keydown/press/up'\");\n\n    IndentHelper.addHelpers(Editor);\n    ChangeHelper.addHelpers(Editor);\n    InlineWidgetHelper.addHelpers(Editor);\n\n    Editor.prototype.markPaneId = function (paneId) {\n        this._paneId = paneId;\n\n        // Also add this to the pool of full editors\n        this.document._associateEditor(this);\n\n        // In case this Editor is initialized not as the first full editor for the document\n        // and the document is already dirty and present in another working set, make sure\n        // to add this documents to the new panes working set.\n        this._doWorkingSetSync(null, this.document);\n    };\n\n    /**\n     * Gets the inline widgets below the current cursor position or null.\n     * @return {boolean}\n     */\n    Editor.prototype.getInlineWidgetsBelowCursor = function () {\n        let self = this;\n        let cursor = self.getCursorPos();\n        let line = cursor.line;\n        return  self.getAllInlineWidgetsForLine(line);\n    };\n\n    /**\n     * returns true if the editor can do something an escape key event. Eg. Disable multi cursor escape\n     */\n    Editor.prototype.canConsumeEscapeKeyEvent = function () {\n        let self = this;\n        return (self.getSelections().length > 1) // multi cursor should go away on escape\n            || (self.hasSelection()) // selection should go away on escape\n            || self.getInlineWidgetsBelowCursor() // inline widget is below cursor\n            || self.getFocusedInlineWidget(); // inline widget\n    };\n\n    Editor.prototype._doWorkingSetSync = function (event, doc) {\n        if (doc === this.document && this._paneId && this.document.isDirty) {\n            MainViewManager.addToWorkingSet(this._paneId, this.document.file, -1, false);\n        }\n    };\n\n    /**\n     * Removes this editor from the DOM and detaches from the Document. If this is the \"master\"\n     * Editor that is secretly providing the Document's backing state, then the Document reverts to\n     * a read-only string-backed mode.\n     */\n    Editor.prototype.destroy = function () {\n        this.trigger(\"beforeDestroy\", this);\n\n        // CodeMirror docs for getWrapperElement() say all you have to do is \"Remove this from your\n        // tree to delete an editor instance.\"\n        $(this.getRootElement()).remove();\n\n        _instances.splice(_instances.indexOf(this), 1);\n\n        // Disconnect from Document\n        this.document.releaseRef();\n        this.document.off(\"change\", this._handleDocumentChange);\n        this.document.off(\"deleted\", this._handleDocumentDeleted);\n        this.document.off(\"languageChanged\", this._handleDocumentLanguageChanged);\n        this.document.off(\"_dirtyFlagChange\", this._doWorkingSetSync);\n\n        if (this._visibleRange) {   // TextRange also refs the Document\n            this._visibleRange.dispose();\n        }\n\n        // If we're the Document's master editor, disconnecting from it has special meaning\n        if (this.document._masterEditor === this) {\n            this.document._makeNonEditable();\n        } else {\n            this.document._disassociateEditor(this);\n        }\n\n        // Destroying us destroys any inline widgets we're hosting. Make sure their closeCallbacks\n        // run, at least, since they may also need to release Document refs\n        var self = this;\n        this._inlineWidgets.forEach(function (inlineWidget) {\n            self._removeInlineWidgetInternal(inlineWidget);\n        });\n    };\n\n    /**\n     * @private\n     * Handle any cursor movement in editor, including selecting and unselecting text.\n     * @param {!Event} event\n     */\n    Editor.prototype._handleCursorActivity = function (event) {\n        this._updateStyleActiveLine();\n    };\n\n    /**\n     * @private\n     * Removes any whitespace after one of ]{}) to prevent trailing whitespace when auto-indenting\n     */\n    Editor.prototype._handleWhitespaceForElectricChars = function () {\n        var self        = this,\n            instance    = this._codeMirror,\n            selections,\n            lineStr;\n\n        selections = this.getSelections().map(function (sel) {\n            lineStr = instance.getLine(sel.end.line);\n\n            if (lineStr && !/\\S/.test(lineStr)) {\n                // if the line is all whitespace, move the cursor to the end of the line\n                // before indenting so that embedded whitespace such as indents are not\n                // orphaned to the right of the electric char being inserted\n                sel.end.ch = self.document.getLine(sel.end.line).length;\n            }\n            return sel;\n        });\n        this.setSelections(selections);\n    };\n\n    /**\n     * @private\n     * Handle CodeMirror key events.\n     * @param {!Event} event\n     */\n    Editor.prototype._handleKeypressEvents = function (event) {\n        var keyStr = String.fromCharCode(event.which || event.keyCode);\n\n        if (/[\\]\\{\\}\\)]/.test(keyStr)) {\n            this._handleWhitespaceForElectricChars();\n        }\n    };\n\n    /**\n     * Determine the mode to use from the document's language\n     * Uses \"text/plain\" if the language does not define a mode\n     * @return {string} The mode to use\n     */\n    Editor.prototype._getModeFromDocument = function () {\n        // We'd like undefined/null/\"\" to mean plain text mode. CodeMirror defaults to plaintext for any\n        // unrecognized mode, but it complains on the console in that fallback case: so, convert\n        // here so we're always explicit, avoiding console noise.\n        return this.document.getLanguage().getMode() || \"text/plain\";\n    };\n\n\n    /**\n     * Selects all text and maintains the current scroll position.\n     */\n    Editor.prototype.selectAllNoScroll = function () {\n        var cm = this._codeMirror,\n            info = this._codeMirror.getScrollInfo();\n\n        // Note that we do not have to check for the visible range here. This\n        // concern is handled internally by code mirror.\n        cm.operation(function () {\n            cm.scrollTo(info.left, info.top);\n            cm.execCommand(\"selectAll\");\n        });\n    };\n\n    /**\n     * @return {boolean} True if editor is not showing the entire text of the document (i.e. an inline editor)\n     */\n    Editor.prototype.isTextSubset = function () {\n        return Boolean(this._visibleRange);\n    };\n\n    /**\n     * Ensures that the lines that are actually hidden in the inline editor correspond to\n     * the desired visible range.\n     */\n    Editor.prototype._updateHiddenLines = function () {\n        if (this._visibleRange) {\n            var cm = this._codeMirror,\n                self = this;\n            cm.operation(function () {\n                self._hideMarks.forEach(function (mark) {\n                    if (mark) {\n                        mark.clear();\n                    }\n                });\n                self._hideMarks = [];\n                self._hideMarks.push(self._hideLines(0, self._visibleRange.startLine));\n                self._hideMarks.push(self._hideLines(self._visibleRange.endLine + 1, self.lineCount()));\n            });\n        }\n    };\n\n    /**\n     * Sets the contents of the editor, clears the undo/redo history and marks the document clean. Dispatches a change event.\n     * Semi-private: only Document should call this.\n     * @param {!string} text\n     */\n    Editor.prototype._resetText = function (text) {\n        var currentText = this._codeMirror.getValue();\n\n        // compare with ignoring line-endings, issue #11826\n        var textLF = text ? text.replace(/(\\r\\n|\\r|\\n)/g, \"\\n\") : null;\n        var currentTextLF = currentText ? currentText.replace(/(\\r\\n|\\r|\\n)/g, \"\\n\") : null;\n        if (textLF === currentTextLF) {\n            // there's nothing to reset\n            return;\n        }\n\n        var perfTimerName = PerfUtils.markStart(\"Editor._resetText()\\t\" + (!this.document || this.document.file.fullPath));\n\n        var cursorPos = this.getCursorPos(),\n            scrollPos = this.getScrollPos();\n\n        // This *will* fire a change event, but we clear the undo immediately afterward\n        this._codeMirror.setValue(text);\n        this._codeMirror.refresh();\n\n        // Make sure we can't undo back to the empty state before setValue(), and mark\n        // the document clean.\n        this._codeMirror.clearHistory();\n        this._codeMirror.markClean();\n\n        // restore cursor and scroll positions\n        this.setCursorPos(cursorPos);\n        this.setScrollPos(scrollPos.x, scrollPos.y);\n\n        PerfUtils.addMeasurement(perfTimerName);\n    };\n\n   /**\n    * Gets the file associated with this editor\n    * This is a required Pane-View interface method\n    * @return {!File} the file associated with this editor\n    */\n    Editor.prototype.getFile = function () {\n        return this.document.file;\n    };\n\n    /**\n     * Gets the current cursor position within the editor.\n     *\n     * Cursor positions can be converted to index(0 based character offsets in editor text string)\n     * using `editor.indexFromPos` API.\n     * @param {boolean} [expandTabs]  If true, return the actual visual column number instead of the character offset in\n     *      the \"ch\" property.\n     * @param {string} [which] Optional string indicating which end of the\n     *  selection to return. It may be \"start\", \"end\", \"head\" (the side of the\n     *  selection that moves when you press shift+arrow), or \"anchor\" (the\n     *  fixed side of the selection). Omitting the argument is the same as\n     *  passing \"head\". A {line, ch} object will be returned.)\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.getCursorPos = function (expandTabs, which) {\n        // Translate \"start\" and \"end\" to the official CM names (it actually\n        // supports them as-is, but that isn't documented and we don't want to\n        // rely on it).\n        if (which === \"start\") {\n            which = \"from\";\n        } else if (which === \"end\") {\n            which = \"to\";\n        }\n        var cursor = _copyPos(this._codeMirror.getCursor(which));\n\n        if (expandTabs) {\n            cursor.ch = this.getColOffset(cursor);\n        }\n        return cursor;\n    };\n\n    /**\n     * Gets the cursor position of the last charected in the editor.\n     * @param {boolean} [expandTabs]  If true, return the actual visual column number instead of the character offset in\n     *      the \"ch\" property.\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.getEndingCursorPos = function (expandTabs) {\n        let lastLine = this._codeMirror.lastLine();\n        let cursor = {\n            line: lastLine,\n            ch: this._codeMirror.getLine(lastLine).length\n        };\n\n        if (expandTabs) {\n            cursor.ch = this.getColOffset(cursor);\n        }\n        return cursor;\n    };\n\n    /**\n     * Returns the display column (zero-based) for a given string-based pos. Differs from pos.ch only\n     * when the line contains preceding \\t chars. Result depends on the current tab size setting.\n     * @param {!{line:number, ch:number}} pos\n     * @return {number}\n     */\n    Editor.prototype.getColOffset = function (pos) {\n        var line    = this._codeMirror.getRange({line: pos.line, ch: 0}, pos),\n            tabSize = null,\n            column  = 0,\n            i;\n\n        for (i = 0; i < line.length; i++) {\n            if (line[i] === '\\t') {\n                if (tabSize === null) {\n                    tabSize = Editor.getTabSize();\n                }\n                if (tabSize > 0) {\n                    column += (tabSize - (column % tabSize));\n                }\n            } else {\n                column++;\n            }\n        }\n        return column;\n    };\n\n    /**\n     * Returns the string-based pos for a given display column (zero-based) in given line. Differs from column\n     * only when the line contains preceding \\t chars. Result depends on the current tab size setting.\n     * @param {number} lineNum Line number\n     * @param {number} column Display column number\n     * @return {number}\n     */\n    Editor.prototype.getCharIndexForColumn = function (lineNum, column) {\n        var line    = this._codeMirror.getLine(lineNum),\n            tabSize = null,\n            iCol    = 0,\n            i;\n\n        for (i = 0; iCol < column; i++) {\n            if (line[i] === '\\t') {\n                if (tabSize === null) {\n                    tabSize = Editor.getTabSize();\n                }\n                if (tabSize > 0) {\n                    iCol += (tabSize - (iCol % tabSize));\n                }\n            } else {\n                iCol++;\n            }\n        }\n        return i;\n    };\n\n    /**\n     * Sets the cursor position within the editor. Removes any selection.\n     * @param {number} line  The 0 based line number.\n     * @param {number} ch  The 0 based character position; treated as 0 if unspecified.\n     * @param {boolean=} center  True if the view should be centered on the new cursor position.\n     * @param {boolean=} expandTabs  If true, use the actual visual column number instead of the character offset as\n     *      the \"ch\" parameter.\n     */\n    Editor.prototype.setCursorPos = function (line, ch, center, expandTabs) {\n        if (expandTabs) {\n            ch = this.getColOffset({line: line, ch: ch});\n        }\n        this._codeMirror.setCursor(line, ch);\n        if (center) {\n            this.centerOnCursor();\n        }\n    };\n\n    /**\n     * Set the editor size in pixels or percentage\n     * @param {(number|string)} width\n     * @param {(number|string)} height\n     */\n    Editor.prototype.setSize = function (width, height) {\n        this._codeMirror.setSize(width, height);\n    };\n\n\n    /**\n     * Returns a {from, to} object indicating the start (inclusive) and end (exclusive) of the currently rendered\n     * part of the document. In big documents, when most content is scrolled out of view, Editor will only render\n     * the visible part, and a margin around it. See also the `viewportChange` event fired on the editor.\n     *\n     * This is combination with `viewportChange` event can be used to selectively redraw visual elements in code\n     * like syntax analyze only parts of code instead of the full code everytime.\n     * @return {{from: number, to: number}}\n     */\n    Editor.prototype.getViewport = function () {\n        return this._codeMirror.getViewport();\n    };\n\n    /** @const */\n    var CENTERING_MARGIN = 0.15;\n\n    /**\n     * Scrolls the editor viewport to vertically center the line with the cursor,\n     * but only if the cursor is currently near the edges of the viewport or\n     * entirely outside the viewport.\n     *\n     * This does not alter the horizontal scroll position.\n     *\n     * @param {number} centerOptions Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     */\n    Editor.prototype.centerOnCursor = function (centerOptions) {\n        let $scrollerElement = $(this.getScrollerElement());\n        let editorHeight = $scrollerElement.height();\n\n        // we need to make adjustments for the statusbar's padding on the bottom and the menu bar on top.\n        let statusBarHeight = $(\"#status-bar\").height();\n\n        let documentCursorPosition = this._codeMirror.cursorCoords(null, \"local\").bottom;\n        let screenCursorPosition = this._codeMirror.cursorCoords(null, \"page\").bottom;\n\n        if(centerOptions === BOUNDARY_BULLSEYE){\n            let pos = documentCursorPosition - editorHeight / 2 + statusBarHeight;\n            this.setScrollPos(null, pos);\n            return;\n        }\n        // If the cursor is already reasonably centered, we won't\n        // make any change. \"Reasonably centered\" is defined as\n        // not being within CENTERING_MARGIN of the top or bottom\n        // of the editor (where CENTERING_MARGIN is a percentage\n        // of the editor height).\n        // For finding the first item (i.e. find while typing), do\n        // not center if hit is in first half of screen because this\n        // appears to be an unnecesary scroll.\n        if ((_checkTopBoundary(centerOptions) && (screenCursorPosition < editorHeight * CENTERING_MARGIN)) ||\n                (_checkBottomBoundary(centerOptions) && (screenCursorPosition > editorHeight * (1 - CENTERING_MARGIN)))) {\n\n            var pos = documentCursorPosition - editorHeight / 2 + statusBarHeight;\n            var info = this._codeMirror.getScrollInfo();\n            pos = Math.min(Math.max(pos, 0), (info.height - info.clientHeight));\n            this.setScrollPos(null, pos);\n        }\n    };\n\n    /**\n     * Given a position, returns its index within the text (assuming \\n newlines)\n     * @param {{line:number, ch:number}} cursorPos\n     * @return {number}\n     */\n    Editor.prototype.indexFromPos = function (cursorPos) {\n        return this._codeMirror.indexFromPos(cursorPos);\n    };\n\n    /**\n     * Given a position, returns its index within the text (assuming \\n newlines)\n     * @param {number} index\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.posFromIndex = function (index) {\n        return this._codeMirror.posFromIndex(index);\n    };\n\n    /**\n     * Returns true if pos is between start and end (INclusive at start; EXclusive at end by default,\n     * but overridable via the endInclusive flag).\n     * @param {{line:number, ch:number}} pos\n     * @param {{line:number, ch:number}} start\n     * @param {{line:number, ch:number}} end\n     * @param {boolean} endInclusive\n     *\n     */\n    Editor.prototype.posWithinRange = function (pos, start, end, endInclusive) {\n        if (start.line <= pos.line && end.line >= pos.line) {\n            if (endInclusive) {\n                return (start.line < pos.line || start.ch <= pos.ch) &&  // inclusive\n                    (end.line > pos.line   || end.ch >= pos.ch);      // inclusive\n            }\n            return (start.line < pos.line || start.ch <= pos.ch) &&  // inclusive\n                    (end.line > pos.line   || end.ch > pos.ch);       // exclusive\n\n\n        }\n        return false;\n    };\n\n    /**\n     * @return {boolean} True if there's a text selection; false if there's just an insertion point\n     */\n    Editor.prototype.hasSelection = function () {\n        return this._codeMirror.somethingSelected();\n    };\n\n    /**\n     * @private\n     * Takes an anchor/head pair and returns a start/end pair where the start is guaranteed to be <= end, and a \"reversed\" flag indicating\n     * if the head is before the anchor.\n     * @param {!{line: number, ch: number}} anchorPos\n     * @param {!{line: number, ch: number}} headPos\n     * @return {!{start:{line:number, ch:number}, end:{line:number, ch:number}}, reversed:boolean} the normalized range with start <= end\n     */\n    function _normalizeRange(anchorPos, headPos) {\n        if (headPos.line < anchorPos.line || (headPos.line === anchorPos.line && headPos.ch < anchorPos.ch)) {\n            return {start: _copyPos(headPos), end: _copyPos(anchorPos), reversed: true};\n        }\n        return {start: _copyPos(anchorPos), end: _copyPos(headPos), reversed: false};\n\n    }\n\n    /**\n     * Gets the current selection; if there is more than one selection, returns the primary selection\n     * (generally the last one made). Start is inclusive, end is exclusive. If there is no selection,\n     * returns the current cursor position as both the start and end of the range (i.e. a selection\n     * of length zero). If `reversed` is set, then the head of the selection (the end of the selection\n     * that would be changed if the user extended the selection) is before the anchor.\n     * @return {{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean}}\n     */\n    Editor.prototype.getSelection = function () {\n        return _normalizeRange(this.getCursorPos(false, \"anchor\"), this.getCursorPos(false, \"head\"));\n    };\n\n    /**\n     * Returns an array of current selections, nonoverlapping and sorted in document order.\n     * Each selection is a start/end pair, with the start guaranteed to come before the end.\n     * Cursors are represented as a range whose start is equal to the end.\n     * If `reversed` is set, then the head of the selection\n     * (the end of the selection that would be changed if the user extended the selection)\n     * is before the anchor.\n     * If `primary` is set, then that selection is the primary selection.\n     * @return {Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>}\n     */\n    Editor.prototype.getSelections = function () {\n        var primarySel = this.getSelection();\n        return _.map(this._codeMirror.listSelections(), function (sel) {\n            var result = _normalizeRange(sel.anchor, sel.head);\n            if (result.start.line === primarySel.start.line && result.start.ch === primarySel.start.ch &&\n                    result.end.line === primarySel.end.line && result.end.ch === primarySel.end.ch) {\n                result.primary = true;\n            } else {\n                result.primary = false;\n            }\n            return result;\n        });\n    };\n\n    /**\n     * Takes the given selections, and expands each selection so it encompasses whole lines. Merges\n     * adjacent line selections together. Keeps track of each original selection associated with a given\n     * line selection (there might be multiple if individual selections were merged into a single line selection).\n     * Useful for doing multiple-selection-aware line edits.\n     *\n     * @param {Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>} selections\n     *      The selections to expand.\n     * @param {{expandEndAtStartOfLine: boolean, mergeAdjacent: boolean}} options\n     *      expandEndAtStartOfLine: true if a range selection that ends at the beginning of a line should be expanded\n     *          to encompass the line. Default false.\n     *      mergeAdjacent: true if adjacent line ranges should be merged. Default true.\n     * @return {Array.<{selectionForEdit: {start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean},\n     *                  selectionsToTrack: Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>}>}\n     *      The combined line selections. For each selection, `selectionForEdit` is the line selection, and `selectionsToTrack` is\n     *      the set of original selections that combined to make up the given line selection. Note that the selectionsToTrack will\n     *      include the original objects passed in `selections`, so if it is later mutated the original passed-in selections will be\n     *      mutated as well.\n     */\n    Editor.prototype.convertToLineSelections = function (selections, options) {\n        var self = this;\n        options = options || {};\n        _.defaults(options, { expandEndAtStartOfLine: false, mergeAdjacent: true });\n\n        // Combine adjacent lines with selections so they don't collide with each other, as they would\n        // if we did them individually.\n        var combinedSelections = [], prevSel;\n        _.each(selections, function (sel) {\n            var newSel = _.cloneDeep(sel);\n\n            // Adjust selection to encompass whole lines.\n            newSel.start.ch = 0;\n            // The end of the selection becomes the start of the next line, if it isn't already\n            // or if expandEndAtStartOfLine is set.\n            var hasSelection = (newSel.start.line !== newSel.end.line) || (newSel.start.ch !== newSel.end.ch);\n            if (options.expandEndAtStartOfLine || !hasSelection || newSel.end.ch !== 0) {\n                newSel.end = {line: newSel.end.line + 1, ch: 0};\n            }\n\n            // If the start of the new selection is within the range of the previous (expanded) selection, merge\n            // the two selections together, but keep track of all the original selections that were related to this\n            // selection, so they can be properly adjusted. (We only have to check for the start being inside the previous\n            // range - it can't be before it because the selections started out sorted.)\n            if (prevSel && self.posWithinRange(newSel.start, prevSel.selectionForEdit.start, prevSel.selectionForEdit.end, options.mergeAdjacent)) {\n                prevSel.selectionForEdit.end.line = newSel.end.line;\n                prevSel.selectionsToTrack.push(sel);\n            } else {\n                prevSel = {selectionForEdit: newSel, selectionsToTrack: [sel]};\n                combinedSelections.push(prevSel);\n            }\n        });\n        return combinedSelections;\n    };\n\n    /**\n     * Returns the currently selected text, or \"\" if no selection. Includes \\n if the\n     * selection spans multiple lines (does NOT reflect the Document's line-endings style). By\n     * default, returns only the contents of the primary selection, unless `allSelections` is true.\n     * @param {boolean=} allSelections Whether to return the contents of all selections (separated\n     *     by newlines) instead of just the primary selection. Default false.\n     * @return {!string} The selected text.\n     */\n    Editor.prototype.getSelectedText = function (allSelections) {\n        if (allSelections) {\n            return this._codeMirror.getSelection();\n        }\n        var sel = this.getSelection();\n        return this.document.getRange(sel.start, sel.end);\n\n    };\n\n    /**\n     * Given an {left, top} object (e.g. coordinates of a mouse event) returns the {line, ch} position that\n     * corresponds to it. The optional mode parameter determines relative to what the coordinates are interpreted.\n     *\n     * @param {{left: number, top:number}} coordinates can be obtained from Eg. coordinates of a mouse event\n     * @param {string} [mode] It may be \"window\", \"page\" (the default), or \"local\".\n     * @return {{line:number, ch: number}} for the given coordinates\n     */\n    Editor.prototype.coordsChar = function (coordinates, mode) {\n        return this._codeMirror.coordsChar(coordinates, mode);\n    };\n\n    /**\n     * Returns the position and dimensions of an arbitrary character given a cursor (Eg. from getCursorPos()).\n     * It'll give the size of the whole character, rather than just the position that the cursor would have\n     * when it would sit at that position.\n     *\n     * @param {{line:number, ch: number}} pos A cursor, can be obtained from Eg. getCursorPos()\n     * @param {string} [mode] It may be \"window\", \"page\" (the default), or \"local\".\n     * @return {{left:number, right:number, top:number, bottom:number}} coordinates for the given character position\n     */\n    Editor.prototype.charCoords = function (pos, mode) {\n        return this._codeMirror.charCoords(pos, mode);\n    };\n\n\n    /**\n     * Get the token at the given cursor position, or at the current cursor\n     * if none is given.\n     *\n     * @param {?{line: number, ch: number}} [cursor] - Optional cursor position\n     *      at which to retrieve a token. If not provided, the current position will be used.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number, string: string, type: string|null}} -\n     * the CodeMirror token at the given cursor position\n     */\n    Editor.prototype.getToken = function (cursor, precise) {\n        let cm = this._codeMirror;\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n\n        let token = TokenUtils.getTokenAt(cm, cursor, precise);\n        token.line = cursor.line;\n        return token;\n    };\n\n    /**\n     * Get the token after the one at the given cursor position\n     *\n     * @param {{line: number, ch: number}} [cursor] - Optional cursor position after\n     *      which a token should be retrieved\n     * @param {boolean} [skipWhitespace] - true if this should skip over whitespace tokens. Default is true.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number,string: string, type: string}} -\n     * the CodeMirror token after the one at the given cursor position\n     */\n    Editor.prototype.getNextToken = function (cursor, skipWhitespace = true, precise) {\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n        let token   = this.getToken(cursor, precise),\n            next    = token,\n            doc     = this.document;\n        next.line = cursor.line;\n\n        do {\n            if (next.end < doc.getLine(cursor.line).length) {\n                cursor.ch = next.end + 1;\n            } else if (doc.getLine(cursor.line + 1)) {\n                cursor.ch = 0;\n                cursor.line++;\n            } else {\n                next = null;\n                break;\n            }\n            next = this.getToken(cursor, precise);\n            next.line = cursor.line;\n        } while (skipWhitespace && !/\\S/.test(next.string));\n\n        return next;\n    };\n\n    /**\n     * Get the token before the one at the given cursor position\n     *\n     * @param {{line: number, ch: number}} [cursor] - Optional cursor position before\n     *      which a token should be retrieved\n     * @param {boolean} [skipWhitespace] - true if this should skip over whitespace tokens. Default is true.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number,string: string, type: string}} - the CodeMirror token before\n     * the one at the given cursor position\n     */\n    Editor.prototype.getPreviousToken = function (cursor, skipWhitespace = true, precise) {\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n        let token   = this.getToken(cursor, precise),\n            prev    = token,\n            doc     = this.document;\n        prev.line = cursor.line;\n\n        do {\n            if (prev.start < cursor.ch) {\n                cursor.ch = prev.start;\n            } else if (cursor.line > 0) {\n                cursor.ch = doc.getLine(cursor.line - 1).length;\n                cursor.line--;\n            } else {\n                break;\n            }\n            prev = this.getToken(cursor, precise);\n            prev.line = cursor.line;\n        } while (skipWhitespace && !/\\S/.test(prev.string));\n\n        return prev;\n    };\n\n    /**\n     * Use This if you are making large number of editor changes in a single workflow to improve performance.\n     * The editor internally buffers changes and only updates its DOM structure after it has finished performing\n     * some operation. If you need to perform a lot of operations on a CodeMirror instance, you can call this method\n     * with a function argument. It will call the function, buffering up all changes, and only doing the expensive\n     * update after the function returns. This can be a lot faster. The return value from this method will be the\n     * return value of your function.\n     * @param execFn The function that will be called to make all editor changes.\n     * @return {*}\n     */\n    Editor.prototype.operation = function (execFn) {\n        return this._codeMirror.operation(execFn);\n    };\n\n    function getMarkOptionUnderlineError() {\n        return {\n            className: \"editor-text-fragment-error\"\n        };\n    }\n\n    function getMarkOptionUnderlineWarn() {\n        return {\n            className: \"editor-text-fragment-warn\"\n        };\n    }\n\n    function getMarkOptionUnderlineInfo() {\n        return {\n            className: \"editor-text-fragment-info\"\n        };\n    }\n\n    function getMarkOptionUnderlineSpellcheck() {\n        return {\n            className: \"editor-text-fragment-spell-error\"\n        };\n    }\n\n    function getMarkOptionHyperlinkText() {\n        return {\n            className: \"editor-text-fragment-hover\"\n        };\n    }\n\n    function getMarkOptionMatchingRefs() {\n        return {\n            className: \"editor-text-fragment-matching-refs\"\n        };\n    }\n\n    function getMarkOptionRenameOutline() {\n        return {\n            className: \"editor-text-rename-outline\",\n            startStyle: \"editor-text-rename-outline-left\",\n            endStyle: \"editor-text-rename-outline-right\",\n            clearWhenEmpty: false,\n            inclusiveLeft: true,\n            inclusiveRight: true\n        };\n    }\n\n    /**\n     * Mark options to use with API with Editor.markText or Editor.markToken.\n     */\n    Editor.getMarkOptionUnderlineError = getMarkOptionUnderlineError;\n    Editor.getMarkOptionUnderlineWarn = getMarkOptionUnderlineWarn;\n    Editor.getMarkOptionUnderlineInfo = getMarkOptionUnderlineInfo;\n    Editor.getMarkOptionUnderlineSpellcheck = getMarkOptionUnderlineSpellcheck;\n    Editor.getMarkOptionHyperlinkText = getMarkOptionHyperlinkText;\n    Editor.getMarkOptionMatchingRefs = getMarkOptionMatchingRefs;\n    Editor.getMarkOptionRenameOutline = getMarkOptionRenameOutline;\n\n    /**\n     * Can be used to mark a range of text with a specific CSS class name. cursorFrom and cursorTo should be {line, ch}\n     * objects. The options parameter is optional.\n     *\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} cursorFrom - Mark start position\n     * @param {{line: number, ch: number}} cursorTo - Mark end position\n     * @param {Object} [options] - When given, it should be  one of the predefined `Editor.MARK_OPTION_UNDERLINE*` or\n     * it should be an object that may contain the following configuration options:\n     *\n     * @param {string} [options.metadata] - If you want to store any metadata object with the mark, use this.\n     * @param {string} [options.className] -Assigns a CSS class to the marked stretch of text.\n     * @param {string} [options.css] -A string of CSS to be applied to the covered text. For example \"color: #fe3\".\n     * @param {string} [options.startStyle] -Can be used to specify an extra CSS class to be applied to the leftmost\n     * span that is part of the marker.\n     * @param {string} [options.endStyle] -Equivalent to startStyle, but for the rightmost span.\n     * @param {object} [options.attributes] -When given, add the attributes in the given object to the elements created\n     * for the marked text. Adding class or style attributes this way is not supported.\n     * @param {boolean} [options.inclusiveLeft] - Determines whether text inserted on the left of the marker will end\n     * up inside or outside of it.\n     * @param {boolean} [options.inclusiveRight] - Like inclusiveLeft, but for the right side.\n     * @param {boolean} [options.atomic] -Atomic ranges act as a single unit when cursor movement is concerned—i.e.\n     * it is impossible to place the cursor inside of them. You can control whether the cursor is allowed to be placed\n     * directly before or after them using selectLeft or selectRight. If selectLeft (or right) is not provided, then\n     * inclusiveLeft (or right) will control this behavior.\n     * @param {boolean} [options.selectLeft] -For atomic ranges, determines whether the cursor is allowed to be placed\n     * directly to the left of the range. Has no effect on non-atomic ranges.\n     * @param {boolean} [options.selectRight] - Like selectLeft, but for the right side.\n     * @param {boolean} [options.collapsed] - Collapsed ranges do not show up in the display.\n     * Setting a range to be collapsed will automatically make it atomic.\n     * @param {boolean} [options.clearOnEnter] - When enabled, will cause the mark to clear itself whenever the cursor\n     * enters its range. This is mostly useful for text-replacement widgets that need to 'snap open' when the user\n     * tries to edit them. The \"clear\" event fired on the range handle can be used to be notified when this happens.\n     * @param {boolean} [options.clearWhenEmpty] - Determines whether the mark is automatically cleared when it becomes\n     * empty. Default is true.\n     * @param {Element} [options.replacedWith] - Use a given node to display this range. Implies both collapsed and\n     * atomic. The given DOM node must be an inline element (as opposed to a block element).\n     * @param {boolean} [options.handleMouseEvents] - When replacedWith is given, this determines whether the editor\n     * will capture mouse and drag events occurring in this widget. Default is false—the events will be left alone\n     * for the default browser handler, or specific handlers on the widget, to capture.\n     * @param {boolean} [options.readOnly] - A read-only span can, as long as it is not cleared, not be modified except\n     * by calling setValue to reset the whole document. Note: adding a read-only span currently clears the undo history\n     * of the editor, because existing undo events being partially nullified by read-only spans would corrupt the\n     * history (in the current implementation).\n     * @param {boolean} [options.addToHistory] - When set to true (default is false), adding this marker will create an\n     * event in the undo history that can be individually undone (clearing the marker).\n     *\n     * @return {{clear, find, changed}} TextMarker - The method will return an object(TextMarker) that represents\n     * the marker which exposes three methods:\n     * clear(), to remove the mark, find(), which returns a {from, to} object (both holding document positions),\n     * indicating the current position of the marked range, or undefined if the marker is no longer in the document,\n     * and finally changed(), which you can call if you've done something that might change the size of the marker\n     * (for example changing the content of a replacedWith node), and want to cheaply update the display.\n     *\n     * The Returned TextMarker emits the following events that can be listened with the on and off methods.\n     * @event beforeCursorEnter Fired on TextMarker when the cursor enters the marked range. From this event handler,\n     * the editor state may be inspected but not modified, with the exception that the range on which the event\n     * fires may be cleared.\n     * @event clear (from: {line, ch}, to: {line, ch}) Fired when the range is cleared, either through cursor movement\n     * in combination with clearOnEnter or through a call to its clear() method. Will only be fired once per handle.\n     * Note that deleting the range through text editing does not fire this event, because an undo action might\n     * bring the range back into existence. from and to give the part of the document that the range spanned\n     * when it was cleared.\n     * @event hide Fired when the last part of the marker is removed from the document by editing operations.\n     * @event unhide Fired when, after the marker was removed by editing, a undo operation brought the marker back.\n     */\n    Editor.prototype.markText = function (markType, cursorFrom, cursorTo, options) {\n        let newMark = this._codeMirror.markText(cursorFrom, cursorTo, options);\n        newMark.markType = markType;\n        newMark.metadata = options && options.metadata;\n        return newMark;\n    };\n\n    /**\n     * Same as markText, but will apply to the token at the given position or current position\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} cursor - The position of the token\n     * @param [options] same as markText\n     * @return {Object} TextMarker\n     */\n    Editor.prototype.markToken = function (markType, cursor, options) {\n        let token = this.getToken(cursor);\n        return this.markText(markType, {line: cursor.line, ch: token.start},\n            {line: cursor.line, ch: token.end}, options);\n    };\n\n    /**\n     * Inserts a bookmark, a handle that follows the text around it as it is being edited, at the given position.\n     * Similar to mark text, but for just a point instead of range.\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} [cursorPos] - Where to place the mark. Optional, if not specified, will\n     * use current pos\n     * @param {Object} [options] - When given, it should be an object that may contain the following\n     * configuration options:\n     * @param {Element} [options.widget] - Can be used to display a DOM node at the current location of the bookmark\n     * (analogous to the replacedWith option to markText).\n     * @param {boolean} [options.insertLeft] - By default, text typed when the cursor is on top of the bookmark will\n     * end up to the right of the bookmark. Set this option to true to make it go to the left instead.\n     * @param {boolean} [options.handleMouseEvents] - As with markText, this determines whether mouse events on the\n     * widget inserted for this bookmark are handled by CodeMirror. The default is false.\n     *\n     * @return {{clear, find}} TextMarker- A bookmark has two methods find() and clear(). `find` returns the current\n     * position of the bookmark, if it is still in the document, and `clear` explicitly removes the bookmark.\n     */\n    Editor.prototype.setBookmark = function (markType, cursorPos, options) {\n        cursorPos = cursorPos || this.getCursorPos();\n        let newMark = this._codeMirror.setBookmark(cursorPos, options);\n        newMark.markType = markType;\n        return newMark;\n    };\n\n    /**\n     * Returns an array of all the bookmarks and marked ranges found between the given positions (non-inclusive).\n     * @param {{line: number, ch: number}} cursorFrom - Mark start position\n     * @param {{line: number, ch: number}} cursorTo - Mark end position\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.findMarks = function (cursorFrom, cursorTo, markType) {\n        let marks = this._codeMirror.findMarks(cursorFrom, cursorTo) || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Returns an array of all the bookmarks and marked ranges present at the given position.\n     * @param {{line: number, ch: number}} cursorPos - cursor position\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.findMarksAt = function (cursorPos, markType) {\n        let marks = this._codeMirror.findMarksAt(cursorPos) || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Returns an array containing all marked ranges in the document.\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.getAllMarks = function (markType) {\n        let marks = this._codeMirror.getAllMarks() || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Clears all mark of the given type. If nothing is given, clears all marks(Don't use this API without types!).\n     * @param {string} [markType] - Optional, if given will only delete marks of that type. Else delete everything.\n     */\n    Editor.prototype.clearAllMarks = function (markType) {\n        const self = this;\n        self._codeMirror.operation(function () {\n            let marks = self.getAllMarks(markType);\n            for(let mark of marks){\n                mark.clear();\n            }\n        });\n    };\n\n    /**\n     * Checks if two positions in the editor are the same.\n     *\n     * @param {{line: number, ch: number}} position1 - cursor position\n     * @param {{line: number, ch: number}} position2 - cursor position\n     * @returns {boolean} True if both positions are the same, false otherwise.\n     */\n    Editor.prototype.isSamePosition = function (position1, position2){\n        return position1.line === position2.line && position1.ch === position2.ch;\n    };\n\n    /**\n     * Get a (JSON-serializable) representation of the undo history.\n     *\n     * @returns {Array} The history of the editor.\n     */\n    Editor.prototype.getHistory = function () {\n        return this._codeMirror.getHistory();\n    };\n\n    /**\n     * Replace the editor's undo history with the one provided, which must be a value\n     * as returned by getHistory. Note that this will have entirely undefined results\n     * if the editor content isn't also the same as it was when getHistory was called.\n     */\n    Editor.prototype.setHistory = function () {\n        return this._codeMirror.setHistory();\n    };\n\n    /**\n     * Creates a named restore point in undo history. this can be later be restored to undo all\n     * changed till the named restore point in one go.\n     */\n    Editor.prototype.createHistoryRestorePoint = function (restorePointName) {\n        const history = this.getHistory();\n        if(history.done && history.done.length) {\n            history.done[history.done.length -1].restorePointName = restorePointName;\n        }\n        // the current history event should be ‘closed’, meaning it can't be combined with further changes\n        // (rapid typing or deleting events are typically combined) as we need to effectively snapshot this history\n        // point at this time.\n        this._codeMirror.changeGeneration(true);\n    };\n\n    Editor.prototype.restoreHistoryPoint = function (restorePointName) {\n        const history = this.getHistory();\n        if(!history.done && !history.done.length) {\n            return;\n        }\n        let canRestore = false;\n        for(let i = history.done.length -1; i>=0; i--) {\n            // history is a stack\n            const historyEntry = history.done[i];\n            if(historyEntry.restorePointName === restorePointName) {\n                canRestore = true;\n                break;\n            }\n        }\n        if(!canRestore) {\n            return;\n        }\n        const cm = this._codeMirror;\n        const self = this;\n        cm.operation(function () {\n            let newHistory = self.getHistory(), historyLength;\n            let lastHistoryItem = newHistory.done && newHistory.done.length\n                && history.done[history.done.length -1];\n            while(lastHistoryItem && lastHistoryItem.restorePointName !== restorePointName) {\n                newHistory = self.getHistory();\n                historyLength = newHistory.done.length;\n                cm.undoSelection();\n                newHistory = self.getHistory();\n                if(historyLength === newHistory.done.length) {\n                    // undo selection didnt do anything, try undo\n                    cm.undo();\n                    newHistory = self.getHistory();\n                    if(historyLength === newHistory.done.length) {\n                        // we cant undo, and this will go into an infinite loop if we continue.\n                        console.error(\"Could not undo history to restore snapshot!\");\n                        break;\n                    }\n                }\n                lastHistoryItem = newHistory.done && newHistory.done.length\n                    && newHistory.done[newHistory.done.length -1];\n            }\n        });\n    };\n\n    /**\n     * Sets the current selection. Start is inclusive, end is exclusive. Places the cursor at the\n     * end of the selection range. Optionally centers around the cursor after\n     * making the selection\n     *\n     * @param {{line:number, ch:number}} start\n     * @param {{line:number, ch:number}} [end] If not specified, defaults to start.\n     * @param {boolean} [center] true to center the viewport\n     * @param {number} [centerOptions] Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     * @param {?string} [origin] An optional string that describes what other selection or edit operations this\n     *      should be merged with for the purposes of undo. See {@link Document#replaceRange} for more details.\n     */\n    Editor.prototype.setSelection = function (start, end, center, centerOptions, origin) {\n        this.setSelections([{start: start, end: end || start}], center, centerOptions, origin);\n    };\n\n    /**\n     * Replace the selection with the given string.\n     * @param {string} replacement the text to replace the current selection\n     * @param {string} [select] The optional select argument can be used to change selection. Passing \"around\"\n     * will cause the new text to be selected, passing \"start\" will collapse the selection to the start\n     * of the inserted text.\n     */\n    Editor.prototype.replaceSelection = function (replacement, select) {\n        this._codeMirror.replaceSelection(replacement, select);\n    };\n\n    /**\n     * Replaces the content of multiple selections with the strings in the array. The length of the given\n     * array should be the same as the number of active selections.\n     * @param {Array<string>} replacement the text array to replace the current selections with\n     * @param {string} [select] The optional select argument can be used to change selection. Passing \"around\"\n     * will cause the new text to be selected, passing \"start\" will collapse the selection to the start\n     * of the inserted text.\n     */\n    Editor.prototype.replaceSelections = function (replacement, select) {\n        this._codeMirror.replaceSelections(replacement, select);\n    };\n\n    /**\n     * Replace the part of the document between from and to with the given string.\n     * @param {string} replacement the text to replace the current selection\n     * @param {{line:number, ch:number}} from the strat position to replace\n     * @param {{line:number, ch:number}} [to] the end position to replace. to can be left off to simply\n     * insert the string at position from.\n     * @param {string} origin When origin is given, it will be passed on to \"change\" events, and its first\n     * letter will be used to determine whether this change can be merged with previous history events\n     * of the inserted text.\n     */\n    Editor.prototype.replaceRange = function (replacement, from, to, origin) {\n        this._codeMirror.replaceRange(replacement, from, to, origin);\n    };\n\n\n    /**\n     * Replaces multiple ranges in the editor with the specified texts.\n     *\n     * @method\n     * @param {Array} ranges - An array of range objects, each containing `from`, `to`, and `text` properties.\n     * @param {Object} ranges[].from - The start position of the range to be replaced. It should have `line` and `ch` properties.\n     * @param {Object} ranges[].to - The end position of the range to be replaced. It should have `line` and `ch` properties.\n     * @param {string} ranges[].text - The text to replace the specified range.\n     * @param {string} [origin] - An optional origin identifier to be associated with the changes.\n     * @example\n     * editor.replaceMultipleRanges([\n     *   { from: { line: 0, ch: 0 }, to: { line: 0, ch: 5 }, text: 'Hello' },\n     *   { from: { line: 1, ch: 0 }, to: { line: 1, ch: 4 }, text: 'World' }\n     * ], 'exampleOrigin');\n     */\n    Editor.prototype.replaceMultipleRanges = function (ranges, origin) {\n        // Sort ranges in descending order by start position so that they dont step over each other\n        let self = this;\n        self.operation(()=>{\n            ranges.sort((a, b) => {\n                if (a.from.line === b.from.line) {\n                    return b.from.ch - a.from.ch;\n                }\n                return b.from.line - a.from.line;\n            });\n\n            // Replace each range with its corresponding replacement text\n            ranges.forEach(range => {\n                self.replaceRange(range.text, range.from, range.to, origin);\n            });\n        });\n    };\n\n    /**\n     * Clears any active selection if present.\n     */\n    Editor.prototype.clearSelection = function () {\n        let pos = this.getCursorPos();\n        this.setCursorPos(pos.line, pos.ch);\n    };\n\n    /**\n     * Sets a multiple selection, with the \"primary\" selection (the one returned by\n     * getSelection() and getCursorPos()) defaulting to the last if not specified.\n     * Overlapping ranges will be automatically merged, and the selection will be sorted.\n     * Optionally centers around the primary selection after making the selection.\n     * @param {!Array<{start:{line:number, ch:number}, end:{line:number, ch:number}, primary:boolean, reversed: boolean}>} selections\n     *      The selection ranges to set. If the start and end of a range are the same, treated as a cursor.\n     *      If reversed is true, set the anchor of the range to the end instead of the start.\n     *      If primary is true, this is the primary selection. Behavior is undefined if more than\n     *      one selection has primary set to true. If none has primary set to true, the last one is primary.\n     * @param {boolean} center true to center the viewport around the primary selection.\n     * @param {number} centerOptions Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     * @param {?string} origin An optional string that describes what other selection or edit operations this\n     *      should be merged with for the purposes of undo. See {@link Document#replaceRange} for more details.\n     */\n    Editor.prototype.setSelections = function (selections, center, centerOptions, origin) {\n        var primIndex = selections.length - 1, options;\n        if (origin) {\n            options = { origin: origin };\n        }\n        this._codeMirror.setSelections(_.map(selections, function (sel, index) {\n            if (sel.primary) {\n                primIndex = index;\n            }\n            return { anchor: sel.reversed ? sel.end : sel.start, head: sel.reversed ? sel.start : sel.end };\n        }), primIndex, options);\n        if (center) {\n            this.centerOnCursor(centerOptions);\n        }\n    };\n\n    /**\n     * Sets the editors overwrite mode state. If null is passed, the state is toggled.\n     *\n     * @param {?boolean} start\n     */\n    Editor.prototype.toggleOverwrite = function (state) {\n        this._codeMirror.toggleOverwrite(state);\n    };\n\n    /**\n     * Selects word that the given pos lies within or adjacent to. If pos isn't touching a word\n     * (e.g. within a token like \"//\"), moves the cursor to pos without selecting a range.\n     * @param {!{line:number, ch:number}}\n     */\n    Editor.prototype.selectWordAt = function (pos) {\n        var word = this._codeMirror.findWordAt(pos);\n        this.setSelection(word.anchor, word.head);\n    };\n\n    Editor.prototype.getTextBetween = function (startPos, endPos) {\n        const text = this._codeMirror.getRange(startPos, endPos);\n        return text;\n    };\n\n    /**\n     * Gets word at the given pos lies within or adjacent to. If pos isn't touching a word\n     * (e.g. within a token like \"//\"), returns null\n     * @param pos\n     * @return {{text:string, startPos:{line:number, ch:number}, endPos: {line:number, ch:number}}}\n     */\n    Editor.prototype.getWordAt = function (pos) {\n        const wordRange = this._codeMirror.findWordAt(pos);\n        const text = this._codeMirror.getRange(wordRange.anchor, wordRange.head);\n        return {\n            text,\n            startPos: wordRange.anchor,\n            endPos: wordRange.head\n        };\n    };\n\n    /**\n     * Gets number string of (upto 10 digits default) at the given pos lies within or adjacent to.\n     * If pos isn't touching a number, returns null. If the number in string is greater than max digits\n     *  returns null.\n     * @param pos\n     * @param {number} maxDigits - number of digits allowed. This is to prevent massive digit strings.\n     * @return {{text:string, startPos:{line:number, ch:number}, endPos: {line:number, ch:number}}}\n     */\n    Editor.prototype.getNumberAt = function (pos, maxDigits = 10) {\n        // Eg: string \"margin:1.4em;\" the position maybe at the location 4, . or 1\n        const token = this._codeMirror.getTokenAt(pos);\n        const maxDigitsOverflow = maxDigits + 1;\n\n        if (token.type === \"string\" || token.type === \"number\") {\n            const str = token.string;\n            let left = pos.ch - token.start; // Start scanning from the given position\n            let right = left;\n            let decimalAlreadyFound = false,\n                digitCount = 0;\n\n            // Scan left to find the start of the number\n            while (left - 1 >= 0 && (/\\d|\\.|-/).test(str[left - 1]) && digitCount < maxDigitsOverflow) {\n                // Make sure not to count multiple decimal points in a number\n                if (str[left - 1] === '.' && !decimalAlreadyFound) {\n                    decimalAlreadyFound =  true;\n                } else if (str[left - 1] === '.' && decimalAlreadyFound) {\n                    break;\n                }  else if (str[left - 1] === '-') {\n                    left--;\n                    break;\n                }\n                digitCount++;\n                left--;\n            }\n\n            // Scan right to find the end of the number\n            while (right < str.length && (/\\d|\\./).test(str[right]) && digitCount < maxDigitsOverflow) {\n                // Make sure not to count multiple decimal points in a number\n                if (str[right] === '.' && !decimalAlreadyFound) {\n                    decimalAlreadyFound = true;\n                } else if (str[right] === '.' && decimalAlreadyFound) {\n                    break;\n                }\n                digitCount++;\n                right++;\n            }\n\n            // If we found a number, and it is withing the original max digit count, return the result\n            if (left !== right && digitCount !== maxDigitsOverflow) {\n                const text = str.substring(left, right);\n                if(text !== \".\" && text !== \"-\"){\n                    return {\n                        text: str.substring(left, right),\n                        startPos: {line: pos.line, ch: token.start + left},\n                        endPos: {line: pos.line, ch: token.start + right}\n                    };\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Gets the total number of lines in the document (includes lines not visible in the viewport)\n     * @return {!number}\n     */\n    Editor.prototype.lineCount = function () {\n        return this._codeMirror.lineCount();\n    };\n\n    /**\n     * Deterines if line is fully visible.\n     * @param {number} zero-based index of the line to test\n     * @return {boolean} true if the line is fully visible, false otherwise\n     */\n    Editor.prototype.isLineVisible = function (line) {\n        var coords = this._codeMirror.charCoords({line: line, ch: 0}, \"local\"),\n            scrollInfo = this._codeMirror.getScrollInfo(),\n            top = scrollInfo.top,\n            bottom = scrollInfo.top + scrollInfo.clientHeight;\n\n        // Check top and bottom and return false for partially visible lines.\n        return (coords.top >= top && coords.bottom <= bottom);\n    };\n\n    /**\n     * Gets the number of the first visible line in the editor.\n     * @return {number} The 0-based index of the first visible line.\n     */\n    Editor.prototype.getFirstVisibleLine = function () {\n        return (this._visibleRange ? this._visibleRange.startLine : 0);\n    };\n\n    /**\n     * Gets the number of the last visible line in the editor.\n     * @return {number} The 0-based index of the last visible line.\n     */\n    Editor.prototype.getLastVisibleLine = function () {\n        return (this._visibleRange ? this._visibleRange.endLine : this.lineCount() - 1);\n    };\n\n    /* Hides the specified line number in the editor\n     * @param {!from} line to start hiding from (inclusive)\n     * @param {!to} line to end hiding at (exclusive)\n     * @return {TextMarker} The CodeMirror mark object that's hiding the lines\n     */\n    Editor.prototype._hideLines = function (from, to) {\n        if (to <= from) {\n            return;\n        }\n\n        // We set clearWhenEmpty: false so that if there's a blank line at the beginning or end of\n        // the document, and that's the only hidden line, we can still actually hide it. Doing so\n        // requires us to create a 0-length marked span, which would ordinarily be cleaned up by CM\n        // if clearWithEmpty is true. See https://groups.google.com/forum/#!topic/codemirror/RB8VNF8ow2w\n        var value = this._codeMirror.markText(\n            {line: from, ch: 0},\n            {line: to - 1, ch: this._codeMirror.getLine(to - 1).length},\n            {collapsed: true, inclusiveLeft: true, inclusiveRight: true, clearWhenEmpty: false}\n        );\n\n        return value;\n    };\n\n    /**\n     * Gets the total height of the document in pixels (not the viewport)\n     * @return {!number} height in pixels\n     */\n    Editor.prototype.totalHeight = function () {\n        return this.getScrollerElement().scrollHeight;\n    };\n\n    /**\n     * Gets the scroller element from the editor.\n     * @return {!HTMLDivElement} scroller\n     */\n    Editor.prototype.getScrollerElement = function () {\n        return this._codeMirror.getScrollerElement();\n    };\n\n    /**\n     * Gets the root DOM node of the editor.\n     * @return {!HTMLDivElement} The editor's root DOM node.\n     */\n    Editor.prototype.getRootElement = function () {\n        return this._codeMirror.getWrapperElement();\n    };\n\n\n    /**\n     * Gets the lineSpace element within the editor (the container around the individual lines of code).\n     * FUTURE: This is fairly CodeMirror-specific. Logic that depends on this may break if we switch\n     * editors.\n     * @return {!HTMLDivElement} The editor's lineSpace element.\n     */\n    Editor.prototype._getLineSpaceElement = function () {\n        return $(\".CodeMirror-lines\", this.getScrollerElement()).children().get(0);\n    };\n\n    /**\n     * Returns the current scroll position of the editor.\n     * @return {{x:number, y:number}} The x,y scroll position in pixels\n     */\n    Editor.prototype.getScrollPos = function () {\n        var scrollInfo = this._codeMirror.getScrollInfo();\n        return { x: scrollInfo.left, y: scrollInfo.top };\n    };\n\n    /**\n     * Restores and adjusts the current scroll position of the editor.\n     * @param {{x:number, y:number}} scrollPos - The x,y scroll position in pixels\n     * @param {!number} heightDelta - The amount of delta H to apply to the scroll position\n     */\n    Editor.prototype.adjustScrollPos = function (scrollPos, heightDelta) {\n        this._codeMirror.scrollTo(scrollPos.x, scrollPos.y + heightDelta);\n    };\n\n    /**\n     * Sets the current scroll position of the editor.\n     * @param {number} x scrollLeft position in pixels\n     * @param {number} y scrollTop position in pixels\n     */\n    Editor.prototype.setScrollPos = function (x, y) {\n        this._codeMirror.scrollTo(x, y);\n    };\n\n    /*\n     * Returns the current text height of the editor.\n     * @return {number} Height of the text in pixels\n     */\n    Editor.prototype.getTextHeight = function () {\n        return this._codeMirror.defaultTextHeight();\n    };\n\n    /**\n     * Adds an inline widget below the given line. If any inline widget was already open for that\n     * line, it is closed without warning.\n     * @param {!{line:number, ch:number}} pos  Position in text to anchor the inline.\n     * @param {!InlineWidget} inlineWidget The widget to add.\n     * @param {boolean=} scrollLineIntoView Scrolls the associated line into view. Default true.\n     * @return {$.Promise} A promise object that is resolved when the widget has been added (but might\n     *     still be animating open). Never rejected.\n     */\n    Editor.prototype.addInlineWidget = InlineWidgetHelper.addInlineWidget;\n\n    /**\n     * Removes all inline widgets\n     */\n    Editor.prototype.removeAllInlineWidgets = InlineWidgetHelper.removeAllInlineWidgets;\n\n    /**\n     * Removes the given inline widget.\n     * @param {number} inlineWidget The widget to remove.\n     * @return {$.Promise} A promise that is resolved when the inline widget is fully closed and removed from the DOM.\n     */\n    Editor.prototype.removeInlineWidget = InlineWidgetHelper.removeInlineWidget;\n\n    /**\n     * Removes all inline widgets for a given line\n     * @param {number} lineNum The line number to modify\n     */\n    Editor.prototype.removeAllInlineWidgetsForLine = InlineWidgetHelper.removeAllInlineWidgetsForLine;\n\n    /**\n     * ****** Update actual public API doc in Editor.js *****\n     * Gets all inline widgets for a given line\n     * @param {number} lineNum The line number to modify\n     */\n    Editor.prototype.getAllInlineWidgetsForLine = InlineWidgetHelper.getAllInlineWidgetsForLine;\n\n    /**\n     * Returns a list of all inline widgets currently open in this editor. Each entry contains the\n     * inline's id, and the data parameter that was passed to addInlineWidget().\n     * @return {!Array.<{id:number, data:Object}>}\n     */\n    Editor.prototype.getInlineWidgets = InlineWidgetHelper.getInlineWidgets;\n\n    /**\n     * Returns the currently focused inline widget, if any.\n     * @return {?InlineWidget}\n     */\n    Editor.prototype.getFocusedInlineWidget = InlineWidgetHelper.getFocusedInlineWidget;\n\n    /**\n     * Sets the height of an inline widget in this editor.\n     * @param {!InlineWidget} inlineWidget The widget whose height should be set.\n     * @param {!number} height The height of the widget.\n     * @param {boolean=} ensureVisible Whether to scroll the entire widget into view. Default false.\n     */\n    Editor.prototype.setInlineWidgetHeight = InlineWidgetHelper.setInlineWidgetHeight;\n\n    /**\n     * Display temporary popover message at current cursor position. Display message above\n     * cursor if space allows, otherwise below.\n     *\n     * @param {string} errorMsg Error message to display\n     * @function\n     */\n    Editor.prototype.displayErrorMessageAtCursor = ErrorPopupHelper.displayErrorMessageAtCursor;\n\n    /**\n     * Returns the offset of the top of the virtual scroll area relative to the browser window (not the editor\n     * itself). Mainly useful for calculations related to scrollIntoView(), where you're starting with the\n     * offset() of a child widget (relative to the browser window) and need to figure out how far down it is from\n     * the top of the virtual scroll area (excluding the top padding).\n     * @return {number}\n     */\n    Editor.prototype.getVirtualScrollAreaTop = function () {\n        var topPadding = this._getLineSpaceElement().offsetTop, // padding within mover\n            scroller = this.getScrollerElement();\n        return $(scroller).offset().top - scroller.scrollTop + topPadding;\n    };\n\n    /** Gives focus to the editor control */\n    Editor.prototype.focus = function () {\n        // Focusing an editor synchronously triggers focus/blur handlers. If a blur handler attemps to focus\n        // another editor, we'll put CM in a bad state (because CM assumes programmatically focusing itself\n        // will always succeed, and if you're in the middle of another focus change that appears to be untrue).\n        // So instead, we simply ignore reentrant focus attempts.\n        // See bug #2951 for an example of this happening and badly hosing things.\n        if (_duringFocus) {\n            return;\n        }\n\n        _duringFocus = true;\n        try {\n            this._codeMirror.focus();\n        } finally {\n            _duringFocus = false;\n        }\n    };\n\n    /** Returns true if the editor has focus */\n    Editor.prototype.hasFocus = function () {\n        return this._focused;\n    };\n\n    /*\n     * @typedef {scrollPos:{x:number, y:number},Array.<{start:{line:number, ch:number},end:{line:number, ch:number}}>} EditorViewState\n     */\n\n    /*\n     * returns the view state for the editor\n     * @return {!EditorViewState}\n     */\n    Editor.prototype.getViewState = function () {\n        return {\n            selections: this.getSelections(),\n            scrollPos: this.getScrollPos()\n        };\n\n    };\n\n    /**\n     * Restores the view state\n     * @param {!EditorViewState} viewState - the view state object to restore\n     */\n    Editor.prototype.restoreViewState = function (viewState) {\n        if (viewState.selection) {\n            // We no longer write out single-selection, but there might be some view state\n            // from an older version.\n            this.setSelection(viewState.selection.start, viewState.selection.end);\n        }\n        if (viewState.selections) {\n            this.setSelections(viewState.selections);\n        }\n        if (viewState.scrollPos) {\n            this.setScrollPos(viewState.scrollPos.x, viewState.scrollPos.y);\n        }\n    };\n\n    /**\n     * Re-renders the editor UI\n     * @param {boolean=} handleResize true if this is in response to resizing the editor. Default false.\n     */\n    Editor.prototype.refresh = function (handleResize) {\n        // If focus is currently in a child of the CodeMirror editor (e.g. in an inline widget), but not in\n        // the CodeMirror input field itself, remember the focused item so we can restore focus after the\n        // refresh (which might cause the widget to be removed from the display list temporarily).\n        var focusedItem = window.document.activeElement,\n            restoreFocus = $.contains(this._codeMirror.getScrollerElement(), focusedItem);\n        this._codeMirror.refresh();\n        if (restoreFocus) {\n            focusedItem.focus();\n        }\n    };\n\n    /**\n     * Re-renders the editor, and all children inline editors.\n     * @param {boolean=} handleResize true if this is in response to resizing the editor. Default false.\n     */\n    Editor.prototype.refreshAll = function (handleResize) {\n        this.refresh(handleResize);\n        this.getInlineWidgets().forEach(function (inlineWidget) {\n            inlineWidget.refresh();\n        });\n    };\n\n    /** Undo the last edit. */\n    Editor.prototype.undo = function () {\n        this._codeMirror.undo();\n    };\n\n    /** Redo the last un-done edit. */\n    Editor.prototype.redo = function () {\n        this._codeMirror.redo();\n    };\n\n    /**\n     * View API Visibility Change Notification handler.  This is also\n     * called by the native \"setVisible\" API which refresh can be optimized\n     * @param {boolean} show true to show the editor, false to hide it\n     * @param {boolean} refresh true (default) to refresh the editor, false to skip refreshing it\n     */\n    Editor.prototype.notifyVisibilityChange = function (show, refresh) {\n        if (show && (refresh || refresh === undefined)) {\n            this.refresh();\n        }\n        if (show) {\n            this._inlineWidgets.forEach(function (inlineWidget) {\n                inlineWidget.onParentShown();\n            });\n        }\n    };\n\n    /**\n     * Shows or hides the editor within its parent. Does not force its ancestors to\n     * become visible.\n     * @param {boolean} show true to show the editor, false to hide it\n     * @param {boolean} refresh true (default) to refresh the editor, false to skip refreshing it\n     */\n    Editor.prototype.setVisible = function (show, refresh) {\n        this.$el.css(\"display\", (show ? \"\" : \"none\"));\n        this.notifyVisibilityChange(show, refresh);\n    };\n\n    /**\n     * Returns true if the editor is fully visible--i.e., is in the DOM, all ancestors are\n     * visible, and has a non-zero width/height.\n     */\n    Editor.prototype.isFullyVisible = function () {\n        return $(this.getRootElement()).is(\":visible\");\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the given range.\n     * Returns null if the mode at the start of the selection differs from the mode at the end -\n     * an *approximation* of whether the mode is consistent across the whole range (a pattern like\n     * A-B-A would return A as the mode, not null).\n     *\n     * @param {!{line: number, ch: number}} start The start of the range to check.\n     * @param {!{line: number, ch: number}} end The end of the range to check.\n     * @param {boolean=} knownMixed Whether we already know we're in a mixed mode and need to check both\n     *     the start and end.\n     * @return {?(Object|string)} Name of syntax-highlighting mode, or object containing a \"name\" property\n     *     naming the mode along with configuration options required by the mode.\n     * @see {@link LanguageManager::#getLanguageForPath} and {@link LanguageManager::Language#getMode}.\n     */\n    Editor.prototype.getModeForRange = function (start, end, knownMixed) {\n        var outerMode = this._codeMirror.getMode(),\n            startMode = TokenUtils.getModeAt(this._codeMirror, start),\n            endMode = TokenUtils.getModeAt(this._codeMirror, end);\n        if (!knownMixed && outerMode.name === startMode.name) {\n            // Mode does not vary: just use the editor-wide mode name\n            return this._codeMirror.getOption(\"mode\");\n        } else if (!startMode || !endMode || startMode.name !== endMode.name) {\n            return null;\n        }\n        return startMode;\n\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the current selection or cursor position. (The mode may\n     * vary within one file due to embedded languages, e.g. JS embedded in an HTML script block). See\n     * `getModeForRange()` for how this is determined for a single selection.\n     *\n     * If there are multiple selections, this will return a mode only if all the selections are individually\n     * consistent and resolve to the same mode.\n     *\n     * @param {{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean}} selection\n     * @return {?(Object|string)} Name of syntax-highlighting mode, or object containing a \"name\" property\n     *     naming the mode along with configuration options required by the mode.\n     * @see {@link LanguageManager::#getLanguageForPath} and {@link LanguageManager::Language#getMode}.\n     */\n    Editor.prototype.getModeForSelection = function (selection) {\n        // Check for mixed mode info\n        var self        = this,\n            sels        = selection ? [selection] : this.getSelections(),\n            primarySel  = selection || this.getSelection(),\n            outerMode   = this._codeMirror.getMode(),\n            startMode   = TokenUtils.getModeAt(this._codeMirror, primarySel.start),\n            isMixed     = (outerMode.name !== startMode.name);\n\n        if (isMixed) {\n            // This is the magic code to let the code view know that we are in 'css' context\n            // if the CodeMirror outermode is 'htmlmixed' and we are in 'style' attributes\n            // value context. This has to be done as CodeMirror doesn't yet think this as 'css'\n            // This magic is executed only when user is having a cursor and not selection\n            // We will enable selection handling one we figure a way out to handle mixed scope selection\n            if (outerMode.name === 'htmlmixed' && primarySel.start.line === primarySel.end.line && primarySel.start.ch === primarySel.end.ch) {\n                var tagInfo = HTMLUtils.getTagInfo(this, primarySel.start, true),\n                    tokenType = tagInfo.position.tokenType;\n\n                if (tokenType === HTMLUtils.ATTR_VALUE && tagInfo.attr.name.toLowerCase() === 'style') {\n                    return 'css';\n                }\n            }\n            // Shortcut the first check to avoid getModeAt(), which can be expensive\n            if (primarySel.start.line !== primarySel.end.line || primarySel.start.ch !== primarySel.end.ch) {\n                var endMode = TokenUtils.getModeAt(this._codeMirror, primarySel.end);\n\n                if (startMode.name !== endMode.name) {\n                    return null;\n                }\n            }\n\n            // If mixed mode, check that mode is the same at start & end of each selection\n            var hasMixedSel = _.some(sels, function (sel) {\n                if (sels === primarySel) {\n                    // We already checked this before, so we know it's not mixed.\n                    return false;\n                }\n\n                var rangeMode = self.getModeForRange(sel.start, sel.end, true);\n                return (!rangeMode || rangeMode.name !== startMode.name);\n            });\n            if (hasMixedSel) {\n                return null;\n            }\n\n            return startMode.name;\n        }\n            // Mode does not vary: just use the editor-wide mode\n        return this._codeMirror.getOption(\"mode\");\n\n    };\n\n    /**\n     * gets the language for the selection. (Javascript selected from an HTML document or CSS selected from an HTML\n     * document, etc...)\n     * @return {!Language}\n     */\n    Editor.prototype.getLanguageForSelection = function () {\n        return this.document.getLanguage().getLanguageForMode(this.getModeForSelection());\n    };\n\n    /**\n     * gets the language for the selection. (Javascript selected from an HTML document or CSS selected from an HTML\n     * document, etc...)\n     * @return {!Language}\n     */\n    Editor.prototype.getLanguageForPosition = function (pos) {\n        let self = this;\n        pos = pos || self.getCursorPos();\n        return this.document.getLanguage().getLanguageForMode(self.getModeForSelection({start: pos, end: pos}));\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the document.\n     *\n     * @return {Object|String} Object or Name of syntax-highlighting mode\n     * @see {@link LanguageManager::#getLanguageForPath|LanguageManager.getLanguageForPath} and {@link LanguageManager::Language#getMode|Language.getMode}.\n     */\n    Editor.prototype.getModeForDocument = function () {\n        return this._codeMirror.getOption(\"mode\");\n    };\n\n    /**\n     * The Document we're bound to\n     * @type {!Document}\n     */\n    Editor.prototype.document = null;\n\n\n    /**\n     * The Editor's last known width.\n     * Used in conjunction with updateLayout to recompute the layout\n     * if the parent container changes its size since our last layout update.\n     * @type {?number}\n     */\n    Editor.prototype._lastEditorWidth = null;\n\n\n    /**\n     * If true, we're in the middle of syncing to/from the Document. Used to ignore spurious change\n     * events caused by us (vs. change events caused by others, which we need to pay attention to).\n     * @type {!boolean}\n     */\n    Editor.prototype._duringSync = false;\n\n    /**\n     * @private\n     * NOTE: this is actually \"semi-private\": EditorManager also accesses this field... as well as\n     * a few other modules. However, we should try to gradually move most code away from talking to\n     * CodeMirror directly.\n     * @type {!CodeMirror}\n     */\n    Editor.prototype._codeMirror = null;\n\n    /**\n     * @private\n     * @type {!Array.<{id:number, data:Object}>}\n     */\n    Editor.prototype._inlineWidgets = null;\n\n    /**\n     * @private\n     * @type {?TextRange}\n     */\n    Editor.prototype._visibleRange = null;\n\n    /**\n     * @private\n     * @type {Object}\n     * Promise queues for inline widgets being added to a given line.\n     */\n    Editor.prototype._inlineWidgetQueues = null;\n\n    /**\n     * @private\n     * @type {Array}\n     * A list of objects corresponding to the markers that are hiding lines in the current editor.\n     */\n    Editor.prototype._hideMarks = null;\n\n    /**\n     * @private\n     *\n     * Retrieve the value of the named preference for this document.\n     *\n     * @param {string} prefName Name of preference to retrieve.\n     * @return {*} current value of that pref\n     */\n    Editor.prototype._getOption = function (prefName) {\n        return PreferencesManager.get(prefName, PreferencesManager._buildContext(this.document.file.fullPath, this.document.getLanguage().getId()));\n    };\n\n    /**\n     * @private\n     *\n     * Updates the editor to the current value of prefName for the file being edited.\n     *\n     * @param {string} prefName Name of the preference to visibly update\n     */\n    Editor.prototype._updateOption = function (prefName) {\n        var oldValue = this._currentOptions[prefName],\n            newValue = this._getOption(prefName);\n\n        if (oldValue !== newValue) {\n            this._currentOptions[prefName] = newValue;\n\n            if (prefName === USE_TAB_CHAR) {\n                this._codeMirror.setOption(cmOptions[prefName], newValue);\n                this._codeMirror.setOption(\"indentUnit\", newValue === true ?\n                                           this._currentOptions[TAB_SIZE] :\n                                           this._currentOptions[SPACE_UNITS]\n                                          );\n            } else if (prefName === STYLE_ACTIVE_LINE) {\n                this._updateStyleActiveLine();\n            } else if (prefName === SCROLL_PAST_END && this._visibleRange) {\n                // Do not apply this option to inline editors\n                return;\n            } else if (prefName === SHOW_LINE_NUMBERS) {\n                Editor._toggleLinePadding(!newValue);\n                this._codeMirror.setOption(cmOptions[SHOW_LINE_NUMBERS], newValue);\n                if (newValue) {\n                    Editor.registerGutter(LINE_NUMBER_GUTTER, LINE_NUMBER_GUTTER_PRIORITY);\n                } else {\n                    Editor.unregisterGutter(LINE_NUMBER_GUTTER);\n                }\n                this.refreshAll();\n            } else {\n                this._codeMirror.setOption(cmOptions[prefName], newValue);\n            }\n\n            this.trigger(\"optionChange\", prefName, newValue);\n        }\n    };\n\n    /**\n     * @private\n     *\n     * Used to ensure that \"style active line\" is turned off when there is a selection.\n     */\n    Editor.prototype._updateStyleActiveLine = function () {\n        if (this.hasSelection()) {\n            if (this._codeMirror.getOption(\"styleActiveLine\")) {\n                this._codeMirror.setOption(\"styleActiveLine\", false);\n            }\n        } else {\n            this._codeMirror.setOption(\"styleActiveLine\", this._currentOptions[STYLE_ACTIVE_LINE]);\n        }\n    };\n\n    /**\n     * resizes the editor to fill its parent container\n     * should not be used on inline editors\n     * @param {boolean=} forceRefresh - forces the editor to update its layout\n     *                                   even if it already matches the container's height / width\n     */\n    Editor.prototype.updateLayout = function (forceRefresh) {\n        var curRoot = this.getRootElement(),\n            curWidth = $(curRoot).width(),\n            $editorHolder = this.$el.parent(),\n            editorAreaHt = $editorHolder.height();\n\n        if (!curRoot.style.height || $(curRoot).height() !== editorAreaHt) {\n            // Call setSize() instead of $.height() to allow CodeMirror to\n            // check for options like line wrapping\n            this.setSize(null, editorAreaHt);\n            if (forceRefresh === undefined) {\n                forceRefresh = true;\n            }\n        } else if (curWidth !== this._lastEditorWidth) {\n            if (forceRefresh === undefined) {\n                forceRefresh = true;\n            }\n        }\n        this._lastEditorWidth = curWidth;\n\n        if (forceRefresh) {\n            this.refreshAll(forceRefresh);\n        }\n    };\n\n    /**\n     * Renders all registered gutters\n     * @private\n     */\n    Editor.prototype._renderGutters = function () {\n        var languageId = this.document.getLanguage().getId();\n\n        function _filterByLanguages(gutter) {\n            return !gutter.languages || gutter.languages.indexOf(languageId) > -1;\n        }\n\n        function _sortByPriority(a, b) {\n            return a.priority - b.priority;\n        }\n\n        function _getName(gutter) {\n            return gutter.name;\n        }\n\n        var gutters = registeredGutters.map(_getName),\n            rootElement = this.getRootElement();\n\n        // If the line numbers gutter has not been explicitly registered and the CodeMirror lineNumbes option is\n        // set to true, we explicitly add the line numbers gutter. This case occurs the first time the editor loads\n        // and showLineNumbers is set to true in preferences\n        if (gutters.indexOf(LINE_NUMBER_GUTTER) < 0 && this._codeMirror.getOption(cmOptions[SHOW_LINE_NUMBERS])) {\n            registeredGutters.push({name: LINE_NUMBER_GUTTER, priority: LINE_NUMBER_GUTTER_PRIORITY});\n        }\n\n        gutters = registeredGutters.sort(_sortByPriority)\n            .filter(_filterByLanguages)\n            .map(_getName);\n\n        this._codeMirror.setOption(\"gutters\", gutters);\n        this._codeMirror.refresh();\n\n        if (gutters.indexOf(LINE_NUMBER_GUTTER) < 0) {\n            $(rootElement).addClass(\"linenumber-disabled\");\n        } else {\n            $(rootElement).removeClass(\"linenumber-disabled\");\n        }\n    };\n\n    /**\n     * Sets the marker for the specified gutter on the specified line number\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     * @param   {object}   marker     The dom element representing the marker to the inserted in the gutter\n     */\n    Editor.prototype.setGutterMarker = function (lineNumber, gutterName, marker) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.setGutterMarker\");\n            return;\n        }\n\n        this._codeMirror.setGutterMarker(lineNumber, gutterName, marker);\n    };\n\n    /**\n     * Gets the gutter marker of the given name if found on the current line, else returns undefined.\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     */\n    Editor.prototype.getGutterMarker = function (lineNumber, gutterName) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.getGutterMarker\");\n            return;\n        }\n        let lineInfo = this._codeMirror.lineInfo(lineNumber);\n        let gutterMarkers = lineInfo && lineInfo.gutterMarkers || {};\n        return gutterMarkers[gutterName];\n    };\n\n    /**\n     * Clears the marker for the specified gutter on the specified line number. Does nothing if there was no marker\n     * on the line.\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     */\n    Editor.prototype.clearGutterMarker = function (lineNumber, gutterName) {\n        this.setGutterMarker(lineNumber, gutterName, null);\n    };\n\n    /**\n     * Clears all marks from the gutter with the specified name.\n     * @param {string} gutterName The name of the gutter to clear.\n     */\n    Editor.prototype.clearGutter = function (gutterName) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.clearGutter\");\n            return;\n        }\n        this._codeMirror.clearGutter(gutterName);\n    };\n\n    /**\n     * Tries to uncomment the current selection, and if that fails, line-comments it.\n     * This is internal private api used by phoenix line toggle command\n     * @private\n     */\n    Editor.prototype._toggleComment = function () {\n        const indentLineComment = Editor.getIndentLineComment(this.document.file.fullPath);\n        this._codeMirror.toggleComment({\n            indent: indentLineComment\n        });\n    };\n\n    /**\n     * Returns the list of gutters current registered on all editors.\n     * @return {!Array.<{name: string, priority: number}>}\n     */\n    Editor.getRegisteredGutters = function () {\n        return registeredGutters;\n    };\n\n    /**\n     * Return true if gutter of the given name is registered\n     * @param   {string}   gutterName The name of the gutter\n     * @return {boolean}\n     */\n    Editor.isGutterRegistered = function (gutterName) {\n        return registeredGutters.some(function (gutter) {\n            return gutter.name === gutterName;\n        });\n    };\n\n    /**\n     * Registers the gutter with the specified name at the given priority.\n     * @param {string} name    The name of the gutter.\n     * @param {number} priority  A number denoting the priority of the gutter. Priorities higher than LINE_NUMBER_GUTTER_PRIORITY appear after the line numbers. Priority less than LINE_NUMBER_GUTTER_PRIORITY appear before.\n     * @param {?Array<string>} [languageIds] A list of language ids that this gutter is valid for. If no language ids are passed, then the gutter is valid in all languages.\n     */\n    Editor.registerGutter = function (name, priority, languageIds) {\n        if (isNaN(priority)) {\n            console.warn(\"A non-numeric priority value was passed to registerGutter. The value will default to 0.\");\n            priority = 0;\n        }\n\n        if (!name || typeof name !== \"string\") {\n            console.error(\"The name of the registered gutter must be a string.\");\n            return;\n        }\n\n        var gutter = {name: name, priority: priority, languages: languageIds},\n            gutterExists = registeredGutters.some(function (gutter) {\n                return gutter.name === name;\n            });\n\n        if (!gutterExists) {\n            registeredGutters.push(gutter);\n        }\n\n        Editor.forEveryEditor(function (editor) {\n            editor._renderGutters();\n        });\n    };\n\n    /**\n     * Unregisters the gutter with the specified name and removes it from the UI.\n     * @param {string} name The name of the gutter to be unregistered.\n     */\n    Editor.unregisterGutter = function (name) {\n        var i, gutter;\n        registeredGutters = registeredGutters.filter(function (gutter) {\n            return gutter.name !== name;\n        });\n\n        Editor.forEveryEditor(function (editor) {\n            editor._renderGutters();\n        });\n    };\n\n    // Global settings that affect Editor instances that share the same preference locations\n\n    /**\n     * Sets whether to use tab characters (vs. spaces) when inserting new text.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setUseTabChar = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(USE_TAB_CHAR, value, options);\n    };\n\n    /**\n     * Gets whether the specified or current file uses tab characters (vs. spaces) when inserting new text\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getUseTabChar = function (fullPath) {\n        return PreferencesManager.get(USE_TAB_CHAR, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets tab character width.\n     * Affects any editors that share the same preference location.\n     * @param {number} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setTabSize = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(TAB_SIZE, value, options);\n    };\n\n    /**\n     * Get indent unit\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {number}\n     */\n    Editor.getTabSize = function (fullPath) {\n        return PreferencesManager.get(TAB_SIZE, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets indentation width.\n     * Affects any editors that share the same preference location.\n     * @param {number} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setSpaceUnits = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(SPACE_UNITS, value, options);\n    };\n\n    /**\n     * Get indentation width\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {number}\n     */\n    Editor.getSpaceUnits = function (fullPath) {\n        return PreferencesManager.get(SPACE_UNITS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets the auto close brackets.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setCloseBrackets = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(CLOSE_BRACKETS, value, options);\n    };\n\n    /**\n     * Gets whether the specified or current file uses auto close brackets\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getCloseBrackets = function (fullPath) {\n        return PreferencesManager.get(CLOSE_BRACKETS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets show line numbers option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setShowLineNumbers = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(SHOW_LINE_NUMBERS, value, options);\n    };\n\n    /**\n     * Returns true if show line numbers is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getShowLineNumbers = function (fullPath) {\n        return PreferencesManager.get(SHOW_LINE_NUMBERS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets show active line option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setShowActiveLine = function (value, fullPath) {\n        return PreferencesManager.set(STYLE_ACTIVE_LINE, value);\n    };\n\n    /**\n     * Returns true if show active line is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getShowActiveLine = function (fullPath) {\n        return PreferencesManager.get(STYLE_ACTIVE_LINE, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets word wrap option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setWordWrap = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(WORD_WRAP, value, options);\n    };\n\n    /**\n     * Returns true if word wrap is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getWordWrap = function (fullPath) {\n        return PreferencesManager.get(WORD_WRAP, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets indentLineComment option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setIndentLineComment = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(INDENT_LINE_COMMENT, value, options);\n    };\n\n    /**\n     * Returns true if indentLineComment is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getIndentLineComment = function (fullPath) {\n        return PreferencesManager.get(INDENT_LINE_COMMENT, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Runs callback for every Editor instance that currently exists\n     * @param {!function(!Editor)} callback\n     */\n    Editor.forEveryEditor = function (callback) {\n        _instances.forEach(callback);\n    };\n\n    /**\n     * @private\n     * Toggles the left padding of all code editors.  Used to provide more\n     * space between the code text and the left edge of the editor when\n     * line numbers are hidden.\n     * @param {boolean} showLinePadding\n     */\n    Editor._toggleLinePadding = function (showLinePadding) {\n        // apply class to all pane DOM nodes\n        var $holders = [];\n        _instances.forEach(function (editor) {\n            var $editorHolder = editor.$el.parent();\n            if ($holders.indexOf($editorHolder) === -1) {\n                $holders.push($editorHolder);\n            }\n        });\n\n        _.each($holders, function ($holder) {\n            $holder.toggleClass(\"show-line-padding\", Boolean(showLinePadding));\n        });\n    };\n\n    Editor.LINE_NUMBER_GUTTER_PRIORITY = LINE_NUMBER_GUTTER_PRIORITY;\n    Editor.CODE_FOLDING_GUTTER_PRIORITY = CODE_FOLDING_GUTTER_PRIORITY;\n\n    /**\n     * Each Editor instance object dispatches the following events:\n     *    - keydown, keypress, keyup -- When any key event happens in the editor (whether it changes the\n     *      text or not). Handlers are passed `(BracketsEvent, Editor, KeyboardEvent)`. The 3nd arg is the\n     *      raw DOM event. Note: most listeners will only want to listen for \"keypress\".\n     *    - change - Triggered with an array of change objects. Parameters: (editor, changeList)\n     *    - beforeChange - (self, changeObj)\n     *    - beforeSelectionChange - (selectionObj)\n     *    - focus - Fired when an editor is focused\n     *    - blur - Fired when an editor loses focused\n     *    - update - Will be fired whenever Editor updates its DOM display.\n     *    - cursorActivity -- When the user moves the cursor or changes the selection, or an edit occurs.\n     *      Note: do not listen to this in order to be generally informed of edits--listen to the\n     *      \"change\" event on Document instead.\n     *    - scroll -- When the editor is scrolled, either by user action or programmatically.\n     *    - viewportChange - (from: number, to: number) Fires whenever the view port of the editor changes\n     *      (due to scrolling, editing, or any other factor). The from and to arguments give the new start\n     *      and end of the viewport. This is combination with `editorInstance.getViewPort()` can be used to\n     *      selectively redraw visual elements in code like syntax analyze only parts of code instead\n     *      of the full code everytime.\n     *    - lostContent -- When the backing Document changes in such a way that this Editor is no longer\n     *      able to display accurate text. This occurs if the Document's file is deleted, or in certain\n     *      Document->editor syncing edge cases that we do not yet support (the latter cause will\n     *      eventually go away).\n     *    - optionChange -- Triggered when an option for the editor is changed. The 2nd arg to the listener\n     *      is a string containing the editor option that is changing. The 3rd arg, which can be any\n     *      data type, is the new value for the editor option.\n     *    - beforeDestroy - Triggered before the object is about to dispose of all its internal state data\n     *      so that listeners can cache things like scroll pos, etc...\n     */\n    Editor.EVENT_BEFORE_CHANGE = \"beforeChange\";\n    Editor.EVENT_CHANGE = \"change\";\n    Editor.EVENT_BEFORE_SELECTION_CHANGE = \"beforeSelectionChange\";\n    Editor.EVENT_CURSOR_ACTIVITY = \"cursorActivity\";\n    Editor.EVENT_KEY_PRESS = \"keypress\";\n    Editor.EVENT_KEY_DOWN = \"keydown\";\n    Editor.EVENT_KEY_UP = \"keyup\";\n    Editor.EVENT_FOCUS = \"focus\";\n    Editor.EVENT_BLUR = \"blur\";\n    Editor.EVENT_UPDATE = \"update\";\n    Editor.EVENT_SCROLL = \"scroll\";\n    Editor.EVENT_VIEW_PORT_CHANGE = \"viewportChange\";\n    Editor.EVENT_LOST_CONTENT = \"lostContent\";\n    Editor.EVENT_OPTION_CHANGE = \"optionChange\";\n\n    // Set up listeners for preference changes\n    editorOptions.forEach(function (prefName) {\n        PreferencesManager.on(\"change\", prefName, function () {\n            _instances.forEach(function (editor) {\n                editor._updateOption(prefName);\n            });\n        });\n    });\n\n    // Define public API\n    exports.Editor                  = Editor;\n    exports.BOUNDARY_CHECK_NORMAL   = BOUNDARY_CHECK_NORMAL;\n    exports.BOUNDARY_IGNORE_TOP     = BOUNDARY_IGNORE_TOP;\n    exports.BOUNDARY_BULLSEYE      = BOUNDARY_BULLSEYE;\n});\n"],"file":"Editor.js"}