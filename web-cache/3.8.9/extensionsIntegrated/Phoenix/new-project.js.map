{"version":3,"sources":["extensionsIntegrated/Phoenix/new-project.js"],"names":["define","require","exports","module","Dialogs","Mustache","newProjectTemplate","Strings","StringUtils","ExtensionInterface","CommandManager","Commands","Menus","Metrics","DefaultDialogs","FileSystem","FileUtils","ZipUtils","ProjectManager","EventDispatcher","DocumentCommandHandlers","createProjectDialogue","replaceProjectDialogue","replaceKeepProjectDialogue","defaultProjects","guidedTour","makeEventDispatcher","NEW_PROJECT_INTERFACE","MAX_DEDUPE_COUNT","registerExtensionInterface","newProjectDialogueObj","createProjectDialogueObj","downloadCancelled","_showNewProjectDialogue","window","testEnvironment","isVisible","templateVars","newProjectURL","Phoenix","baseURL","dialogueContents","render","showModalDialogUsingTemplate","setTimeout","document","getElementById","contentWindow","focus","countEvent","EVENT_TYPE","NEW_PROJECT","_addMenuEntries","register","CMD_PROJECT_NEW","FILE_NEW_PROJECT","fileMenu","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_NEW_FOLDER","closeDialogue","close","trigger","EVENT_NEW_PROJECT_DIALOGUE_CLOSED","startTourIfNeeded","showErrorDialogue","title","message","showModalDialog","DIALOG_ID_ERROR","openFolder","execute","FILE_OPEN_FOLDER","then","async","_shouldNotShowDialog","isNativeApp","getProjectRoot","fullPath","getWelcomeProjectPath","_isOpenWithFileFromOS","cliArgs","app","getCommandLineArgs","args","length","projectOpened","getPlaceholderProjectPath","init","shouldShowWelcome","PhStore","getItem","notShow","on","_EVENT_OPEN_WITH_FILE_FROM_OS","_showProjectErrorDialogue","desc","projectPath","err","format","ERROR_LOADING_PROJECT","_showReplaceProjectConfirmDialogue","DIRECTORY_REPLACE_MESSAGE","MESSAGE","_showReplaceKeepProjectConfirmDialogue","_checkIfPathIsWritable","path","Promise","resolve","reject","file","getFileForPath","writeText","done","fail","_validateProjectFolder","dir","getDirectoryForPath","displayPath","getDisplayPath","REQUEST_NATIVE_FILE_SYSTEM_ERROR","NOT_FOUND_ERR","getContents","contents","READ_DIRECTORY_ENTRIES_ERROR","_resolveIfWritable","catch","id","DIALOG_BTN_OK","_findFreeFolderName","basePath","i","newPath","exists","VFS","existsAsync","ensureExistsDirAsync","e","_getSuggestedProjectDir","suggestedProjectName","getLocalProjectsPath","DIALOG_BTN_CANCEL","_showCreateProjectDialogue","TITLE","_closeCreateProjectDialogue","_updateCreateProjectDialogueMessage","el","textContent","_unzipProject","data","flattenFirstLevelInZip","progressCb","UNZIP_IN_PROGRESS","DOWNLOAD_COMPLETE","unzipBinDataToLocation","downloadAndOpenProject","downloadURL","console","log","SETTING_UP_PROJECT","DOWNLOADING","JSZipUtils","getBinaryContent","callback","error","DOWNLOAD_FAILED","DOWNLOAD_FAILED_MESSAGE","_progressCB","total","EXTRACTING_FILES_PROGRESS","openProject","UNZIP_FAILED","progress","status","percent","Math","round","abortCheck","showFolderSelect","showOpenDialog","CHOOSE_FOLDER","files","showAboutBox","HELP_ABOUT","EVENT_AFTER_PROJECT_OPEN","setupExploreProject","setupStartupProject","alreadyExists","getExploreProjectPath","getMountDir","getTauriDir","getTauriPlatformPath","fs"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n    const Dialogs = require(\"widgets/Dialogs\"),\n        Mustache = require(\"thirdparty/mustache/mustache\"),\n        newProjectTemplate = require(\"text!./html/new-project-template.html\"),\n        Strings = require(\"strings\"),\n        StringUtils = require(\"utils/StringUtils\"),\n        ExtensionInterface = require(\"utils/ExtensionInterface\"),\n        CommandManager = require(\"command/CommandManager\"),\n        Commands = require(\"command/Commands\"),\n        Menus = require(\"command/Menus\"),\n        Metrics = require(\"utils/Metrics\"),\n        DefaultDialogs = require(\"widgets/DefaultDialogs\"),\n        FileSystem = require(\"filesystem/FileSystem\"),\n        FileUtils = require(\"file/FileUtils\"),\n        ZipUtils = require(\"utils/ZipUtils\"),\n        ProjectManager = require(\"project/ProjectManager\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        DocumentCommandHandlers = require(\"document/DocumentCommandHandlers\"),\n        createProjectDialogue = require(\"text!./html/create-project-dialogue.html\"),\n        replaceProjectDialogue = require(\"text!./html/replace-project-dialogue.html\"),\n        replaceKeepProjectDialogue = require(\"text!./html/replace-keep-project-dialogue.html\"),\n        defaultProjects   = require(\"./default-projects\"),\n        guidedTour = require(\"./guided-tour\");\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    const NEW_PROJECT_INTERFACE = \"Extn.Phoenix.newProject\",\n        MAX_DEDUPE_COUNT = 10000;\n\n    ExtensionInterface.registerExtensionInterface(NEW_PROJECT_INTERFACE, exports);\n\n    let newProjectDialogueObj,\n        createProjectDialogueObj,\n        downloadCancelled = false;\n\n    function _showNewProjectDialogue() {\n        if(window.testEnvironment){\n            return;\n        }\n        if(newProjectDialogueObj && newProjectDialogueObj.isVisible()){\n            return;\n        }\n        let templateVars = {\n            Strings: Strings,\n            newProjectURL: `${window.Phoenix.baseURL}assets/new-project/code-editor.html`\n        };\n        let dialogueContents = Mustache.render(newProjectTemplate, templateVars);\n        newProjectDialogueObj = Dialogs.showModalDialogUsingTemplate(dialogueContents, true);\n        setTimeout(()=>{\n            document.getElementById(\"newProjectFrame\").contentWindow.focus();\n        }, 100);\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"open\");\n    }\n\n    function _addMenuEntries() {\n        CommandManager.register(Strings.CMD_PROJECT_NEW, Commands.FILE_NEW_PROJECT, _showNewProjectDialogue);\n        const fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_NEW_PROJECT, \"\", Menus.AFTER, Commands.FILE_NEW_FOLDER);\n    }\n\n    function closeDialogue() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"close\");\n        newProjectDialogueObj.close();\n        exports.trigger(exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED);\n        guidedTour.startTourIfNeeded();\n    }\n\n    function showErrorDialogue(title, message) {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            title,\n            message\n        );\n    }\n\n    function openFolder () {\n        CommandManager.execute(Commands.FILE_OPEN_FOLDER).then(closeDialogue);\n    }\n\n    async function _shouldNotShowDialog() {\n        if(!Phoenix.isNativeApp){\n            // in browser we always show the new project dialog even if there is a different startup project open. This\n            // is mainly for users to discover the download native app button in the new project window.\n            return false;\n        }\n        // in tauri, we don't show the dialog if its not default project or\n        // if phoenix was opened with a file/folder from os with cli args. In mac, this is done via\n        // setSingleInstanceCLIArgsHandler as it doesnt use cli args for open with like other os.\n        if(ProjectManager.getProjectRoot().fullPath !== ProjectManager.getWelcomeProjectPath() ||\n            DocumentCommandHandlers._isOpenWithFileFromOS()){\n            return true;\n        }\n        // we are in the default project, show the dialog only if we are not opened with a file\n        const cliArgs= await Phoenix.app.getCommandLineArgs();\n        const args = cliArgs && cliArgs.args;\n        if(!args || args.length <= 1){\n            return false;\n        }\n        return true;\n    }\n\n    function projectOpened() {\n        if(ProjectManager.getProjectRoot().fullPath === ProjectManager.getPlaceholderProjectPath()){\n            _showNewProjectDialogue();\n        }\n    }\n\n    ProjectManager.on(ProjectManager.EVENT_AFTER_PROJECT_OPEN, projectOpened);\n\n    function init() {\n        _addMenuEntries();\n        const shouldShowWelcome = PhStore.getItem(\"new-project.showWelcomeScreen\") || 'Y';\n        if(shouldShowWelcome !== 'Y') {\n            Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"disabled\");\n            guidedTour.startTourIfNeeded();\n            return;\n        }\n        _shouldNotShowDialog()\n            .then(notShow=>{\n                if(notShow){\n                    return;\n                }\n                _showNewProjectDialogue();\n                DocumentCommandHandlers.on(DocumentCommandHandlers._EVENT_OPEN_WITH_FILE_FROM_OS, ()=>{\n                    closeDialogue();\n                });\n            });\n    }\n\n    function _showProjectErrorDialogue(desc, projectPath, err) {\n        let message = StringUtils.format(desc, projectPath, err);\n        showErrorDialogue(Strings.ERROR_LOADING_PROJECT, message);\n    }\n\n    function _showReplaceProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceProjectDialogue, templateVars));\n    }\n\n    function _showReplaceKeepProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceKeepProjectDialogue, templateVars));\n    }\n\n    function _checkIfPathIsWritable(path) {\n        // this is needed as for fs access APIs in native folders, the browser will ask an additional write permission\n        // to the user. We have to validate that before proceeding.\n        // We do this by writing a file `.phcode.json` to the folder\n        return new Promise((resolve, reject)=>{\n            let file = FileSystem.getFileForPath(`${path}/.phcode.json`);\n            FileUtils.writeText(file, \"{}\", true)\n                .done(resolve)\n                .fail(reject);\n        });\n    }\n\n    async function _validateProjectFolder(projectPath) {\n        return new Promise((resolve, reject)=>{\n            let dir = FileSystem.getDirectoryForPath(projectPath);\n            let displayPath = Phoenix.app.getDisplayPath(projectPath);\n            if(!dir){\n                _showProjectErrorDialogue(Strings.REQUEST_NATIVE_FILE_SYSTEM_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                reject();\n            }\n            dir.getContents(function (err, contents) {\n                if (err) {\n                    _showProjectErrorDialogue(Strings.READ_DIRECTORY_ENTRIES_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                    reject();\n                    return;\n                }\n                function _resolveIfWritable() {\n                    _checkIfPathIsWritable(projectPath)\n                        .then(resolve)\n                        .catch(reject);\n                }\n                if(contents.length >0){\n                    _showReplaceProjectConfirmDialogue(displayPath).done(function (id) {\n                        if (id === Dialogs.DIALOG_BTN_OK) {\n                            _resolveIfWritable();\n                            return;\n                        }\n                        reject();\n                    });\n                } else {\n                    _resolveIfWritable();\n                }\n            });\n        });\n    }\n\n    async function _findFreeFolderName(basePath) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                for(let i=0; i< MAX_DEDUPE_COUNT; i++){\n                    let newPath = `${basePath}-${i}`;\n                    let exists = await window.Phoenix.VFS.existsAsync(newPath);\n                    if(!exists){\n                        await window.Phoenix.VFS.ensureExistsDirAsync(newPath);\n                        resolve(newPath);\n                        return;\n                    }\n                }\n                reject();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async function _getSuggestedProjectDir(suggestedProjectName) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try{\n                // try suggested path first\n                let projectPath = `${ProjectManager.getLocalProjectsPath()}${suggestedProjectName}`;\n                let exists = await window.Phoenix.VFS.existsAsync(projectPath);\n                if(!exists){\n                    resolve(projectPath);\n                    return;\n                }\n                _showReplaceKeepProjectConfirmDialogue(suggestedProjectName).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        resolve(projectPath);\n                        return;\n                    } else if(id === Dialogs.DIALOG_BTN_CANCEL){\n                        reject();\n                        return;\n                    }\n                    _findFreeFolderName(projectPath)\n                        .then(projectPath=>resolve(projectPath))\n                        .catch(reject);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function _showCreateProjectDialogue(title, message) {\n        let templateVars = {\n            Strings: Strings,\n            TITLE: title,\n            MESSAGE: message\n        };\n        createProjectDialogueObj=\n            Dialogs.showModalDialogUsingTemplate(Mustache.render(createProjectDialogue, templateVars));\n        return createProjectDialogueObj;\n    }\n\n    function _closeCreateProjectDialogue() {\n        createProjectDialogueObj.close();\n    }\n\n    function _updateCreateProjectDialogueMessage(message, title) {\n        let el = document.getElementById('new-prj-msg-dlg-message');\n        if(el){\n            el.textContent = message;\n        }\n        el = document.getElementById('new-prj-msg-dlg-title');\n        if(el && title){\n            el.textContent = title;\n        }\n    }\n\n    function _unzipProject(data, projectPath, flattenFirstLevelInZip, progressCb) {\n        return new Promise((resolve, reject)=>{\n            _updateCreateProjectDialogueMessage(Strings.UNZIP_IN_PROGRESS, Strings.DOWNLOAD_COMPLETE);\n            ZipUtils.unzipBinDataToLocation(data, projectPath, flattenFirstLevelInZip, progressCb)\n                .then(resolve)\n                .catch(reject);\n        });\n    }\n\n    /**\n     *\n     * @param downloadURL\n     * @param projectPath\n     * @param suggestedProjectName\n     * @param flattenFirstLevelInZip if set to true, then if zip contents are nested inside a directory, the nexted dir\n     * will be removed in the path structure in destination. For Eg. some Zip may contain a `contents` folder inside the\n     * zip which has all the contents. If we blindly extract the zio, all the contents will be placed inside a\n     * `contents` folder in root and not the root dir itself.\n     * See a sample zip file here: https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball\n     * @returns {Promise<void>}\n     */\n    async function downloadAndOpenProject(downloadURL, projectPath, suggestedProjectName, flattenFirstLevelInZip) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                // if project path is null, create one in default folder\n                if(!projectPath){\n                    projectPath = await _getSuggestedProjectDir(suggestedProjectName);\n                } else {\n                    await _validateProjectFolder(projectPath);\n                }\n                console.log(\n                    `downloadAndOpenProject ${suggestedProjectName} from URL: ${downloadURL} to: ${projectPath}`);\n\n                downloadCancelled = false;\n                _showCreateProjectDialogue(Strings.SETTING_UP_PROJECT, Strings.DOWNLOADING).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        downloadCancelled = true;\n                    }\n                });\n                window.JSZipUtils.getBinaryContent(downloadURL, {\n                    callback: async function(err, data) {\n                        if(downloadCancelled){\n                            reject();\n                        } else if(err) {\n                            console.error(\"could not load phoenix default project from zip file!\", err);\n                            _closeCreateProjectDialogue();\n                            showErrorDialogue(Strings.DOWNLOAD_FAILED, Strings.DOWNLOAD_FAILED_MESSAGE);\n                            reject();\n                        } else {\n                            function _progressCB(done, total) {\n                                let message = StringUtils.format(Strings.EXTRACTING_FILES_PROGRESS, done, total);\n                                _updateCreateProjectDialogueMessage(message);\n                                return !downloadCancelled; // continueExtraction id not download cancelled\n                            }\n                            _unzipProject(data, projectPath, flattenFirstLevelInZip, _progressCB)\n                                .then(()=>{\n                                    _closeCreateProjectDialogue();\n                                    ProjectManager.openProject(projectPath)\n                                        .then(resolve)\n                                        .fail(reject);\n                                    console.log(\"Project Setup complete: \", projectPath);\n                                })\n                                .catch(()=>{\n                                    _closeCreateProjectDialogue();\n                                    showErrorDialogue(Strings.ERROR_LOADING_PROJECT, Strings.UNZIP_FAILED);\n                                    reject();\n                                });\n                        }\n                    },\n                    progress: function (status){\n                        if(status.percent > 0){\n                            _updateCreateProjectDialogueMessage(\n                                `${Strings.DOWNLOADING} ${Math.round(status.percent)}%`);\n                        }\n                    },\n                    abortCheck: function (){\n                        return downloadCancelled;\n                    }\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function showFolderSelect() {\n        return new Promise((resolve, reject)=>{\n            FileSystem.showOpenDialog(false, true, Strings.CHOOSE_FOLDER, '', null, function (err, files) {\n                if(err || files.length !== 1){\n                    reject();\n                    return;\n                }\n                resolve(files[0]);\n            });\n        });\n    }\n\n    function showAboutBox() {\n        CommandManager.execute(Commands.HELP_ABOUT);\n    }\n\n    exports.init = init;\n    exports.openFolder = openFolder;\n    exports.closeDialogue = closeDialogue;\n    exports.downloadAndOpenProject = downloadAndOpenProject;\n    exports.showFolderSelect = showFolderSelect;\n    exports.showErrorDialogue = showErrorDialogue;\n    exports.setupExploreProject = defaultProjects.setupExploreProject;\n    exports.setupStartupProject = defaultProjects.setupStartupProject;\n    exports.alreadyExists = window.Phoenix.VFS.existsAsync;\n    exports.Metrics = Metrics;\n    exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED = \"newProjectDlgClosed\";\n    exports.getWelcomeProjectPath = ProjectManager.getWelcomeProjectPath;\n    exports.getExploreProjectPath = ProjectManager.getExploreProjectPath;\n    exports.getLocalProjectsPath = ProjectManager.getLocalProjectsPath;\n    exports.getMountDir = Phoenix.VFS.getMountDir;\n    exports.path = Phoenix.path;\n    exports.getTauriDir = Phoenix.VFS.getTauriDir;\n    exports.getTauriPlatformPath = Phoenix.fs.getTauriPlatformPath;\n    exports.showAboutBox = showAboutBox;\n});\n"],"file":"new-project.js"}