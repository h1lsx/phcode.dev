{"version":3,"sources":["extensions/default/JSLint/JSHint.js"],"names":["define","require","exports","module","_","brackets","getModule","CodeInspection","FileSystemError","AppInit","PreferencesManager","DocumentManager","Strings","ProjectManager","FileSystem","IndexingWorker","Phoenix","isTestWindow","on","window","_JsHintExtensionReadyToIntegTest","loadScriptInWorker","uri","prefs","getExtensionPrefs","projectSpecificOptions","jsHintConfigFileErrorMessage","PREFS_JSHINT_DISABLED","DEFAULT_OPTIONS","esversion","browser","node","jquery","rhino","jasmine","devel","_getLinterConfigFileErrorMsg","pos","line","ch","message","type","Type","ERROR","async","lintOneFile","text","_fullPath","Promise","resolve","errors","replace","options","execPeer","then","jsHintErrors","lintResult","length","map","lintError","character","reason","code","definePreference","description","DESCRIPTION_JSHINT_DISABLE","requestRun","JSHINT_NAME","CONFIG_FILE_NAME","removeComments","str","_readConfig","dir","configFileName","reject","configFilePath","path","join","displayPath","makeProjectRelativeIfPossible","app","getDisplayPath","getDocumentForPath","done","configDoc","config","content","getText","JSON","parse","console","log","e","extends","extendFile","getFileForPath","parentPath","name","baseConfigResult","mergedConfig","$","extend","globals","catch","extendDisplayPath","fullPath","fail","err","NOT_FOUND","error","_reloadOptions","getProjectRoot","isJSHintConfigActive","_isFileInArray","fileToCheck","fileArray","file","_projectFileChanged","_evt","entry","added","removed","appReady","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","register","scanFileAsync","canInspect","get","endsWith"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// Parts of this file is adapted from https://github.com/cfjedimaster/brackets-jshint\n\n/*global path*/\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const _                = brackets.getModule(\"thirdparty/lodash\"),\n        CodeInspection     = brackets.getModule(\"language/CodeInspection\"),\n        FileSystemError    = brackets.getModule(\"filesystem/FileSystemError\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        FileSystem         = brackets.getModule(\"filesystem/FileSystem\"),\n        IndexingWorker     = brackets.getModule(\"worker/IndexingWorker\");\n\n    if(Phoenix.isTestWindow) {\n        IndexingWorker.on(\"JsHint_extension_Loaded\", ()=>{\n            window._JsHintExtensionReadyToIntegTest = true;\n        });\n    }\n    IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/jslint-helper.js`);\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"jshint\"),\n        projectSpecificOptions = null,\n        jsHintConfigFileErrorMessage = null;\n\n    const PREFS_JSHINT_DISABLED = \"disabled\";\n\n    // We don't provide default options in the preferences as preferences will try to mixin default options with\n    // user defined options leading to unexpected results. Either we take user defined options or default, no mixin.\n    let DEFAULT_OPTIONS = {\n        \"esversion\": 11,\n        \"browser\": true,\n        \"node\": true,\n        \"jquery\": true,\n        \"rhino\": false, // false here means read-only global property\n        \"jasmine\": true,\n        \"devel\": false\n    };\n\n    prefs.definePreference(PREFS_JSHINT_DISABLED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_JSHINT_DISABLE\n    }).on(\"change\", function () {\n        CodeInspection.requestRun(Strings.JSHINT_NAME);\n    });\n\n    function _getLinterConfigFileErrorMsg() {\n        return [{\n            // JSLint returns 1-based line/col numbers\n            pos: { line: -1, ch: 0 },\n            message: jsHintConfigFileErrorMessage,\n            type: CodeInspection.Type.ERROR\n        }];\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, _fullPath) {\n        return new Promise((resolve)=>{\n            if(jsHintConfigFileErrorMessage){\n                resolve({ errors: _getLinterConfigFileErrorMsg() });\n                return;\n            }\n            // If a line contains only whitespace (here spaces or tabs), remove the whitespace\n            text = text.replace(/^[ \\t]+$/gm, \"\");\n\n            let options = projectSpecificOptions || DEFAULT_OPTIONS;\n\n            IndexingWorker.execPeer(\"jsHint\", {\n                text,\n                options\n            }).then(jsHintErrors =>{\n                if (!jsHintErrors.lintResult && jsHintErrors.errors.length) {\n                    let errors = jsHintErrors.errors;\n\n                    errors = errors.map(function (lintError) {\n                        return {\n                            // JSLint returns 1-based line/col numbers\n                            pos: { line: lintError.line - 1, ch: lintError.character },\n                            message: `${lintError.reason} jshint (${lintError.code})`,\n                            type: CodeInspection.Type.ERROR\n                        };\n                    });\n\n                    resolve({ errors: errors });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    const CONFIG_FILE_NAME = \".jshintrc\";\n\n    /**\n     * Removes JavaScript comments from a string by replacing\n     * everything between block comments and everything after\n     * single-line comments in a non-greedy way.\n     *\n     * English version of the regex:\n     *   match '/*'\n     *   then match zero or more instances of any character (incl. \\n)\n     *   except for instances of '* /' (without a space, obv.)\n     *   then match '* /' (again, without a space)\n     *\n     * @param {string} str a string with potential JavaScript comments.\n     * @returns {string} a string without JavaScript comments.\n     */\n    function removeComments(str) {\n        str = str || \"\";\n\n        str = str.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\//g, \"\");\n        str = str.replace(/\\/\\/[^\\n\\r]*/g, \"\"); // Everything after '//'\n\n        return str;\n    }\n\n    /**\n     * Reads configuration file in the specified directory. Returns a promise for configuration object.\n     *\n     * @param {string} dir absolute path to a directory.\n     * @param {string} configFileName name of the configuration file (optional)\n     *\n     * @returns {Promise} a promise to return configuration object.\n     */\n    function _readConfig(dir, configFileName) {\n        return new Promise((resolve, reject)=>{\n            configFileName = configFileName || CONFIG_FILE_NAME;\n            const configFilePath = path.join(dir, configFileName);\n            let displayPath = ProjectManager.makeProjectRelativeIfPossible(configFilePath);\n            displayPath = Phoenix.app.getDisplayPath(displayPath);\n            DocumentManager.getDocumentForPath(configFilePath).done(function (configDoc) {\n                let config;\n                const content = configDoc.getText();\n                try {\n                    config = JSON.parse(removeComments(content));\n                    console.log(\"JSHint: loaded config file for project \" + configFilePath);\n                } catch (e) {\n                    console.log(\"JSHint: error parsing \" + configFilePath);\n                    // just log and return as this is an expected failure for us while the user edits code\n                    reject(\"Error parsing JSHint config file:    \" + displayPath);\n                    return;\n                }\n                // Load any base config defined by \"extends\".\n                // The same functionality as in\n                // jslints -> cli.js -> loadConfig -> if (config['extends'])...\n                // https://jshint.com/docs/cli/ > Special Options\n                if (config.extends) {\n                    let extendFile = FileSystem.getFileForPath(path.join(dir, config.extends));\n                    _readConfig(extendFile.parentPath, extendFile.name).then(baseConfigResult=>{\n                        delete config.extends;\n                        let mergedConfig = $.extend({}, baseConfigResult, config);\n                        if (config.globals) {\n                            delete config.globals;\n                        }\n                        resolve(mergedConfig);\n                    }).catch(()=>{\n                        let extendDisplayPath = ProjectManager.makeProjectRelativeIfPossible(extendFile.fullPath);\n                        extendDisplayPath = Phoenix.app.getDisplayPath(extendDisplayPath);\n                        reject(\"Error parsing JSHint config file: \" + extendDisplayPath);\n                    });\n                }\n                else {\n                    resolve(config);\n                }\n            }).fail((err)=>{\n                if(err === FileSystemError.NOT_FOUND){\n                    resolve(null); // no config file is a valid case. we just resolve with null\n                    return;\n                }\n                console.error(\"Error reading JSHint Config File\", configFilePath, err);\n                reject(\"Error reading JSHint Config File\", displayPath);\n            });\n        });\n    }\n\n    function _reloadOptions() {\n        projectSpecificOptions = null;\n        _readConfig(ProjectManager.getProjectRoot().fullPath, CONFIG_FILE_NAME).then((config)=>{\n            projectSpecificOptions = config;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n            jsHintConfigFileErrorMessage = null;\n        }).catch((err)=>{\n            jsHintConfigFileErrorMessage = err;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n        });\n    }\n\n    function isJSHintConfigActive() {\n        return !!(jsHintConfigFileErrorMessage || projectSpecificOptions);\n    }\n\n    function _isFileInArray(fileToCheck, fileArray){\n        if(!fileArray){\n            return false;\n        }\n        for(let file of fileArray){\n            if(file.fullPath === fileToCheck.fullPath){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _projectFileChanged(_evt, entry, added, removed) {\n        let configFilePath = FileSystem.getFileForPath(ProjectManager.getProjectRoot().fullPath + CONFIG_FILE_NAME);\n        if(entry && entry.fullPath === configFilePath.fullPath\n            || _isFileInArray(configFilePath, added)){\n            _reloadOptions();\n        } else if(_isFileInArray(configFilePath, removed)){\n            projectSpecificOptions = null;\n            jsHintConfigFileErrorMessage = null;\n        }\n    }\n\n    AppInit.appReady(function () {\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _reloadOptions);\n        _reloadOptions();\n    });\n\n    // Register for JS files\n    CodeInspection.register(\"javascript\", {\n        name: Strings.JSHINT_NAME,\n        scanFileAsync: lintOneFile,\n        canInspect: function (fullPath) {\n            return !prefs.get(PREFS_JSHINT_DISABLED) && fullPath && !fullPath.endsWith(\".min.js\");\n        }\n    });\n\n    exports.isJSHintConfigActive = isJSHintConfigActive;\n});\n"],"file":"JSHint.js"}