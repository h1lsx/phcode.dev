define(function(require,exports,module){const AppInit=require("utils/AppInit"),Editor=require("editor/Editor").Editor,LanguageManager=require("language/LanguageManager"),CodeMirror=require("thirdparty/CodeMirror/lib/codemirror"),Commands=require("command/Commands"),PreferencesManager=require("preferences/PreferencesManager"),WorkspaceManager=require("view/WorkspaceManager"),Strings=require("strings"),Menus=require("command/Menus"),CommandManager=require("command/CommandManager"),EditorManager=require("editor/EditorManager"),CMD_AUTO_RENAME_TAGS="edit.autoRenameTags",HTML_TAG_SYNC=".htmlTagSync",MARK_TYPE_TAG_RENAME_START="startTagSyncEdit",MARK_TYPE_TAG_RENAME_END="endTagSyncEdit",MARK_TYPE_TAG_RENAME_ESCAPED="escapeTagSyncEdit",PREFERENCES_AUTO_RENAME_TAGS="autoRenameTags";PreferencesManager.definePreference(PREFERENCES_AUTO_RENAME_TAGS,"boolean",!0,{description:Strings.DESCRIPTION_AUTO_RENAME_TAGS});let syncEditEnabled=PreferencesManager.get(PREFERENCES_AUTO_RENAME_TAGS);const MARK_STYLE={className:"editor-text-tag-sync-underline",clearWhenEmpty:!1,inclusiveLeft:!0,inclusiveRight:!0},MARK_STYLE_ESCAPE={className:"editor-text-tag-sync-escape",clearWhenEmpty:!1,inclusiveLeft:!0,inclusiveRight:!0};let activeEditor,marksPresent,tagPosition,langType;function clearRenameMarkers(){marksPresent&&activeEditor&&(marksPresent=!1,activeEditor.off(Editor.EVENT_CHANGE+HTML_TAG_SYNC),activeEditor.clearAllMarks(MARK_TYPE_TAG_RENAME_START),activeEditor.clearAllMarks(MARK_TYPE_TAG_RENAME_END),activeEditor.clearAllMarks(MARK_TYPE_TAG_RENAME_ESCAPED))}function _getTagToken(cursor){let curChar=activeEditor.getCharacterAtPosition(cursor);if("<"===curChar)return{};let token=activeEditor.getToken(cursor);if(token&&"<>"===token.string)return{};if(token&&"tag bracket"===token.type&&">"!==token.string)cursor.ch++,token=activeEditor.getToken(cursor);else if("xml"===langType&&token&&" "===curChar&&cursor.ch>=1){const previousChar=activeEditor.getCharacterAtPosition({line:cursor.line,ch:cursor.ch-1});if(">"===previousChar)return{clearMarks:!0}}return!token||"tag"!==token.type&&"tag error"!==token.type?{}:{token:token}}function _replaceMarkText(markType,text,editOrigin){let markToReplace=activeEditor.getAllMarks(markType);markToReplace.length&&(markToReplace=markToReplace[0].find(),activeEditor.replaceRange(text,markToReplace.from,markToReplace.to,editOrigin))}function _repositionCursor(offset){let mark="open"===tagPosition?activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_START):activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_END);mark.length&&(mark=mark[0].find(),activeEditor.setCursorPos(mark.from.line,mark.from.ch+offset))}let ignoreChanges=!1;function _changeHandler(_evt,_editor,changes){if(!changes||!activeEditor||!changes.length||ignoreChanges||"undo"===changes[0].origin)return;if(!marksPresent)return void clearRenameMarkers();const cursor=activeEditor.getCursorPos(),escapeMarks=activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_ESCAPED);if(escapeMarks.length)return;let mark="open"===tagPosition?activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_START):activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_END);if(!mark.length)return;mark=mark[0].find();const markedText=activeEditor.getTextBetween(mark.from,mark.to);if(!markedText&&marksPresent&&_isEditingEmptyTag())return ignoreChanges=!0,activeEditor.undo(),activeEditor.operation(()=>{_replaceMarkText(MARK_TYPE_TAG_RENAME_START,"","syncTagPaste"),_replaceMarkText(MARK_TYPE_TAG_RENAME_END,"","syncTagPaste")}),void(ignoreChanges=!1);if(!markedText||markedText.includes(" "))return void clearRenameMarkers();const cursorOffsetInMark=cursor.ch-mark.from.ch,tag=markedText.trim();let markToReplace=activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_END);if("close"===tagPosition&&(markToReplace=activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_START)),!markToReplace.length)return;markToReplace=markToReplace[0].find();const markedReplaceText=activeEditor.getTextBetween(markToReplace.from,markToReplace.to);if(markedReplaceText===tag)return;ignoreChanges=!0;let editOrigin=changes[0].origin;"paste"===changes[0].origin&&(editOrigin="syncTagPaste"),activeEditor.undo(),activeEditor.operation(()=>{_replaceMarkText(MARK_TYPE_TAG_RENAME_START,tag,editOrigin),_replaceMarkText(MARK_TYPE_TAG_RENAME_END,tag,editOrigin),_repositionCursor(cursorOffsetInMark)}),ignoreChanges=!1}function updateRenameMarkers(matchingTags,cursor){const tagName=matchingTags.open.tag;let openPos=matchingTags.open.from,closePos=matchingTags.close.from;clearRenameMarkers(),marksPresent=!0,tagPosition=matchingTags.at;const openPosStart={line:openPos.line,ch:openPos.ch+1},openPosEnd={line:openPos.line,ch:openPos.ch+1+tagName.length};activeEditor.markText(MARK_TYPE_TAG_RENAME_START,openPosStart,openPosEnd,MARK_STYLE);const closePosStart={line:closePos.line,ch:closePos.ch+2},closePosEnd={line:closePos.line,ch:closePos.ch+2+tagName.length};activeEditor.markText(MARK_TYPE_TAG_RENAME_END,closePosStart,closePosEnd,MARK_STYLE),activeEditor.on(Editor.EVENT_CHANGE+HTML_TAG_SYNC,_changeHandler)}function _isEditingEmptyTag(){if(!marksPresent)return!1;const cursor=activeEditor.getCursorPos();let token=activeEditor.getToken(cursor),curChar=activeEditor.getCharacterAtPosition(cursor);return!(!token||"tag"===token.type)&&!("tag bracket"!==token.type&&"</"!==token.string||" "!==curChar&&">"!==curChar&&(">"===token.string||curChar))}function cursorActivity(){const cursor=activeEditor.getCursorPos();if(activeEditor.hasMultipleCursors())return void clearRenameMarkers();const startMark=activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_START),endMark=activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_END),escapeMark=activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_ESCAPED);if(startMark.length||endMark.length||escapeMark.length)return;let{token:token,clearMarks:clearMarks}=_getTagToken(cursor);if(!token)return void(_isEditingEmptyTag()&&!clearMarks||clearRenameMarkers());const matchingTags=CodeMirror.findMatchingTag(activeEditor._codeMirror,cursor);matchingTags&&matchingTags.close?updateRenameMarkers(matchingTags,cursor):clearRenameMarkers()}function toggleAutoRenameTags(){PreferencesManager.set(PREFERENCES_AUTO_RENAME_TAGS,!PreferencesManager.get(PREFERENCES_AUTO_RENAME_TAGS))}function enableIfNeeded(){syncEditEnabled=PreferencesManager.get(PREFERENCES_AUTO_RENAME_TAGS),init()}const tagSyncFileModes=new Set(["htm","html","xhtml","xml","svg","php"]);function _isTagSyncEditable(editor){const language=LanguageManager.getLanguageForPath(editor.document.file.fullPath);return!(!language||!language.getId())&&(langType=language.getId(),tagSyncFileModes.has(language.getId()))}function init(){activeEditor&&(activeEditor.off(Editor.EVENT_CURSOR_ACTIVITY+HTML_TAG_SYNC),clearRenameMarkers()),!syncEditEnabled||Phoenix.isTestWindow&&!window.___syncEditEnabledForTests||(activeEditor=EditorManager.getActiveEditor(),langType=null,activeEditor&&_isTagSyncEditable(activeEditor)&&(activeEditor.on(Editor.EVENT_CURSOR_ACTIVITY+HTML_TAG_SYNC,cursorActivity),cursorActivity()))}function _handleEscapeKeyEvent(_event){if(!marksPresent||!activeEditor)return!1;const cursor=activeEditor.getCursorPos(),startMark=activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_START),endMark=activeEditor.getAllMarks(MARK_TYPE_TAG_RENAME_END);let activeMark="open"===tagPosition?activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_START):activeEditor.findMarksAt(cursor,MARK_TYPE_TAG_RENAME_END);if(activeMark.length){const mark=activeMark[0].find();return activeEditor.markText(MARK_TYPE_TAG_RENAME_ESCAPED,mark.from,mark.to,MARK_STYLE_ESCAPE),startMark.length&&startMark[0].clear(),endMark.length&&endMark[0].clear(),!0}return!1}AppInit.appReady(function(){EditorManager.on(EditorManager.EVENT_ACTIVE_EDITOR_CHANGED+HTML_TAG_SYNC,init),setTimeout(init,1e3);const toggleCmd=CommandManager.register(Strings.CMD_AUTO_RENAME_TAGS,CMD_AUTO_RENAME_TAGS,toggleAutoRenameTags);toggleCmd.setChecked(PreferencesManager.get(PREFERENCES_AUTO_RENAME_TAGS)),Menus.getMenu(Menus.AppMenuBar.EDIT_MENU).addMenuItem(CMD_AUTO_RENAME_TAGS,"",Menus.AFTER,Commands.TOGGLE_CLOSE_BRACKETS),PreferencesManager.on("change",PREFERENCES_AUTO_RENAME_TAGS,()=>{toggleCmd.setChecked(PreferencesManager.get(PREFERENCES_AUTO_RENAME_TAGS)),enableIfNeeded()}),enableIfNeeded(),WorkspaceManager.addEscapeKeyEventHandler("tagSyncEdit",_handleEscapeKeyEvent)})});
//# sourceMappingURL=main.js.map
